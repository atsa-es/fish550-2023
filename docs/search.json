[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Fish 550 Spring 2023",
    "section": "",
    "text": "Labs\n\nLab 1: Forecasting with ARIMA models\nLab 2: Interpolating with MARSS models\nLab 3: Dynamic Factor Analysis (DFA)\nLab 4: Hidden Markov Models"
  },
  {
    "objectID": "Lab-1/Lab1-ARIMA.html#teams",
    "href": "Lab-1/Lab1-ARIMA.html#teams",
    "title": "2  Lab Intro",
    "section": "Teams",
    "text": "Teams\n\nBristol Bay Data: Nick Chambers (SAFS), Liz Elmstrom (SAFS), Maria Kuruvilla (QERM)\nBristol Bay Data: Eric French (Civil), Dylan Hubl (ESRM), Miranda Mudge (Molecular & Cell Bio)\nRuggerone & Irvine Data: Zoe Rand (QERM), Madison Shipley (SAFS), Emma Timmins-Schiffman (Genome Sci)\nRuggerone & Irvine Data: Terrance Wang (SAFS), Josh Zahner (SAFS), Karl Veggerby (SAFS)"
  },
  {
    "objectID": "Lab-1/Lab1-ARIMA.html#references",
    "href": "Lab-1/Lab1-ARIMA.html#references",
    "title": "2  Lab Intro",
    "section": "References",
    "text": "References\nHolmes, E. E. (2020) Fisheries Catch Forecasting https://fish-forecast.github.io/Fish-Forecast-Bookdown\nHyndman, R.J., & Athanasopoulos, G. (2018) Forecasting: principles and practice, 2nd edition, OTexts: Melbourne, Australia. https://otexts.com/fpp2/.\nPlus the lecture material on the ATSA website."
  },
  {
    "objectID": "Lab-1/Lab1-ARIMA.html#type-of-questions-you-might-ask",
    "href": "Lab-1/Lab1-ARIMA.html#type-of-questions-you-might-ask",
    "title": "2  Lab Intro",
    "section": "Type of questions you might ask",
    "text": "Type of questions you might ask\n“Compare the accuracy of forecasts using best fit ARIMA models for pink salmon using the different regions in the Ruggerone & Irvine data. Is forecast accuracy is different for different regions?”\n“Compare the accuracy of total abundance forecasts using ARIMA models for Bristol Bay sockeye rivers and compare to the AKFW and UW FRI forecasts.”\n“Compare the accuracy of age-group forecasts using ARIMA models for Bristol Bay sockeye and compare to the AKFW and UW FRI forecasts.”\n“Use the Ruggerone & Irvine data and ARIMA models to study the autoregressive structure of pink, chum and sockeye. Are there differences by region (AK verus E Asia)?”\n“Compare the forecasts of total North Pacific pink and chum using 5, 10, 15, and 20 years of training data. Does forecast accuracy increase with more training data?”\n“Create 1-year forecasts of total North Pacific pink salmon using 20 years of training data for all of the Ruggerone and Irvine data. Is forecast error correlated with the PDO?”"
  },
  {
    "objectID": "Lab-1/Lab1-ARIMA.html#bristol-bay-sockeye-data",
    "href": "Lab-1/Lab1-ARIMA.html#bristol-bay-sockeye-data",
    "title": "2  Lab Intro",
    "section": "Bristol Bay Sockeye data",
    "text": "Bristol Bay Sockeye data\nThe bristol_bay_data_plus_covariates.rds file has Bristol Bay sockeye abundance for 9 rivers for 4 age-groups. The data are from Ovando et al 2021 Improving forecasts of sockeye salmon (Oncorhynchus nerka) with parametric and nonparametric models DOI: 10.1139/cjfas-2021-0287. You’ll find a copy in the lab folder. The data file also has the covariates for year that the smolts enter the ocean as used in Ovando et al. \nLoad the data.\n\n\nCode\nbb_data &lt;- readRDS(here::here(\"Lab-1\", \"Data_Images\", \"bristol_bay_data_plus_covariates.rds\"))\n\n\nThe data you will most likely want are\n\nret_yr The year the spawners return to the spawning grounds\nret The returns (number of fish in 1000s)\nsystem The river name\nage_group The age_group\nforecast.adfw The forecast from AK Fish and Wildlife\nforecast.fri The forecast from UW Fisheries Research Institute\nenv_* are some covariates at the year the age group entered the ocean\n\nIn the data file, the age group designation is “a.b” where “a” is number of years in freshwater and “b” is number of years in the ocean. The age of the spawners in then a+b.\n\nThe data\n\n\ncolnames:  brood_yr ret_yr system fw_age o_age age_group ret forecast.adfw forecast.fri env_pdo env_sst env_slp env_upstr \n\n\nsystem (river):  Igushik Wood Nushagak Kvichak Naknek Egegik Ugashik \n\n\nage groups:  \n\n\nSome plots of the Bristol Bay data. Hmm there is a NA that was replaced with 0 it looks like.\n\n\nCode\nbb_data %&gt;% \n  filter(system==\"Kvichak\") %&gt;% \n  ggplot(aes(x=ret_yr, y=log(ret))) + \n    geom_line() + \n    ggtitle(\"log abundance by age group\") +\n    facet_wrap(~age_group)\n\n\n\n\n\nplotted by age group\n\n\n\n\n\n\nCode\nbb_data %&gt;% \n  group_by(system, ret_yr) %&gt;%\n  summarize(total = sum(ret, na.rm=TRUE)) %&gt;%\n  ggplot(aes(x=ret_yr, y=log(total))) + \n    geom_line() + \n    ggtitle(\"log abundance by river\") +\n    facet_wrap(~system)\n\n\n\n\n\ntotal across all 4 ages\n\n\n\n\n\nSome subsets of the data\nHere are some subsets of the data that you might want to use.\nLog total by age group\n\n\nCode\nsubdata &lt;- bb_data %&gt;% \n  group_by(age_group, ret_yr) %&gt;%\n  summarize(lntotal = log(sum(ret, na.rm=TRUE)))\nhead(subdata)\n\n\n# A tibble: 6 × 3\n# Groups:   age_group [1]\n  age_group ret_yr lntotal\n  &lt;chr&gt;      &lt;dbl&gt;   &lt;dbl&gt;\n1 1.2         1963    7.49\n2 1.2         1964    8.50\n3 1.2         1965    7.22\n4 1.2         1966    7.18\n5 1.2         1967    6.88\n6 1.2         1968    8.11\n\n\nLog total by river\n\n\nCode\nsubdata &lt;- bb_data %&gt;% \n  group_by(system, ret_yr) %&gt;%\n  summarize(lntotal = log(sum(ret, na.rm=TRUE)))\nhead(subdata)\n\n\n# A tibble: 6 × 3\n# Groups:   system [1]\n  system ret_yr lntotal\n  &lt;chr&gt;   &lt;dbl&gt;   &lt;dbl&gt;\n1 Egegik   1963    7.54\n2 Egegik   1964    7.55\n3 Egegik   1965    8.55\n4 Egegik   1966    7.95\n5 Egegik   1967    7.41\n6 Egegik   1968    6.88\n\n\nCompare fish that spend 2 years in ocean versus those that spend 3 years.\n\n\nCode\nsubdata &lt;- bb_data %&gt;% \n  mutate(\n    ocean_years = case_match(\n      age_group, \n      c(\"2.3\", \"1.3\") ~ \"3-yr-ocean\",\n      c(\"1.2\", \"2.2\") ~ \"2-yr-ocean\",\n      .default = age_group\n    )) %&gt;%\n  group_by(system, ocean_years, ret_yr) %&gt;%\n  summarize(lntotal = log(sum(ret, na.rm=TRUE)))\nhead(subdata)\n\n\n# A tibble: 6 × 4\n# Groups:   system, ocean_years [1]\n  system ocean_years ret_yr lntotal\n  &lt;chr&gt;  &lt;chr&gt;        &lt;dbl&gt;   &lt;dbl&gt;\n1 Egegik 2-yr-ocean    1963    7.02\n2 Egegik 2-yr-ocean    1964    7.29\n3 Egegik 2-yr-ocean    1965    8.34\n4 Egegik 2-yr-ocean    1966    5.96\n5 Egegik 2-yr-ocean    1967    6.58\n6 Egegik 2-yr-ocean    1968    6.35\n\n\nGet one time series and split into train and test. Each with 10 years.\n\n\nCode\ndat &lt;- bb_data %&gt;%\n  filter(system == \"Kvichak\", age_group == \"1.3\") %&gt;%\n  mutate(lnreturns = log(ret),\n         year = ret_yr) %&gt;%\n  select(year, lnreturns)\ndatts &lt;- ts(dat$lnreturns, start=dat$year[1])\ntrain &lt;- window(datts, dat$year[1], dat$year[1]+9)\ntest &lt;- window(datts, dat$year[1]+10, dat$year[1]+10+9)"
  },
  {
    "objectID": "Lab-1/Lab1-ARIMA.html#ruggerone-irvine-salmon-in-the-north-pacific",
    "href": "Lab-1/Lab1-ARIMA.html#ruggerone-irvine-salmon-in-the-north-pacific",
    "title": "2  Lab Intro",
    "section": "Ruggerone & Irvine: Salmon in the North Pacific",
    "text": "Ruggerone & Irvine: Salmon in the North Pacific\nThe data set Data_Images/ruggerone_data.rds has total abundance of natural spawners (not hatchery) from 15 regions in the N Pacific. These are data provided with Ruggerone, G. and Irvine, J. 2018. Numbers and biomass of natural- and hatchery-origin Pink, Chum, and Sockeye Salmon in the North Pacific Ocean, 1925-2015. Marine and Coastal Fisheries: Dynamics, Management, and Ecosystem Science 10. DOI: 10.1002/mcf2.10023. Open Access.\nLoad the data\n\n\nCode\nruggerone_data &lt;- readRDS(here::here(\"Lab-1\", \"Data_Images\", \"ruggerone_data.rds\"))\n\n\n\n\n\nFigure 1. The approximate geographic locations of regional stock groups. Region 1, Washington State, including the Columbia River. Region 2, Southern British Columbia (BC) south of the central coast of British Columbia (~51°N). . Region 3, Northern BC including central and northern British Columbia. Region 4, Southeast Alaska (AK) including the Yakutat coast. The Central Alaska region extends from the Bering River (~60°N), near Prince William Sound in Region 5, westward to Unimak Island (~166°W), thereby including Regions 5 through 8. Western Alaska includes Regions 9 through 12, i.e., all North American drainages flowing into the Bering Sea from Unimak Island to Kotzebue. Data for eastern and western Kamchatka (Regions 14 and 15) are separated from data for the Russian mainland and islands (called “Mainland & Islands” here, which includes the Okhotsk coast, Amur River, Primorye, Sakhalin and Kurile Islands, and relatively small runs to the Anadyr). Region 20, Japan, includes the islands of Hokkaido and Honshu. South Korea (Region 21) not shown.\n\n\n\n\n\n\n\n\n\n\nregion in data file\ndesciption\nregions in map\n\n\n\n\njapan\nJapan & South Korea\n20 and 21\n\n\nm_i\nRussian Mainland & Islands\n13, 16, 17 18, 19\n\n\nw_kam\nWestern Kamchatka\n15\n\n\ne_kam\nEastern Kamchatka\n14\n\n\nwak\nWestern Alaska\n9, 10, 11, 12\n\n\ns_pen\nSouthern Alaska Peninsula\n8\n\n\nkod\nKodiak\n7\n\n\nci\nCook Inlet\n6\n\n\npws\nPrince William Sound\n5\n\n\nseak\nSoutheast Alaska\n4\n\n\nnbc\nNorthern British Columbia\n3\n\n\nsbc\nSouthern British Columbia\n2\n\n\nwa\nWashington State\n1\n\n\nwc\nWest Coast USA\nmislabeled on map\n\n\ncak (not in data file)\nCentral Alaska\n5, 6, 7, 8\n\n\n\n\nRuggerone and Irvine data\n\n\ncolnames:  year region returns species \n\n\nspecies:  pink chum sockeye \n\n\nregions:  ci e_kam japan kod korea m_i nbc pws sbc seak s_pen wa wak w_kam wc \n\n\n\n\nSome plots of the Ruggerone and Irvine data.\n\n\nCode\nruggerone_data %&gt;% \n  filter(species==\"pink\") %&gt;% \n  ggplot(aes(x=year, y=log(returns))) + \n    geom_line() + \n    ggtitle(\"pink salmon log abundance\") +\n    facet_wrap(~region)\n\n\n\n\n\npink salmon by regions\n\n\n\n\n\n\nCode\nruggerone_data %&gt;% \n  group_by(species, year) %&gt;%\n  summarize(total = sum(returns, na.rm=TRUE)) %&gt;%\n  ggplot(aes(x=year, y=log(total))) + \n    geom_line() + \n    ggtitle(\"log abundance by species\") +\n    facet_wrap(~species)\n\n\n\n\n\ntotal by species\n\n\n\n\n\n\nSome subsets of the data\nHere are some subsets of the data that you might want to use.\nLog total North Pacific pink, chum, sockeye\n\n\nCode\nsubdata &lt;- ruggerone_data %&gt;% \n  group_by(species, year) %&gt;%\n  summarize(lntotal = log(sum(returns, na.rm=TRUE)))\nhead(subdata)\n\n\n# A tibble: 6 × 3\n# Groups:   species [1]\n  species  year lntotal\n  &lt;chr&gt;   &lt;dbl&gt;   &lt;dbl&gt;\n1 chum     1952    3.91\n2 chum     1953    3.88\n3 chum     1954    4.20\n4 chum     1955    4.28\n5 chum     1956    4.38\n6 chum     1957    4.08\n\n\nLog North Pacific pink\n\n\nCode\nsubdata &lt;- ruggerone_data %&gt;% \n  filter(species == \"pink\") %&gt;%\n mutate(lnreturns = log(returns))\nhead(subdata)\n\n\n# A tibble: 6 × 5\n   year region returns species lnreturns\n  &lt;dbl&gt; &lt;chr&gt;    &lt;dbl&gt; &lt;chr&gt;       &lt;dbl&gt;\n1  1952 ci       4.36  pink        1.47 \n2  1953 ci       1.30  pink        0.264\n3  1954 ci       4.67  pink        1.54 \n4  1955 ci       2.67  pink        0.981\n5  1956 ci       3.57  pink        1.27 \n6  1957 ci       0.804 pink       -0.218\n\n\nTotal in some bigger areas\n\n\nCode\nsubdata &lt;- ruggerone_data %&gt;% \n  mutate(\n    area = case_match(\n      region, \n      c(\"japan\", \"korea\", \"m_i\", \"e_kam\", \"w_kam\") ~ \"East_Asia\",\n      c(\"wak\", \"s_pen\", \"kod\", \"ci\", \"pws\", \"seak\") ~ \"Alaska\",\n      c(\"nbc\", \"sbc\", \"wa\", \"wc\") ~ \"WC\",\n      .default = region\n    )) %&gt;%\n  group_by(area, species, year) %&gt;%\n  summarize(lntotal = log(sum(returns, na.rm=TRUE)))\nhead(subdata)\n\n\n# A tibble: 6 × 4\n# Groups:   area, species [1]\n  area   species  year lntotal\n  &lt;chr&gt;  &lt;chr&gt;   &lt;dbl&gt;   &lt;dbl&gt;\n1 Alaska chum     1952    2.83\n2 Alaska chum     1953    2.77\n3 Alaska chum     1954    2.92\n4 Alaska chum     1955    2.47\n5 Alaska chum     1956    2.81\n6 Alaska chum     1957    2.89"
  },
  {
    "objectID": "Lab-1/Lab1-ARIMA.html#example-analysis",
    "href": "Lab-1/Lab1-ARIMA.html#example-analysis",
    "title": "2  Lab Intro",
    "section": "Example analysis",
    "text": "Example analysis\nGet one time series out of ruggerone_data\n\n\nCode\ndat &lt;- ruggerone_data %&gt;%\n  filter(region == \"wak\", species == \"pink\") %&gt;%\n  mutate(lnreturns = log(returns)) %&gt;%\n  select(year, lnreturns)\nhead(dat)\n\n\n# A tibble: 6 × 2\n   year lnreturns\n  &lt;dbl&gt;     &lt;dbl&gt;\n1  1952      1.40\n2  1953     -1.24\n3  1954      1.40\n4  1955     -1.24\n5  1956      1.40\n6  1957     -1.24\n\n\nMake a time series object and divide into train and test data.\n\n\nCode\ndatts &lt;- ts(dat$lnreturns, start=dat$year[1])\ntrain &lt;- window(datts, 1952, 1971)\ntest &lt;- window(datts, 1972, 2001)\n\n\nFit a model with auto.arima() in the forecast package.\n\n\nCode\nlibrary(forecast)\nmod &lt;- auto.arima(train)\nmod\n\n\nSeries: train \nARIMA(1,0,0) with zero mean \n\nCoefficients:\n          ar1\n      -0.9293\ns.e.   0.0725\n\nsigma^2 = 0.3815:  log likelihood = -19.22\nAIC=42.45   AICc=43.15   BIC=44.44\n\n\nPlot a 30-year forecast against the test data.\n\n\nCode\nlibrary(zoo)\n\n\n\nAttaching package: 'zoo'\n\n\nThe following objects are masked from 'package:base':\n\n    as.Date, as.Date.numeric\n\n\nCode\nfr &lt;- forecast(mod, h=30)\nautoplot(fr) + geom_point(aes(x=x, y=y), data=fortify(test))"
  },
  {
    "objectID": "Lab-1/Final_Write_ups/Lab-1-team-1_final.html",
    "href": "Lab-1/Final_Write_ups/Lab-1-team-1_final.html",
    "title": "3  Team 1 - Lab 1",
    "section": "",
    "text": "Question your team will address\nIn this report we sought to explore how ARIMA models perform when forecasting fish abundance in the near term (5-year forecasts).\nMore specifically, we ask do ARIMA models produce more accurate 5-year forecasts than the Fisheries Research Institute (FRI) for Sockeye in select Bristol Bay Rivers?\nWe will fit multiple ARIMA models to the Bristol Bay sockeye data and compare forecasts among these models (using RMSE) and visually compare the forecasts against the FRI forecast.\nThe ARIMA models we tested produced reasonable estimates for one to three years but tended to miss long term trends in the data. This was especially true for the Wood and Nushagak Rivers which had sharp upward trends in abundance after 2015 that our forecasts did not predict. Rather, our models underpredicted the actual run size in each river. The FRI forecasts were notably better than those generated by our ARIMA models in the Wood and Nushagak Rivers but were unable to capture the large increase in run sizes in recent years. Our forecasts for the Kvichak were much closer to both the FRI forecasts and estimated run sizes, although still generally under predicted across the years tested.\nFor the Wood and Nushagak Rivers the auto.arima function selected a model without drift as the best fit using AIC. When we compared the three best models for each river using the accuracy function a model with drift was chosen based on its lower RMSE value. These models with drift produced a somewhat better visual fit than those chosen by auto.arima but still resulted in underestimates of the run size in all years during the forecasting period. The better visual fit or our model in the Kvichak may be because the run size in the Kvichak has remained relatively stable without the increasing trend visible in the other two rivers. Both the Nushagak and Wood required differencing to remove an increasing trend in the data and this appeared to have a smoothing effect on longer forecasts vs non-differenced model runs. This smoothing may have contributed to the models for the Wood and Nushagak Rivers missing the increasing trend that occurred after 2015. This is also likely driven by the order of our ARIMA models, which only consider the previous time step to create forecasts, and thus do not perform well when predicting across multiple years (particularly when trends starkly increase or decrease). Further, these models neglect to include any environmental covariates that may help predict interannual variation at longer time steps. Had we run the models to only predict one time step forward the models likely would have performed better than relying on multiple year predictions.\nThe autocorrelation present in the residuals for the Kvichak indicates that some structure still exists in the data which is not explained by our models. While few lags are significant there appears to be a repeating sinusoidal pattern in the correlogram. A similar pattern may be present in the Nushagak but it is less apparent in the correlogram, however the Nushagak residuals still show significant autocorrelation. The Wood river has no significant autocorrelation in the residuals and there appears to be the least amount of structure present in the correlogram of any of the rivers tested. This suggests that the ARIMA model may be a better fit to the Wood River system, which is a surprising result as the Kvichak has the best visual fit of the three systems tested.\nBased on our tests here ARIMA models seem best suited to predict short term changes in abundance and were poorly suited for estimating long term trends. As a management tool for Bristol Bay Sockeye they may still be appropriate for establishing annual biological goals for fishery management as only one time step forward would be needed.\nAll team members looked at the data and worked together to decide on a question to answer. The code was split up into several sections and each team member had specific sections to write, although there was a lot of collaboration in drafting these sections. Liz and Maria went to office hours for trouble shooting of code and to ask questions. All team members contributed to accuracy tests and model selection. Nick wrote a first draft of the discussion and all team members provided helpful edits."
  },
  {
    "objectID": "Lab-1/Final_Write_ups/Lab-1-team-1_final.html#initial-plan",
    "href": "Lab-1/Final_Write_ups/Lab-1-team-1_final.html#initial-plan",
    "title": "3  Team 1 - Lab 1",
    "section": "Initial plan",
    "text": "Initial plan\n\n\nWe divided the rivers among the team members to do the initial exploratory analysis and testing for stationarity. We then tried forecasting (5 years) for all rivers using the best model suggested by auto.arima()."
  },
  {
    "objectID": "Lab-1/Final_Write_ups/Lab-1-team-1_final.html#what-you-actually-did",
    "href": "Lab-1/Final_Write_ups/Lab-1-team-1_final.html#what-you-actually-did",
    "title": "3  Team 1 - Lab 1",
    "section": "What you actually did",
    "text": "What you actually did\n\nWe finally chose three rivers to work with - Kvichak, Wood and Nugashak. We split the data into training data (1963-2015) and testing data (2016-2020) and performed forecasts using the auto.arima function. In addition to forecasting with the model suggested by auto.arima, we explored additional top models suggested by the auto.arima function with trace == TRUE. We then compared the accuracy of these modeled forecasts using RMSE. We also plotted the FRI forecast to visually compare the model forecast to the FRI forecast."
  },
  {
    "objectID": "Lab-1/Final_Write_ups/Lab-1-team-1_final.html#read-in-and-explore-data-liz",
    "href": "Lab-1/Final_Write_ups/Lab-1-team-1_final.html#read-in-and-explore-data-liz",
    "title": "3  Team 1 - Lab 1",
    "section": "Read in and explore data (Liz)",
    "text": "Read in and explore data (Liz)\n\n\nCode\nbb_data %&gt;% \n  group_by(system, ret_yr) %&gt;%\n  summarize(total = sum(ret, na.rm=TRUE)) %&gt;%\n  ggplot(aes(x=ret_yr, y=log(total))) + \n    geom_line() + \n    ggtitle(\"log abundance by river\") +\n    facet_wrap(~system)\n\n\n\n\n\nCode\nbb_data %&gt;%\n  group_by(system, ret_yr) %&gt;%\n  summarize(total = sum(forecast.adfw, na.rm=TRUE)) %&gt;%\n  ggplot(aes(x=ret_yr, y=log(total))) +\n    geom_line() +\n    ggtitle(\"ADFW log abundance by river\") +\n    facet_wrap(~system)\n\n\n\n\n\nCode\nbb_data %&gt;% \n  group_by(system, ret_yr) %&gt;%\n  summarize(total = sum(forecast.fri, na.rm=TRUE)) %&gt;%\n  ggplot(aes(x=ret_yr, y=log(total))) + \n    geom_line() + \n    ggtitle(\"FRI log abundance by river\") +\n    facet_wrap(~system)\n\n\n\n\n\nAfter exploring the larger dataset, we chose to explore temporal sockeye dynamics (specifically, total sockeye abundance) in three rivers– the Kvichak, the Nushagak, and the Wood.\nSpecifically, we seek to – 1) identify autocorrelation structures and stationarity for each of the total sockeye abundance time series, 2) compare ARIMA models, forecasts, and forecast accuracies for 5 year forecasts from 2015-2020, and 3) visually compare to these forecasts to forecasts from UW Fisheries Research Institute.\nWe did not compare our models to ADFW forecasts since the ADFW forecasts occur prior to our 5-year forecasts (2015-2020)."
  },
  {
    "objectID": "Lab-1/Final_Write_ups/Lab-1-team-1_final.html#plot-the-data-liz",
    "href": "Lab-1/Final_Write_ups/Lab-1-team-1_final.html#plot-the-data-liz",
    "title": "3  Team 1 - Lab 1",
    "section": "Plot the data (Liz)",
    "text": "Plot the data (Liz)\nPlot the data and discuss any obvious problems with stationarity from your visual test.\n\n\nCode\n#Sum and log returns for each river and year\nlndata &lt;- bb_data %&gt;%\n  group_by(system, ret_yr) %&gt;%\n  summarize(lntotal = log(sum(ret, na.rm=TRUE)))\n\n# Choosing sites CHANGE THIS BASED ON WHAT WE PICK\nour_rivers &lt;- filter(lndata, system %in% c('Kvichak', 'Wood', 'Nushagak'))\n\n# Plotting three rivers\nour_rivers %&gt;% \n  ggplot(aes(x=ret_yr, y=lntotal)) + \n    geom_line() + \n    ggtitle(\"log abundance by river\") +\n    facet_wrap(~system)+theme_bw()\n\n\n\n\n\nBased on these plots, we hypothesize that data will be non-stationary for the Kvichak and stationary for the Nushagak and the Wood around a trend."
  },
  {
    "objectID": "Lab-1/Final_Write_ups/Lab-1-team-1_final.html#use-acf-and-pacf-maria",
    "href": "Lab-1/Final_Write_ups/Lab-1-team-1_final.html#use-acf-and-pacf-maria",
    "title": "3  Team 1 - Lab 1",
    "section": "Use ACF and PACF (Maria)",
    "text": "Use ACF and PACF (Maria)\n\n\nCode\ndata_ts_Kv &lt;- ts(our_rivers$lntotal[our_rivers$system == \"Kvichak\"],\n                      start=our_rivers$ret_yr[our_rivers$system == \"Kvichak\"][1])\n\ndata_ts_Wood &lt;- ts(our_rivers$lntotal[our_rivers$system == \"Wood\"],\n                      start=our_rivers$ret_yr[our_rivers$system == \"Wood\"][1])\n\ndata_ts_Nu &lt;- ts(our_rivers$lntotal[our_rivers$system == \"Nushagak\"],\n                      start=our_rivers$ret_yr[our_rivers$system == \"Nushagak\"][1])\n\n\nacf(data_ts_Wood)\n\n\n\n\n\nCode\npacf(data_ts_Wood)\n\n\n\n\n\nCode\nacf(data_ts_Kv)\n\n\n\n\n\nCode\npacf(data_ts_Kv)\n\n\n\n\n\nCode\nacf(data_ts_Nu)\n\n\n\n\n\nCode\npacf(data_ts_Nu)\n\n\n\n\n\nThe acf plots for Wood river is slowly decaying and the pacf plot shows significance at lag 1. There might be AR1 structure in the data.\nThe pacf plots for Kvichak river is slowly decaying and the pacf plot shows significance at lags 1,2,4, and 6. There might be MA structure in the data.\nThe acf plots for Nushagak river is slowly decaying and the pacf plot shows significance at lags 1 and 6. There might be AR structure in the data."
  },
  {
    "objectID": "Lab-1/Final_Write_ups/Lab-1-team-1_final.html#test-for-stationarity-nick-liz",
    "href": "Lab-1/Final_Write_ups/Lab-1-team-1_final.html#test-for-stationarity-nick-liz",
    "title": "3  Team 1 - Lab 1",
    "section": "Test for stationarity (Nick & Liz)",
    "text": "Test for stationarity (Nick & Liz)\n\n\nCode\n#The Dickey fuller test- looks for evidence that the t.s. are a random walk. The null hypothesis for both tests is that the data are non-stationary. We want to REJECT the null hypothesis for this test, so we want a p-value of less that 0.05 (or smaller). If we reject the null, it IS stationary. \n\n#The KPSS test- The null hypothesis for the KPSS test is that the data are stationary. For this test, we do NOT want to reject the null hypothesis. In other words, we want the p-value to be greater than 0.05 not less than 0.05.\n\nadf.list &lt;- kpss.list &lt;- kpss.trend &lt;- list()\np.vals &lt;- kp.vals.lev &lt;- kp.vals.tre &lt;-  vector()\nRiver &lt;- unique(our_rivers$system)\n\nfor(i in 1:length(River)){\n  sub&lt;-subset(our_rivers,our_rivers$system==River[i])\n  \n  suppressWarnings(adf.list[[i]] &lt;- adf.test(sub$lntotal, k = 0))\n  suppressWarnings(kpss.list[[i]] &lt;- kpss.test(sub$lntotal, null = \"Level\"))\n  suppressWarnings(kpss.trend[[i]] &lt;- kpss.test(sub$lntotal, null = \"Trend\"))\n  \n  p.vals[[i]] &lt;- adf.list[[i]]$p.value # Should be less than .05\n  kp.vals.lev[i] &lt;- kpss.list[[i]]$p.value # Should be greater than .05\n  kp.vals.tre[i] &lt;- kpss.trend[[i]]$p.value # Should be greater than .05\n}\n\n#For the ADF test, we want to REJECT the null hypothesis, so we want a p-value less than 0.05\n#For the KPSS test, we want to ACCEPT the null hypothesis, so we want a p-value greater than 0.05\n\nstation_mat &lt;- matrix(data =c(p.vals,kp.vals.lev,kp.vals.tre), 3, 3)\ncolnames(station_mat) &lt;- c(\"adf\",\"kpss_level\",\"kpss_trend\")\nrownames(station_mat) &lt;- River\nstation_mat\n\n\n          adf kpss_level kpss_trend\nKvichak  0.01       0.10        0.1\nNushagak 0.01       0.01        0.1\nWood     0.01       0.01        0.1\n\n\nThe stationarity tests show that the Kvichak River time series is stationary.\nWhen testing for stationarity around a level using the KPSS test, the Nushagak and the Wood test as non-stationary. However, when we change the null to include a trend, we find that both of these rivers test as stationary around a trend."
  },
  {
    "objectID": "Lab-1/Final_Write_ups/Lab-1-team-1_final.html#difference-tests-liz",
    "href": "Lab-1/Final_Write_ups/Lab-1-team-1_final.html#difference-tests-liz",
    "title": "3  Team 1 - Lab 1",
    "section": "Difference tests (Liz)",
    "text": "Difference tests (Liz)\n\n\nCode\nkv &lt;- filter(lndata, system %in% c(\"Kvichak\"))\nndiffs(kv$lntotal, test='kpss')\n\n\n[1] 0\n\n\nCode\nndiffs(kv$lntotal, test='adf')\n\n\n[1] 0\n\n\nCode\nnu &lt;- filter(lndata, system %in% c(\"Nushagak\"))\nndiffs(nu$lntotal, test='kpss')\n\n\n[1] 1\n\n\nCode\nndiffs(nu$lntotal, test='adf')\n\n\n[1] 1\n\n\nCode\nwo &lt;- filter(lndata, system %in% c(\"Wood\"))\nndiffs(wo$lntotal, test='kpss')\n\n\n[1] 1\n\n\nCode\nndiffs(wo$lntotal, test='adf')\n\n\n[1] 1\n\n\nAccording to these tests, The Kvichak does not need differencing. The Nushagak and the Wood should be differenced by 1. This level of differencing should remove the upward trend or “bias” in the Nushagak and Wood Rivers."
  },
  {
    "objectID": "Lab-1/Final_Write_ups/Lab-1-team-1_final.html#dividing-the-data-into-test-and-train-maria",
    "href": "Lab-1/Final_Write_ups/Lab-1-team-1_final.html#dividing-the-data-into-test-and-train-maria",
    "title": "3  Team 1 - Lab 1",
    "section": "Dividing the data into test and train (Maria)",
    "text": "Dividing the data into test and train (Maria)\n\n\nCode\ndata_ts_Wood &lt;- ts(our_rivers$lntotal[our_rivers$system == \"Wood\"],\n                      start=our_rivers$ret_yr[our_rivers$system == \"Wood\"][1])\n\ntrain_Wood &lt;- window(data_ts_Wood, 1963, 2015)\ntest_Wood &lt;- window(data_ts_Wood, 2016, 2020)\n\ndata_ts_Kv &lt;- ts(our_rivers$lntotal[our_rivers$system == \"Kvichak\"],\n                      start=our_rivers$ret_yr[our_rivers$system == \"Kvichak\"][1])\n\ntrain_Kv &lt;- window(data_ts_Kv, 1963, 2015)\ntest_Kv &lt;- window(data_ts_Kv, 2016, 2020)\n\ndata_ts_Nu &lt;- ts(our_rivers$lntotal[our_rivers$system == \"Nushagak\"],\n                      start=our_rivers$ret_yr[our_rivers$system == \"Nushagak\"][1])\n\ntrain_Nu &lt;- window(data_ts_Nu, 1963, 2015)\ntest_Nu &lt;- window(data_ts_Nu, 2016, 2020)"
  },
  {
    "objectID": "Lab-1/Final_Write_ups/Lab-1-team-1_final.html#fit-arima-models-maria",
    "href": "Lab-1/Final_Write_ups/Lab-1-team-1_final.html#fit-arima-models-maria",
    "title": "3  Team 1 - Lab 1",
    "section": "Fit ARIMA models (Maria)",
    "text": "Fit ARIMA models (Maria)\n\n\nCode\nmod_Kv &lt;- auto.arima(train_Kv)\nmod_Kv\n\n\nSeries: train_Kv \nARIMA(0,0,1) with non-zero mean \n\nCoefficients:\n         ma1    mean\n      0.4784  8.8150\ns.e.  0.1166  0.1922\n\nsigma^2 = 0.9421:  log likelihood = -72.73\nAIC=151.47   AICc=151.96   BIC=157.38\n\n\nCode\nmod_Nu &lt;- auto.arima(train_Nu)\nmod_Nu\n\n\nSeries: train_Nu \nARIMA(0,1,1) \n\nCoefficients:\n          ma1\n      -0.5194\ns.e.   0.1324\n\nsigma^2 = 0.5102:  log likelihood = -55.94\nAIC=115.88   AICc=116.13   BIC=119.79\n\n\nCode\nmod_Wood &lt;- auto.arima(train_Wood)\nmod_Wood\n\n\nSeries: train_Wood \nARIMA(0,1,1) \n\nCoefficients:\n          ma1\n      -0.5434\ns.e.   0.1460\n\nsigma^2 = 0.2091:  log likelihood = -32.77\nAIC=69.54   AICc=69.78   BIC=73.44\n\n\nThe best model according to model selection criterion (AICc) for the Kvichak river is an ARIMA(0,0,1) with a non-zero mean. The best model for the Nushagak and the Wood river is an ARIMA (0,1,1)."
  },
  {
    "objectID": "Lab-1/Final_Write_ups/Lab-1-team-1_final.html#plot-forecasts-from-auto.arima-liz",
    "href": "Lab-1/Final_Write_ups/Lab-1-team-1_final.html#plot-forecasts-from-auto.arima-liz",
    "title": "3  Team 1 - Lab 1",
    "section": "Plot forecasts from auto.arima (Liz)",
    "text": "Plot forecasts from auto.arima (Liz)\nBelow are plots of the total abundance measurements and their 5-year forecasts. The red points refer to Fishery Research Institutes model forecasts. The black points refer to actual data.\n\n\nCode\nfri_fore &lt;- bb_data %&gt;%\n  group_by(system, ret_yr) %&gt;%\n  summarize(lntotal = log(sum(forecast.fri, na.rm=TRUE)))%&gt;%\n  filter(ret_yr %in% 2015:2020)\n\nkv_fri_fore &lt;- fri_fore %&gt;% filter(system %in% 'Kvichak')\nkv_fr &lt;- forecast(mod_Kv, h=5)\nautoplot(kv_fr) + geom_point(aes(x=x, y=y), data=fortify(test_Kv))+\n  geom_point(aes(x=ret_yr, y=lntotal), data = kv_fri_fore, col = \"red\")+\n  ylab(\"Kvichak total sockeye abundance (log)\")\n\n\n\n\n\nCode\nnu_fri_fore &lt;- fri_fore %&gt;% filter(system %in% 'Nushagak')\nnu_fr &lt;- forecast(mod_Nu, h=5)\nautoplot(nu_fr) + geom_point(aes(x=x, y=y), data=fortify(test_Nu))+\n  geom_point(aes(x=ret_yr, y=lntotal), data = nu_fri_fore, col='red')+\n  ylab(\"Nushagak total sockeye abundance (log)\")\n\n\n\n\n\nCode\nwo_fri_fore &lt;- fri_fore %&gt;% filter(system %in% 'Wood')\nwo_fr &lt;- forecast(mod_Wood, h=5)\nautoplot(wo_fr) + geom_point(aes(x=x, y=y), data=fortify(test_Wood))+\n  geom_point(aes(x=ret_yr, y=lntotal), data = wo_fri_fore, col = \"red\")+\n  ylab(\"Wood total sockeye abundance (log)\")\n\n\n\n\n\nThough these test as the best models using the auto.arima() function, we can clearly see that these models do not necessarily provide the best forecasts for the rivers of study. This is particularly apparent for the Nushagak and for the Wood River– the two rivers that include an upward trend or “bias”."
  },
  {
    "objectID": "Lab-1/Final_Write_ups/Lab-1-team-1_final.html#chosing-our-own-arima-structure-liz",
    "href": "Lab-1/Final_Write_ups/Lab-1-team-1_final.html#chosing-our-own-arima-structure-liz",
    "title": "3  Team 1 - Lab 1",
    "section": "Chosing our own ARIMA structure (Liz)",
    "text": "Chosing our own ARIMA structure (Liz)\nHere we play around with different ARIMA structures on our own. Though not shown in the code, we investigated other top models using the auto.arima() function with trace = TRUE. We then tested the three top models based on AICc for the Kvichak. For the Nushagak and the Wood, we tested the two top models based on AICc, plus the best model with an added drift component.\n\n\nCode\n# Chosing our own arima structure in a for loop. Probably a cleaner way to do this. \n\nkv_mod_list &lt;- list(c(0,0,1), c(1,0,1), c(0,0,2))## List of mods to test. First option is what auto.arima chose\nkv_fits &lt;- kv_fore &lt;- kv_plots &lt;- list()# lists to store things in\nkv_err_list &lt;- list(0) #lists for error structure\n\nnu_mod_list &lt;- list(c(0,1,1), c(0,1,1), c(1,1,1))\nnu_fits &lt;- nu_fore &lt;- nu_plots &lt;- list()\nnu_err_list &lt;- list(0)\n\nwo_mod_list &lt;- list(c(0,1,1), c(0,1,1), c(1,1,1))\nwo_fits &lt;- wo_fore &lt;- wo_plots &lt;- list()\nwo_err_list &lt;- list(0)\n\ndrift &lt;- list(FALSE, TRUE, FALSE)## adding drift\n\nfor(i in 1:3){\n  #Kvichak\n  kv_fits[[i]] &lt;- Arima(train_Kv, order = kv_mod_list[[i]])# loops through list, fits model, and stores in 'fits'\n  kv_fore[[i]] &lt;- forecast(kv_fits[[i]], h=5) # forecasts\n  kv_plots[[i]] &lt;- (autoplot(kv_fore[[i]]) + geom_point(aes(x=x, y=y), data=fortify(test_Kv))+ #forecast plots\n          geom_point(aes(x=ret_yr, y=lntotal), data = kv_fri_fore, col = \"red\"))\n  kv_err_list[[i]] &lt;- accuracy(forecast(kv_fore[[i]], h = 5), test_Kv) # puts accuracy data into list\n  #Nushagak\n  nu_fits[[i]] &lt;- Arima(train_Nu, order = nu_mod_list[[i]], include.drift = drift[[i]])\n  nu_fore[[i]] &lt;- forecast(nu_fits[[i]], h=5)\n  nu_plots[[i]] &lt;- (autoplot(nu_fore[[i]]) + geom_point(aes(x=x, y=y), data=fortify(test_Nu))+ #forecast plots\n          geom_point(aes(x=ret_yr, y=lntotal), data = nu_fri_fore, col = \"red\"))\n  nu_err_list[[i]] &lt;- accuracy(forecast(nu_fore[[i]], h = 5), test_Nu) \n  #Wood\n  wo_fits[[i]] &lt;- Arima(train_Wood, order = wo_mod_list[[i]], include.drift = drift[[i]])\n  wo_fore[[i]] &lt;- forecast(wo_fits[[i]], h=5)\n  wo_plots[[i]] &lt;- (autoplot(wo_fore[[i]]) + geom_point(aes(x=x, y=y), data=fortify(test_Wood))+\n          geom_point(aes(x=ret_yr, y=lntotal), data = wo_fri_fore, col = \"red\"))\n  wo_err_list[[i]] &lt;- accuracy(forecast(wo_fore[[i]], h = 5), test_Wood)  \n}\n\nggarrange(plotlist = kv_plots, ncol = 2, nrow =2)\n\n\n\n\n\nCode\nggarrange(plotlist = nu_plots, ncol = 2, nrow =2)\n\n\n\n\n\nCode\nggarrange(plotlist = wo_plots, ncol = 2, nrow =2)\n\n\n\n\n\nBased on these plots, we might decide to alter our model selection for the Nushagak and the Wood and change our chosen model to ARIMA(0,1,1) with drift.\nThough we could change our model for the Kvichak, the model chosen by auto.arima (ARIMA(0,0,1)) seems to behave (at least visually) essentially the same as the other top models.\nTO better inform this decision, below we check the accuracies for each of the models (n = 9)."
  },
  {
    "objectID": "Lab-1/Final_Write_ups/Lab-1-team-1_final.html#check-accuracy-nick",
    "href": "Lab-1/Final_Write_ups/Lab-1-team-1_final.html#check-accuracy-nick",
    "title": "3  Team 1 - Lab 1",
    "section": "Check accuracy (Nick)",
    "text": "Check accuracy (Nick)\n\n\nCode\n#lists from forecast::accuracy for each river produced above\n\n#kv_err_list\nkv_RMSE &lt;- matrix(data =c(kv_err_list[[1]][4],kv_err_list[[2]][4],kv_err_list[[3]][4]))\nrownames(kv_RMSE) &lt;- c(\"Kvichak (0,0,1)\", \"Kvichak (1,0,1)\", \"Kvichak (0,0,2)\")\nkv_RMSE\n\n\n                     [,1]\nKvichak (0,0,1) 0.2717361\nKvichak (1,0,1) 0.2814976\nKvichak (0,0,2) 0.3125752\n\n\nCode\n#best model is model 1 - (0,0,1) with non zero mean\n\n#nu_err_list\nnu_RMSE &lt;- matrix(data =c(nu_err_list[[1]][4],nu_err_list[[2]][4],nu_err_list[[3]][4]))\nrownames(nu_RMSE) &lt;- c(\"Nushagak (0,1,1)\", \"Nushagak (0,1,1) w/ drift\", \"Nushagak (1,1,1)\")\nnu_RMSE\n\n\n                               [,1]\nNushagak (0,1,1)          1.1181456\nNushagak (0,1,1) w/ drift 0.9992743\nNushagak (1,1,1)          1.1409033\n\n\nCode\n# best model is model 2 - (0,1,1) with drift\n\n#wo_err_list\nwo_RMSE &lt;- matrix(data =c(wo_err_list[[1]][4],wo_err_list[[2]][4],wo_err_list[[3]][4]))\nrownames(wo_RMSE) &lt;- c(\"Wood (0,1,1)\", \"Wood (0,1,1) w/ drift\", \"Wood (1,1,1)\")\nwo_RMSE\n\n\n                           [,1]\nWood (0,1,1)          0.8953588\nWood (0,1,1) w/ drift 0.8143552\nWood (1,1,1)          0.8689846\n\n\nCode\n#best model is model 2 - (0,1,1) with drift\n\n\nThe best models for each river were selected by choosing the model with the lowest RMSE. The best model for the Kvichak was an ARIMA(0,0,1) with non zero mean, the best model for the Nushagak was ARIMA(0,1,1) with drift and the best model for the Wood was ARIMA(0,1,1) with drift."
  },
  {
    "objectID": "Lab-1/Final_Write_ups/Lab-1-team-1_final.html#check-residuals-nick",
    "href": "Lab-1/Final_Write_ups/Lab-1-team-1_final.html#check-residuals-nick",
    "title": "3  Team 1 - Lab 1",
    "section": "Check residuals (Nick)",
    "text": "Check residuals (Nick)\nWe used the model with the lower RMSE moving forward.\n\n\nCode\n#kvichak\n#select model 1\nforecast::checkresiduals(kv_fore[[1]]) # plots the residuals, acf and histogram\n\n\n\n\n\n\n    Ljung-Box test\n\ndata:  Residuals from ARIMA(0,0,1) with non-zero mean\nQ* = 26.979, df = 9, p-value = 0.00141\n\nModel df: 1.   Total lags used: 10\n\n\nCode\nforecast::checkresiduals(kv_fore[[1]], plot = FALSE) #runs the Ljung- Box test\n\n\n\n    Ljung-Box test\n\ndata:  Residuals from ARIMA(0,0,1) with non-zero mean\nQ* = 26.979, df = 9, p-value = 0.00141\n\nModel df: 1.   Total lags used: 10\n\n\nCode\n#The null hypothesis for this test is no autocorrelation. We do not want to reject the null. we fail to reject the null if p&gt;.05\n\n ### Kvichak Results ###\n#p-value for ARIMA(0,0,1) with non zero mean is .00141 so we reject the null and the residuals are autocorrelated\n\n#Nushagak\n#select model 1\nforecast::checkresiduals(nu_fore[[2]]) \n\n\n\n\n\n\n    Ljung-Box test\n\ndata:  Residuals from ARIMA(0,1,1) with drift\nQ* = 18.363, df = 9, p-value = 0.03119\n\nModel df: 1.   Total lags used: 10\n\n\nCode\nforecast::checkresiduals(nu_fore[[2]], plot = FALSE) \n\n\n\n    Ljung-Box test\n\ndata:  Residuals from ARIMA(0,1,1) with drift\nQ* = 18.363, df = 9, p-value = 0.03119\n\nModel df: 1.   Total lags used: 10\n\n\nCode\n### Nushagak Results ###\n#p-value for ARIMA(0,1,1) with drift is .031 so we reject the null and the residuals are autocorrelated\n\n#Wood\n#Select model 2\nforecast::checkresiduals(wo_fore[[2]]) \n\n\n\n\n\n\n    Ljung-Box test\n\ndata:  Residuals from ARIMA(0,1,1) with drift\nQ* = 11.626, df = 9, p-value = 0.2352\n\nModel df: 1.   Total lags used: 10\n\n\nCode\nforecast::checkresiduals(wo_fore[[2]], plot = FALSE) \n\n\n\n    Ljung-Box test\n\ndata:  Residuals from ARIMA(0,1,1) with drift\nQ* = 11.626, df = 9, p-value = 0.2352\n\nModel df: 1.   Total lags used: 10\n\n\nCode\n### Wood Results ###\n#p-value for ARIMA(0,1,1) drift is .23 so we fail to reject the null and the residuals are not autocorrelated\n\n\nThe residuals for the Kvichak River are significantly auto-correlated even though only two lags show significance on the correlogram. The Nushagak also has significantly auto correlated residuals and only the Wood passes the Ljung-Box test for having non auto correlated residuals."
  },
  {
    "objectID": "Lab-1/Final_Write_ups/Lab-1-team-2_final.html",
    "href": "Lab-1/Final_Write_ups/Lab-1-team-2_final.html",
    "title": "4  Team 2 - Lab 1",
    "section": "",
    "text": "Data\nWe will be working with the Bristol Bay data set. Our focus will be on 4-year-old Sockeye in the Wood, Kvichak, and Ugashik regions.\nCode\nlibrary(tidyverse)\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\nlibrary(ggplot2)\nlibrary(forecast)\n\n\nRegistered S3 method overwritten by 'quantmod':\n  method            from\n  as.zoo.data.frame zoo \n\n\nCode\nlibrary(zoo)\n\n\n\nAttaching package: 'zoo'\n\nThe following objects are masked from 'package:base':\n\n    as.Date, as.Date.numeric\n\n\nCode\nbb_data &lt;- readRDS(here::here(\"Lab-1\", \"Data_Images\", \"bristol_bay_data_plus_covariates.rds\"))\nbb_data$log_ret &lt;- log(bb_data$ret)\nbb_data$full_age &lt;- bb_data$fw_age + bb_data$o_age\nrivers &lt;- unique(bb_data$system)\nOur group decided to compare how accurate the forecasts of best fit ARIMA models were for the populations of 4 year old salmon (1.3 and 2.2 age groups) were in the Wood, Kvichak, and Ugashik regions of the Bristol Bay data. Our questions were the following:\nWe will fit ARIMA models to each region and age group and compare the model structures. Then compare the forecast results of each model and comment on the accuracy of each.\nWe examined if fish which spent longer in the ocean were more or less predictable than fish of the same age which spent less time in the ocean. We found in the Wood and Kvichak systems that models trained on data for four year old fish which spent longer in the ocean (3 years vs 2 years) made more accurate forecasts as indicated by smaller RMSE values.\nThe predictions for the Wood and Kvichak systems were straight line predictions as the models that were selected either only had a MA component or, in the case of the Wood 2.2 age group where the observations were considered white noise already, had neither and AR or MA component. In the Ugashik system, the models fitted both had AR components and thus we see the predicted mean line has a bit of structure to it as each prediction relies on the value of the previous prediction.\nWe found that in the Ugashik system, removing the data prior to 1980 to remove increased variance in the data improved predictions from the model. This could be a good step to investigate doing for the other river systems as well which also show some unusual activity prior to 1980.\nDylan wrote the code for the Wood and Kvichak regions, Miranda wrote the code for the Ugashik region, and Eric and Dylan wrote sections of the report with input continued from Miranda."
  },
  {
    "objectID": "Lab-1/Final_Write_ups/Lab-1-team-2_final.html#initial-plan",
    "href": "Lab-1/Final_Write_ups/Lab-1-team-2_final.html#initial-plan",
    "title": "4  Team 2 - Lab 1",
    "section": "Initial plan",
    "text": "Initial plan\nUsing the forecast package, we plan to fit ARIMA models to the 1960-2010 data on 4 yr old fish in the Wood and Ugashik systems. Then forecast to 2020. We will separate the fish by time spent in freshwater and time in the ocean. These age groups are labeled 1.3 (1 year in freshwater, 3 years in the ocean) and 2.2 (2 years in freshwater, 2 years in the ocean). We will measure accuracy by the comparing the RMS error of each model."
  },
  {
    "objectID": "Lab-1/Final_Write_ups/Lab-1-team-2_final.html#what-you-actually-did",
    "href": "Lab-1/Final_Write_ups/Lab-1-team-2_final.html#what-you-actually-did",
    "title": "4  Team 2 - Lab 1",
    "section": "What you actually did",
    "text": "What you actually did\nWe were able to enact our plan with a few modifications. Instead of modeling all the 4 year old salmon together, we separated and compared them by age group from the outset. Additionally, we added the Kvichak region to our analysis. We also examined the accuracy of the forecast if we removed the years prior to 1980 from the training data for the 1.3 age group in the Ugashik river. We did this as there was increased variance in the observed data if we included 1960 - 1980. We thought that removing the variance may improve the accuracy of the forecast, so we fit a second model to the data starting at the year 1980 and compared its forecast to the original model’s."
  },
  {
    "objectID": "Lab-1/Final_Write_ups/Lab-1-team-2_final.html#plot-the-data",
    "href": "Lab-1/Final_Write_ups/Lab-1-team-2_final.html#plot-the-data",
    "title": "4  Team 2 - Lab 1",
    "section": "Plot the data",
    "text": "Plot the data\n\nUgashik Region\n\n\nCode\nage1.3 = 1.3\nage2.2 = 2.2\n\n#Create a dataframe for the 1.3 age group\nUgashik_1.3 &lt;- bb_data %&gt;%\n  filter(system==rivers[7]) %&gt;%\n  filter(age_group == age1.3) %&gt;%\n  mutate(year = ret_yr) %&gt;%\n  select(year, log_ret) \n\n#Create a dataframe for the 2.2 age group\nUgashik_2.2 &lt;- bb_data %&gt;%\n  filter(system==rivers[7]) %&gt;%\n  filter(age_group == age2.2) %&gt;%\n  mutate(year = ret_yr) %&gt;%\n  select(year, log_ret)\n\n#Create the time series\nUgashik_1.3.ts &lt;- ts(Ugashik_1.3$log_ret, start=Ugashik_1.3$year[1]) # time series 1.3 fish \nUgashik_1.3.ts_out &lt;- window(Ugashik_1.3.ts, start=1980, end = 2020) # time series 1.3 fish starting from 1980 \nUgashik_2.2.ts &lt;- ts(Ugashik_2.2$log_ret, start=Ugashik_2.2$year[1]) # time series 2.2 fish\n\n\nplot.ts(Ugashik_1.3.ts, ylab = \"Log abundance\", main = \"Ugashik Sockeye: 1 yr freshwater, 3 yrs ocean\") \n\n\n\n\n\nCode\nplot.ts(Ugashik_1.3.ts_out, ylab = \"Log abundance\", main = \"Ugashik Sockeye: 1 yr freshwater, 3 yrs ocean\\n1980 - 2020\") \n\n\n\n\n\nCode\nplot.ts(Ugashik_2.2.ts, ylab = \"Log abundance\", main = \"Ugashik Sockeye: 2 yrs freshwater, 2 yrs ocean\") \n\n\n\n\n\n\n\nWood Region\n\n\nCode\nwood_dt &lt;- bb_data[(bb_data$system == rivers[2]) & (bb_data$full_age == 4),]\n#unique(wood_dt$o_age)\n#split the dataframe by years in the ocean\nWood_1.3 &lt;- wood_dt[wood_dt$o_age==3,]\nWood_2.2 &lt;- wood_dt[wood_dt$o_age==2,]\n\n#make them time series\nWood_1.3.ts &lt;- ts(Wood_1.3$log_ret, start = 1963, frequency = 1)\nWood_2.2.ts &lt;- ts(Wood_2.2$log_ret, start = 1963, frequency = 1)\n\n#check the plot\n\nplot.ts(Wood_1.3.ts, ylab = \"log Abundance\", main =\"Wood Sockeye: 1 yr freshwater, 3 yrs ocean\" )\n\n\n\n\n\nCode\n#looks like there is a positive trend to the data: not stationary, or could be stationary around a trend\nplot.ts(Wood_2.2.ts, ylab = \"log Abundance\", main =\"Wood Sockeye: 2 yrs freshwater, 2 yrs ocean\" )\n\n\n\n\n\n\n\nKvichak Region\n\n\nCode\nKvichak_dt &lt;- bb_data[(bb_data$system == rivers[4]) & (bb_data$full_age == 4),]\n#unique(Kvichak_dt$o_age)\nKvichak_1.3 &lt;- Kvichak_dt[Kvichak_dt$o_age == 3,]\nKvichak_2.2 &lt;- Kvichak_dt[Kvichak_dt$o_age == 2,]\n\n#make the ts\nKvichak_1.3.ts &lt;- ts(Kvichak_1.3$log_ret, start = 1963, end = 2020)\nKvichak_2.2.ts &lt;- ts(Kvichak_2.2$log_ret, start = 1963, end = 2020)\n\n#plots\n\nplot(Kvichak_1.3.ts, ylab = \"log Abundance\", main = \"Kvichak Sockeye: 1 yr freshwater, 3 yrs ocean\" )\n\n\n\n\n\nCode\nplot(Kvichak_2.2.ts, ylab = \"log Abundance\", main = \"Kvichak Sockeye: 2 yrsfreshwater, 2 yrs ocean\" )\n\n\n\n\n\nUvashik: Upon observing the 1.3 time series, there is a clear outlier value at 1977. To remove the negative value, we re-plotted the data starting at 1980 instead of 1967. The new time series seems to show variance around a mean of 7. The 2.2 group appears to show variance around a mean of 5. Differencing the data will likely show stationarity\nWood: The 1.3 age group appears to have a positive trend, so it is likely not stationary. It could be stationary around a trend. The 2.2 age group does not seem to have any trends, and could be stationary around a mean of 4.\nKvichak: There is another negative outlier in the 1.3 age group, otherwise the data appears to be stationary around a mean of 7. We will have to see how much influence the outlier has on the ARIMA model. The 2.2 age group does not show any obvious trends and seems to be stationary around a mean of 7."
  },
  {
    "objectID": "Lab-1/Final_Write_ups/Lab-1-team-2_final.html#testing-for-stationarity",
    "href": "Lab-1/Final_Write_ups/Lab-1-team-2_final.html#testing-for-stationarity",
    "title": "4  Team 2 - Lab 1",
    "section": "Testing for Stationarity",
    "text": "Testing for Stationarity\n\nUgashik\n\n\nCode\n#Miranda's Code\ntseries::adf.test(Ugashik_1.3.ts) \n\n\n\n    Augmented Dickey-Fuller Test\n\ndata:  Ugashik_1.3.ts\nDickey-Fuller = -3.1174, Lag order = 3, p-value = 0.1236\nalternative hypothesis: stationary\n\n\nCode\ntseries::kpss.test(Ugashik_1.3.ts, null = \"Level\") \n\n\n\n    KPSS Test for Level Stationarity\n\ndata:  Ugashik_1.3.ts\nKPSS Level = 0.54744, Truncation lag parameter = 3, p-value = 0.03098\n\n\nCode\ntseries::kpss.test(Ugashik_1.3.ts, null = \"Trend\") \n\n\nWarning in tseries::kpss.test(Ugashik_1.3.ts, null = \"Trend\"): p-value greater\nthan printed p-value\n\n\n\n    KPSS Test for Trend Stationarity\n\ndata:  Ugashik_1.3.ts\nKPSS Trend = 0.075997, Truncation lag parameter = 3, p-value = 0.1\n\n\nCode\ndatts_diff_1.3 &lt;- diff(Ugashik_1.3.ts, differences = 1)\ntseries::adf.test(Ugashik_1.3.ts_out) \n\n\n\n    Augmented Dickey-Fuller Test\n\ndata:  Ugashik_1.3.ts_out\nDickey-Fuller = -3.4337, Lag order = 3, p-value = 0.06582\nalternative hypothesis: stationary\n\n\nCode\ntseries::kpss.test(Ugashik_1.3.ts_out, null = \"Level\") \n\n\nWarning in tseries::kpss.test(Ugashik_1.3.ts_out, null = \"Level\"): p-value\ngreater than printed p-value\n\n\n\n    KPSS Test for Level Stationarity\n\ndata:  Ugashik_1.3.ts_out\nKPSS Level = 0.26391, Truncation lag parameter = 3, p-value = 0.1\n\n\nCode\ntseries::kpss.test(Ugashik_1.3.ts_out, null = \"Trend\") \n\n\nWarning in tseries::kpss.test(Ugashik_1.3.ts_out, null = \"Trend\"): p-value\ngreater than printed p-value\n\n\n\n    KPSS Test for Trend Stationarity\n\ndata:  Ugashik_1.3.ts_out\nKPSS Trend = 0.065518, Truncation lag parameter = 3, p-value = 0.1\n\n\nCode\ndatts_diff_1.3_out &lt;- diff(Ugashik_1.3.ts_out, differences = 1)\nplot(datts_diff_1.3, ylab = \"Log abundance\", main = \"Time series, first differenced:\\n 1 year freshwater, 3 years ocean\")\n\n\n\n\n\nCode\nplot(datts_diff_1.3_out, ylab = \"Log abundance\", main = \"Time series, first differenced:\\n 1 year freshwater, 3 years ocean, outlier removed\")\n\n\n\n\n\n\n\nCode\ntseries::adf.test(Ugashik_2.2.ts) \n\n\n\n    Augmented Dickey-Fuller Test\n\ndata:  Ugashik_2.2.ts\nDickey-Fuller = -2.0383, Lag order = 3, p-value = 0.5592\nalternative hypothesis: stationary\n\n\nCode\ntseries::kpss.test(Ugashik_2.2.ts, null = \"Level\") \n\n\nWarning in tseries::kpss.test(Ugashik_2.2.ts, null = \"Level\"): p-value greater\nthan printed p-value\n\n\n\n    KPSS Test for Level Stationarity\n\ndata:  Ugashik_2.2.ts\nKPSS Level = 0.21297, Truncation lag parameter = 3, p-value = 0.1\n\n\nCode\ntseries::kpss.test(Ugashik_2.2.ts, null = \"Trend\")\n\n\n\n    KPSS Test for Trend Stationarity\n\ndata:  Ugashik_2.2.ts\nKPSS Trend = 0.184, Truncation lag parameter = 3, p-value = 0.022\n\n\nCode\ndatts_diff_2.2 &lt;- diff(Ugashik_2.2.ts, differences = 1)\nplot(datts_diff_2.2, ylab = \"Log abundance\", main = \"Time series, first differenced:\\n 2 years freshwater, 2 years ocean\")\n\n\n\n\n\nStationairity test for the full Ugashik 1.3 group were in disagreement indicating that a single difference should be taken to get them to agree on stationairity. The same is true for the 2.2 group, we again see disagreement in the tests. The truncated dataset of the 1.3 group shows full agreement on non-stationairity. Thus a first difference needs to be taken on all of them.\n\n\nWood\n\n\nCode\n#Dylan's Code\n#Wood_1.3.ts testing\n#run tests for stationarity\ntseries::adf.test(Wood_1.3.ts)                  # fails to reject: Non-stationary\n\n\n\n    Augmented Dickey-Fuller Test\n\ndata:  Wood_1.3.ts\nDickey-Fuller = -3.1466, Lag order = 3, p-value = 0.1118\nalternative hypothesis: stationary\n\n\nCode\ntseries::adf.test(Wood_1.3.ts,k = 0)            #forced it to test AR(1) it does reject: Stationary. So conflicts with the test above\n\n\nWarning in tseries::adf.test(Wood_1.3.ts, k = 0): p-value smaller than printed\np-value\n\n\n\n    Augmented Dickey-Fuller Test\n\ndata:  Wood_1.3.ts\nDickey-Fuller = -6.5462, Lag order = 0, p-value = 0.01\nalternative hypothesis: stationary\n\n\nCode\ntseries::kpss.test(Wood_1.3.ts, null = \"Level\") #not sure this test makes sense, visually there is a trend in the data. opposite null hypothesis for kpss it rejects: Non-stationary\n\n\nWarning in tseries::kpss.test(Wood_1.3.ts, null = \"Level\"): p-value smaller\nthan printed p-value\n\n\n\n    KPSS Test for Level Stationarity\n\ndata:  Wood_1.3.ts\nKPSS Level = 1.1774, Truncation lag parameter = 3, p-value = 0.01\n\n\nCode\ntseries::kpss.test(Wood_1.3.ts, null = \"Trend\") #this tested to see if data is stationary around a trend\n\n\n\n    KPSS Test for Trend Stationarity\n\ndata:  Wood_1.3.ts\nKPSS Trend = 0.14659, Truncation lag parameter = 3, p-value = 0.04951\n\n\nCode\nforecast::ndiffs(Wood_1.3.ts, test = \"kpss\")    # 1 difference needed\n\n\n[1] 1\n\n\nCode\nforecast::ndiffs(Wood_1.3.ts, test = \"adf\")     # 0 differences needed, again disagreement. Likely will need a difference but we can compare to the ARIMA model that gets automatically fit\n\n\n[1] 0\n\n\n\n\nCode\n#Wood_2.2.ts testing\ntseries::adf.test(Wood_2.2.ts)                  # Rejects: stationary\n\n\n\n    Augmented Dickey-Fuller Test\n\ndata:  Wood_2.2.ts\nDickey-Fuller = -3.7358, Lag order = 3, p-value = 0.02957\nalternative hypothesis: stationary\n\n\nCode\ntseries::adf.test(Wood_2.2.ts,k = 0)            #forced it to test AR(1) it does reject: Stationary\n\n\nWarning in tseries::adf.test(Wood_2.2.ts, k = 0): p-value smaller than printed\np-value\n\n\n\n    Augmented Dickey-Fuller Test\n\ndata:  Wood_2.2.ts\nDickey-Fuller = -7.91, Lag order = 0, p-value = 0.01\nalternative hypothesis: stationary\n\n\nCode\ntseries::kpss.test(Wood_2.2.ts, null = \"Level\") #opposite null hypothesis for kpss it fails to reject: Stationary\n\n\nWarning in tseries::kpss.test(Wood_2.2.ts, null = \"Level\"): p-value greater\nthan printed p-value\n\n\n\n    KPSS Test for Level Stationarity\n\ndata:  Wood_2.2.ts\nKPSS Level = 0.076509, Truncation lag parameter = 3, p-value = 0.1\n\n\nCode\ntseries::kpss.test(Wood_2.2.ts, null = \"Trend\") \n\n\nWarning in tseries::kpss.test(Wood_2.2.ts, null = \"Trend\"): p-value greater\nthan printed p-value\n\n\n\n    KPSS Test for Trend Stationarity\n\ndata:  Wood_2.2.ts\nKPSS Trend = 0.058765, Truncation lag parameter = 3, p-value = 0.1\n\n\nCode\nforecast::ndiffs(Wood_2.2.ts, test = \"kpss\")    # 0 needed\n\n\n[1] 0\n\n\nCode\nforecast::ndiffs(Wood_2.2.ts, test = \"adf\")     # 0 needed. Agrees with the unit root tests above that found stationairity of the data\n\n\n[1] 0\n\n\nThe Wood River 1.3 showed disagreement in the outcome of the stationairity tests this indicates that a difference is required to reach stationairity. The ndiff() function disagrees based on test used but the kpss test indicates a single differencing is required. In contrast the Wood River 2.2 group has full agreement from all tests for stationairity. The ndiff() function also indicates that no differencing is required for this dataset.\n\n\nKvichak\n\n\nCode\n#test stationairity Kvichak_1.3\ntseries::adf.test(Kvichak_1.3.ts)                  #  Rejects just barely: stationary\n\n\n\n    Augmented Dickey-Fuller Test\n\ndata:  Kvichak_1.3.ts\nDickey-Fuller = -3.5126, Lag order = 3, p-value = 0.04835\nalternative hypothesis: stationary\n\n\nCode\ntseries::adf.test(Kvichak_1.3.ts,k = 0)            #forced it to test AR(1) it does reject: Stationary.\n\n\nWarning in tseries::adf.test(Kvichak_1.3.ts, k = 0): p-value smaller than\nprinted p-value\n\n\n\n    Augmented Dickey-Fuller Test\n\ndata:  Kvichak_1.3.ts\nDickey-Fuller = -7.0898, Lag order = 0, p-value = 0.01\nalternative hypothesis: stationary\n\n\nCode\ntseries::kpss.test(Kvichak_1.3.ts, null = \"Level\") #opposite null hypothesis for kpss it  rejects: non-Stationary\n\n\nWarning in tseries::kpss.test(Kvichak_1.3.ts, null = \"Level\"): p-value smaller\nthan printed p-value\n\n\n\n    KPSS Test for Level Stationarity\n\ndata:  Kvichak_1.3.ts\nKPSS Level = 0.87527, Truncation lag parameter = 3, p-value = 0.01\n\n\nCode\ntseries::kpss.test(Kvichak_1.3.ts, null = \"Trend\") #.it rejects:non- stationary\n\n\n\n    KPSS Test for Trend Stationarity\n\ndata:  Kvichak_1.3.ts\nKPSS Trend = 0.16823, Truncation lag parameter = 3, p-value = 0.03147\n\n\nCode\nforecast::ndiffs(Kvichak_1.3.ts, test = \"kpss\")    # 1 needed\n\n\n[1] 1\n\n\nCode\nforecast::ndiffs(Kvichak_1.3.ts, test = \"adf\")     #0 needed. again disagreement. likely will be differenced by auto.arima()\n\n\n[1] 0\n\n\nCode\n#there is disagreement from adf and kpss, may require differencing\n\n\n\n\nCode\n#test stationairity Kvichak_2.2\ntseries::adf.test(Kvichak_2.2.ts) # fails to Reject: non-stationary\n\n\n\n    Augmented Dickey-Fuller Test\n\ndata:  Kvichak_2.2.ts\nDickey-Fuller = -3.0401, Lag order = 3, p-value = 0.1548\nalternative hypothesis: stationary\n\n\nCode\ntseries::adf.test(Kvichak_2.2.ts,k = 0)            #forced it to test AR(1) it does reject: Stationary. disagreement between them\n\n\nWarning in tseries::adf.test(Kvichak_2.2.ts, k = 0): p-value smaller than\nprinted p-value\n\n\n\n    Augmented Dickey-Fuller Test\n\ndata:  Kvichak_2.2.ts\nDickey-Fuller = -5.4257, Lag order = 0, p-value = 0.01\nalternative hypothesis: stationary\n\n\nCode\ntseries::kpss.test(Kvichak_2.2.ts, null = \"Level\") #opposite null hypothesis for kpss it fails to reject: Stationary\n\n\nWarning in tseries::kpss.test(Kvichak_2.2.ts, null = \"Level\"): p-value greater\nthan printed p-value\n\n\n\n    KPSS Test for Level Stationarity\n\ndata:  Kvichak_2.2.ts\nKPSS Level = 0.33673, Truncation lag parameter = 3, p-value = 0.1\n\n\nCode\ntseries::kpss.test(Kvichak_2.2.ts, null = \"Trend\")\n\n\nWarning in tseries::kpss.test(Kvichak_2.2.ts, null = \"Trend\"): p-value greater\nthan printed p-value\n\n\n\n    KPSS Test for Trend Stationarity\n\ndata:  Kvichak_2.2.ts\nKPSS Trend = 0.08168, Truncation lag parameter = 3, p-value = 0.1\n\n\nCode\n#there is disagreement from adf and kpss, may require differencing\n\nforecast::ndiffs(Kvichak_2.2.ts, test = \"kpss\")    # 0 needed\n\n\n[1] 0\n\n\nCode\nforecast::ndiffs(Kvichak_2.2.ts, test = \"adf\")     # 0 needed. So I am expecting this to be an AR(1) as the full adf test was the only one to say non-stationary\n\n\n[1] 0\n\n\nThe Kvichak 1.3 group showed disagreement between stationairity tests indicating that a differencing is needed. The ndiff() function also disagrees but that is a reflection of the difference between the results of the adf and kpss stationairity tests. A single difference is needed to get the tests into agreement. The Kvichak 2.2 group shows an interesting disagreement between the two adf tests and ndiff() is in agreement that no differencing is needed to reach stationairity which is interesting because the adf and kpss tests were in disagreement as well. We will examine the ACF and PACF plots of both a differenced and non-differenced Kvichak 2.2 group."
  },
  {
    "objectID": "Lab-1/Final_Write_ups/Lab-1-team-2_final.html#acf-and-pacf",
    "href": "Lab-1/Final_Write_ups/Lab-1-team-2_final.html#acf-and-pacf",
    "title": "4  Team 2 - Lab 1",
    "section": "ACF and PACF",
    "text": "ACF and PACF\n\nUgashik\n\n\nCode\nlayout_matrix_1 &lt;- matrix(c(1,2),ncol=2)  #setting up how the plots will display\nlayout(layout_matrix_1)                   \nacf(diff(Ugashik_1.3.ts))\npacf(diff(Ugashik_1.3.ts))\n\n\n\n\n\n\n\nCode\nlayout(layout_matrix_1)                   #setting up how the plots will display\nacf(diff(Ugashik_1.3.ts_out), na.action = na.pass) # allows na value\npacf(diff(Ugashik_1.3.ts_out),na.action = na.pass)\n\n\n\n\n\n\n\nCode\nlayout(layout_matrix_1)                   #setting up how the plots will display\nacf(diff(Ugashik_2.2.ts))\npacf(diff(Ugashik_2.2.ts))\n\n\n\n\n\nUgashik:\nThe PACF plot of the full differenced 1.3 age group tails off slowly, which indicates an MA() model. The ACF cuts off at 1, which further reinforces idea that this is an MA(1) model.\nThe truncated 1.3 group shows significance at a lag of 2 for both the ACF and a slow decay for the PACF. This again indicates that it will be an MA() model of MA(2)\nThe 2.2 age group has an ACF that looks like it may not have any significant lags besides the one at 5 which we are taking to indicate a cyclic nature to the data which again we will ignore in this experiment. The PACF looks to be a slow decline again. The model selection is a little more unclear in these plots.\n\n\nWood\n\n\nCode\n#acf and pacf for differenced Wood_1.3\nlayout(layout_matrix_1)                   #setting up how the plots will display\nacf(diff(Wood_1.3.ts))\npacf(diff(Wood_1.3.ts))\n\n\n\n\n\nCode\n#pacf looks like a slow decay indicating it will be and MA model. signif lags at 1, 5, 10 on ACF\n\n\n\n\nCode\n#acf and pacf for Wood_2.2\n#carries the plot display set up from the above over to these plots\nlayout(layout_matrix_1)                   #setting up how the plots will display\nacf(Wood_2.2.ts)\npacf(Wood_2.2.ts)\n\n\n\n\n\nCode\n#no significant lags in either plot. This is white noise, no autocorrelation. expecting ARIMA(0,0,0)\n\n\nWood:\nACF for the 1.3 data seems to cut off at 2. It also shows significance at lags of 5 and 10 which may indicate seasonality. The PACF appears to slowly taper off. This is likely an MA() model\nThe 2.2 age group does not show significance in either plot, so this is most likely white noise already.\n\n\nKvichak\n\n\nCode\nlayout(layout_matrix_1)                   #setting up how the plots will display\nacf(Kvichak_1.3.ts)\npacf(Kvichak_1.3.ts)\n\n\n\n\n\nCode\n#both have a significant lag at 1. maybe just a differencing will help\n\n\n\n\nCode\nlayout(layout_matrix_1)                   #setting up how the plots will display\nacf(diff(Kvichak_1.3.ts))\npacf(diff(Kvichak_1.3.ts))\n\n\n\n\n\nCode\n#looks like slow decay on pacf and a significant lag at 1 on acf. expecting an ARIMA(0,1,1)\n\n\n\n\nCode\n#plot acf and pacf\nlayout(layout_matrix_1)\nacf(Kvichak_2.2.ts)\npacf(Kvichak_2.2.ts)\n\n\n\n\n\nCode\n#neither shows any clear lag or decay signs. maybe an combined ARMA model\n\n\nKvichak:\nThe ACF and PACF for the 1.3 group both showed a barely significant lag at 1. The stationairity tests for this dataset were in disagreement so we will look to see what differencing does. After differencing the ACF cuts off at 1 and the PACF seems to slowly taper. This data may be an ARIMA(0,1,1).\nThe 2.2 group does not show any patterns that line up with an AR or MA model. It may be an ARMA model of some sort."
  },
  {
    "objectID": "Lab-1/Final_Write_ups/Lab-1-team-2_final.html#checking-residuals",
    "href": "Lab-1/Final_Write_ups/Lab-1-team-2_final.html#checking-residuals",
    "title": "4  Team 2 - Lab 1",
    "section": "Checking Residuals",
    "text": "Checking Residuals\n\nUgashik\n\n\nCode\nfit.ugashik_1.3 &lt;- forecast::auto.arima(diff(Ugashik_1.3.ts))\nfit.ugashik_1.3_out &lt;- forecast::auto.arima(diff(Ugashik_1.3.ts_out))\nfit.ugashik_2.2 &lt;- forecast::auto.arima(diff(Ugashik_2.2.ts))\nforecast::checkresiduals(fit.ugashik_1.3)   \n\n\n\n\n\n\n    Ljung-Box test\n\ndata:  Residuals from ARIMA(0,0,1) with zero mean\nQ* = 4.5946, df = 9, p-value = 0.8681\n\nModel df: 1.   Total lags used: 10\n\n\nCode\nforecast::checkresiduals(fit.ugashik_1.3_out)\n\n\n\n\n\n\n    Ljung-Box test\n\ndata:  Residuals from ARIMA(0,0,0) with zero mean\nQ* = 24.804, df = 8, p-value = 0.001678\n\nModel df: 0.   Total lags used: 8\n\n\nCode\nforecast::checkresiduals(fit.ugashik_2.2)\n\n\n\n\n\n\n    Ljung-Box test\n\ndata:  Residuals from ARIMA(0,0,2) with zero mean\nQ* = 12.936, df = 8, p-value = 0.1141\n\nModel df: 2.   Total lags used: 10\n\n\nThe Box tests for the residuals from the fitted models of Ugashik only reject the null hypothesis of non-autocorrelation for the truncated data. This may be a result of the cyclic nature of the salmon data. Tests for the full 1.3 and 2.2 datasets are good as they do not indicate autocorrelation in the residuals.\n\n\nWood\n\n\nCode\nfit.wood_1.3 &lt;- forecast::auto.arima(Wood_1.3.ts)\nfit.wood_2.2 &lt;- forecast::auto.arima(Wood_2.2.ts)\nforecast::checkresiduals(fit.wood_1.3)\n\n\n\n\n\n\n    Ljung-Box test\n\ndata:  Residuals from ARIMA(0,1,1) with drift\nQ* = 14.665, df = 9, p-value = 0.1006\n\nModel df: 1.   Total lags used: 10\n\n\nCode\nforecast::checkresiduals(fit.wood_2.2)\n\n\n\n\n\n\n    Ljung-Box test\n\ndata:  Residuals from ARIMA(0,0,0) with non-zero mean\nQ* = 9.6642, df = 10, p-value = 0.4704\n\nModel df: 0.   Total lags used: 10\n\n\nBoth fitted models for the Wood River datasets pass the residuals check. Both fail to reject the null hypothesis of non-auto correlated residuals. Indicating the residuals are white noise.\n\n\nKvichak\n\n\nCode\nfit.kvi.3 &lt;- forecast::auto.arima(Kvichak_1.3.ts)\nfit.kvi.2 &lt;- forecast::auto.arima(Kvichak_2.2.ts)\nforecast::checkresiduals(fit.kvi.3)\n\n\n\n\n\n\n    Ljung-Box test\n\ndata:  Residuals from ARIMA(0,1,1) with drift\nQ* = 2.4224, df = 9, p-value = 0.9829\n\nModel df: 1.   Total lags used: 10\n\n\nCode\nforecast::checkresiduals(fit.kvi.2)\n\n\n\n\n\n\n    Ljung-Box test\n\ndata:  Residuals from ARIMA(0,0,1) with non-zero mean\nQ* = 32.184, df = 9, p-value = 0.0001851\n\nModel df: 1.   Total lags used: 10\n\n\nThe fitted model for the 1.3 dataset does fail to reject the null hypothesis of non-autocorrelation indicating the residuals are white noise. In contrast, the fitted model for the 2.2 dataset does reject the null hypothesis of non-autocorrelation. This is likely another reflection of the cyclic nature of the data."
  },
  {
    "objectID": "Lab-1/Final_Write_ups/Lab-1-team-2_final.html#fit-models-to-the-training-data",
    "href": "Lab-1/Final_Write_ups/Lab-1-team-2_final.html#fit-models-to-the-training-data",
    "title": "4  Team 2 - Lab 1",
    "section": "Fit Models to the training data",
    "text": "Fit Models to the training data\n\nUgashik\n\n\nCode\n# Make dataframes for testing models later\ntrain_Ugashik_1.3 &lt;- window(Ugashik_1.3.ts, 1963, 2010) # range 1963 - 2010\ntest_Ugashik_1.3 &lt;- window(Ugashik_1.3.ts, 2011, 2020) # range 2011 - 2020\n\ntrain_Ugashik_1.3_out &lt;- window(Ugashik_1.3.ts_out, 1980, 2010) # range 1963 - 2010\ntest_Ugashik_1.3_out &lt;- window(Ugashik_1.3.ts_out, 2011, 2020) # range 2011 - 2020\n\ntrain_Ugashik_2.2 &lt;- window(Ugashik_2.2.ts, 1963, 2010) # range 1963 - 2010\ntest_Ugashik_2.2 &lt;- window(Ugashik_2.2.ts, 2011, 2020) # range 2011 - 2020\n\nmodel_Ugashik_1.3 &lt;- auto.arima(train_Ugashik_1.3)\nmodel_Ugashik_1.3\n\n\nSeries: train_Ugashik_1.3 \nARIMA(0,1,1) \n\nCoefficients:\n          ma1\n      -0.7305\ns.e.   0.1400\n\nsigma^2 = 18.34:  log likelihood = -134.93\nAIC=273.86   AICc=274.13   BIC=277.56\n\n\nCode\nmodel_Ugashik_1.3_out &lt;- auto.arima(train_Ugashik_1.3_out)\nmodel_Ugashik_1.3_out\n\n\nSeries: train_Ugashik_1.3_out \nARIMA(2,0,0) with non-zero mean \n\nCoefficients:\n         ar1      ar2    mean\n      0.3818  -0.5662  6.9256\ns.e.  0.1506   0.1451  0.0890\n\nsigma^2 = 0.365:  log likelihood = -27.2\nAIC=62.41   AICc=63.94   BIC=68.14\n\n\nCode\nmodel_Ugashik_2.2 &lt;- auto.arima(train_Ugashik_2.2)\nmodel_Ugashik_2.2\n\n\nSeries: train_Ugashik_2.2 \nARIMA(1,0,0) with non-zero mean \n\nCoefficients:\n         ar1    mean\n      0.4545  5.9958\ns.e.  0.1268  0.3373\n\nsigma^2 = 1.753:  log likelihood = -80.67\nAIC=167.34   AICc=167.88   BIC=172.95\n\n\n\n\nWood\n\n\nCode\n#Dylan's Code, need to speak on auto.arima model results\n#creating the training and testing periods for models\ntrain.Wood_1.3 &lt;- window(Wood_1.3.ts, start = 1963, end = 2010)\ntest.Wood_1.3 &lt;- window(Wood_1.3.ts, start = 2011, end = 2020)\nfit.Wood_1.3 &lt;- auto.arima(train.Wood_1.3)\nfit.Wood_1.3\n\n\nSeries: train.Wood_1.3 \nARIMA(0,1,1) \n\nCoefficients:\n          ma1\n      -0.7441\ns.e.   0.0919\n\nsigma^2 = 0.3482:  log likelihood = -41.8\nAIC=87.59   AICc=87.87   BIC=91.29\n\n\nCode\ntrain.Wood_2.2 &lt;- window(Wood_2.2.ts, start = 1963, end = 2010)\ntest.Wood_2.2 &lt;- window(Wood_2.2.ts, start = 2011, end = 2020)\nfit.Wood_2.2 &lt;- auto.arima(train.Wood_2.2)\nfit.Wood_2.2\n\n\nSeries: train.Wood_2.2 \nARIMA(0,0,0) with non-zero mean \n\nCoefficients:\n        mean\n      4.6370\ns.e.  0.1742\n\nsigma^2 = 1.488:  log likelihood = -77.14\nAIC=158.29   AICc=158.56   BIC=162.03\n\n\n\n\nKvichak\n\n\nCode\n#train and test predictions\ntrain.Kvichak_1.3 &lt;- window(Kvichak_1.3.ts, start= 1963, end=2010)\ntest.Kvichak_1.3 &lt;- window(Kvichak_1.3.ts, start= 2011, end= 2020) \nfit.Kvichak_1.3 &lt;- forecast::auto.arima(train.Kvichak_1.3)\nfit.Kvichak_1.3\n\n\nSeries: train.Kvichak_1.3 \nARIMA(0,1,1) with drift \n\nCoefficients:\n          ma1   drift\n      -0.8462  0.1083\ns.e.   0.1057  0.0662\n\nsigma^2 = 6.13:  log likelihood = -108.91\nAIC=223.82   AICc=224.38   BIC=229.37\n\n\nCode\ntrain.Kvichak_2.2 &lt;- window(Kvichak_2.2.ts, start= 1963, end=2010)\ntest.Kvichak_2.2 &lt;- window(Kvichak_2.2.ts, start= 2011, end= 2020)\nfit.Kvichak_2.2 &lt;- forecast::auto.arima(train.Kvichak_2.2)\nfit.Kvichak_2.2\n\n\nSeries: train.Kvichak_2.2 \nARIMA(0,0,1) with non-zero mean \n\nCoefficients:\n         ma1    mean\n      0.3950  7.4654\ns.e.  0.1391  0.3395\n\nsigma^2 = 3.002:  log likelihood = -93.56\nAIC=193.11   AICc=193.66   BIC=198.73"
  },
  {
    "objectID": "Lab-1/Final_Write_ups/Lab-1-team-2_final.html#plotting-best-fit-results-and-determining-model-accuracy",
    "href": "Lab-1/Final_Write_ups/Lab-1-team-2_final.html#plotting-best-fit-results-and-determining-model-accuracy",
    "title": "4  Team 2 - Lab 1",
    "section": "Plotting Best Fit Results and Determining Model Accuracy",
    "text": "Plotting Best Fit Results and Determining Model Accuracy\n\nUgashik 1.3, Starting from 1980\n\n\nCode\n#Miranda's Code\nfc_1.3 &lt;- forecast(model_Ugashik_1.3_out, h=10)\n\nplot.ts(Ugashik_1.3.ts) # check fit of model train on data from 1980 on\nlines(fitted(model_Ugashik_1.3_out), col=\"blue\") #model seems to fit well\n\n\n\n\n\nCode\nplot(fc_1.3,ylab = \"log Abundance\", xlab = \"Time\")\npoints(test_Ugashik_1.3_out, pch=19, col=\"red\")\nlines(fitted(model_Ugashik_1.3_out), col=\"blue\")\n\n\n\n\n\nCode\nforecast::checkresiduals(model_Ugashik_1.3_out) # looks better than 1.3 trained on 1960-2010\n\n\n\n\n\n\n    Ljung-Box test\n\ndata:  Residuals from ARIMA(2,0,0) with non-zero mean\nQ* = 3.6115, df = 4, p-value = 0.4611\n\nModel df: 2.   Total lags used: 6\n\n\nCode\naccuracy(forecast(model_Ugashik_1.3_out, h=10), test_Ugashik_1.3_out) #test accuracy \n\n\n                      ME      RMSE       MAE        MPE     MAPE      MASE\nTraining set 0.003492142 0.5741439 0.4709198 -0.6636186 6.883224 0.6078635\nTest set     0.212738213 0.6585916 0.5680040  2.2757596 8.236443 0.7331798\n                    ACF1 Theil's U\nTraining set -0.03470095        NA\nTest set      0.09450154  0.877926\n\n\nThe model itself seems to fit the data well based on the visual fit and the residuals.\nThe model forecast centers around the mean of the train data, predicting that 2010 will drop which fits the first few actual data points well, but doesn’t do as good of a job of predicting that the data from 2015-2020 look closer to the more recent years than further out (prior to 2005). Data are included in the confidence interval though which is great.\n\n\nUgashik 2.2\n\n\nCode\nfc_2.2 &lt;- forecast(model_Ugashik_2.2, h=10)\n\nplot(fc_2.2,ylab = \"log Abundance\", xlab = \"Time\")\npoints(test_Ugashik_2.2, pch=19, col=\"red\")\nlines(fitted(model_Ugashik_2.2), col=\"blue\")\n\n\n\n\n\nCode\nforecast::checkresiduals(model_Ugashik_2.2) \n\n\n\n\n\n\n    Ljung-Box test\n\ndata:  Residuals from ARIMA(1,0,0) with non-zero mean\nQ* = 13.211, df = 9, p-value = 0.1533\n\nModel df: 1.   Total lags used: 10\n\n\nCode\naccuracy(forecast(model_Ugashik_2.2, h=10), test_Ugashik_2.2) #test accuracy\n\n\n                       ME     RMSE       MAE       MPE     MAPE      MASE\nTraining set -0.001068187 1.295973 1.0706311 -6.326379 21.04040 0.8937811\nTest set     -0.314622455 1.051713 0.7971697 -9.454614 16.49798 0.6654909\n                    ACF1 Theil's U\nTraining set -0.01828833        NA\nTest set      0.31998321 0.9446332\n\n\nThe model fits the timeseries train data pretty well, matching the overall change in curve. The residuals show the ACF plot has 1 significant lag reflecting the ARIMA (1,0,0) model, the histogram is fairly centered as expected, and model fails to reject Ljung-Box test.\nModel forecast doesn’t look great. The forecast flatlines while the real data from 2011-2020 have much higher variance. This reflects the high AICc from the model. But the data are contained within the predicted confidence interval which is good. ### Wood 2.2\n\n\nCode\npred.Wood_2.2 &lt;- forecast(fit.Wood_2.2, h = 10)\nplot(pred.Wood_2.2,ylab = \"log Abundance\", xlab = \"Time\")\npoints(test.Wood_2.2, pch=19, col=\"red\")\nlines(fitted(fit.Wood_2.2), col=\"blue\")\n\n\n\n\n\nCode\n#the actual observations do fall within the 80% prediction interval\n#This data is treated as white noise with the ARIMA(0,0,0) model so \n#I imagine the prediction intervals are tied very closely to the variance \n#of the residuals themselves.\nforecast::checkresiduals(fit.Wood_2.2) \n\n\n\n\n\n\n    Ljung-Box test\n\ndata:  Residuals from ARIMA(0,0,0) with non-zero mean\nQ* = 9.263, df = 10, p-value = 0.5073\n\nModel df: 0.   Total lags used: 10\n\n\nCode\naccuracy(forecast(fit.Wood_2.2, h = 10), test.Wood_2.2)\n\n\n                       ME      RMSE       MAE         MPE     MAPE      MASE\nTraining set 2.309264e-14 1.2071244 0.9243868 -13.5400802 29.21208 0.6715881\nTest set     8.382150e-02 0.7310041 0.6710780  -0.6671193 14.53788 0.4875535\n                    ACF1 Theil's U\nTraining set -0.06265894        NA\nTest set     -0.33015036 0.6419835\n\n\nCode\n#the RMSE done manually matches with the RMSE value that is found by the \n#model in row 2, column 2. This must be how the model does when compared to the \n#test data. So we have RMSE = 0.731\n\n\nThe model fit the training data well as indicated by the Box test’s failure to reject the null hypothesis. The actual observations do fall within the 80% prediction interval This data is treated as white noise with the ARIMA(0,0,0) model so we predict the prediction intervals are tied very closely to the variance of the residuals themselves.The RMSE = 0.731\n\n\nWood 1.3\n\n\nCode\npred.Wood_1.3 &lt;- forecast(fit.Wood_1.3, h = 10)\n\nplot(pred.Wood_1.3,ylab = \"log Abundance\", xlab = \"Time\")\npoints(test.Wood_1.3, pch=19, col=\"red\")\nlines(fitted(fit.Wood_1.3), col=\"blue\") \n\n\n\n\n\nCode\n#we see that the prediction intervals widen as the forecast moves forward\n#likely due to the autocorrelation of the errors, because this is an MA(1) model,\n#which the model has to estimate with each successive prediction. The fitted points\n#are a flat line again because this is an MA(1) model, we would write the model as\n# Xt = Xt-1 + error. When we fitted a model to the entire dataset, auto.arima() \n#selected an ARIMA(0,1,1) with drift, however with just the training data auto.arima() \n#selected an ARIMA(0,1,1) because the model does not have drift, the predictions stay as a flat line\n# rather than having a trend.\n#residuals.3 &lt;- test.Wood_1.3[1:10] - pred.Wood_1.3$mean[1:10]\n#sqrt(mean(residuals.3^2))\nforecast::checkresiduals(fit.Wood_1.3) \n\n\n\n\n\n\n    Ljung-Box test\n\ndata:  Residuals from ARIMA(0,1,1)\nQ* = 12.184, df = 9, p-value = 0.2032\n\nModel df: 1.   Total lags used: 10\n\n\nCode\naccuracy(forecast(fit.Wood_1.3, h = 10), test.Wood_1.3)\n\n\n                     ME      RMSE       MAE       MPE     MAPE      MASE\nTraining set  0.1476159 0.5776702 0.4685250  1.486566 6.564567 0.8028471\nTest set     -0.4034734 0.5321656 0.4363825 -5.476881 5.876250 0.7477688\n                   ACF1 Theil's U\nTraining set -0.1061270        NA\nTest set     -0.1945305   1.02589\n\n\nCode\n#the Root Mean Squared Error for this model is 0.532. This value is less\n#than the value for the Wood_2.2 model. This is a bit surprising as they both\n#put a straight line on the graph for predictions. These values indicate that \n#the model for wood.3 was more accurate. The returns of fish that spent less time in fresh\n#water and longer in the ocean were more accurately predicted than of the fish who spent\n#two years in both freshwater and the ocean.\n\n\nAgain we see that the model fit the training dataset well. The box test fails to reject the null hypotheis. We see that the prediction intervals widen as the forecast moves forward likely due to the autocorrelation of the errors, because this is an MA(1) model, which the model has to estimate with each successive prediction. The fitted points are a flat line again because this is an MA(1) model, we would write the model as Xt = Xt-1 + error. When we fitted a model to the entire dataset, auto.arima() selected an ARIMA(0,1,1) with drift, however with just the training data auto.arima() selected an ARIMA(0,1,1) because the model does not have drift, the predictions stay as a flat line rather than having a trend.\nthe Root Mean Squared Error for this model is 0.532. This value is less than the value for the Wood_2.2 model. This is a bit surprising as they both put a straight line on the graph for predictions. These values indicate that the model for wood_1.3 was more accurate at predicting future observations. The returns of fish that spent less time in fresh water and longer in the ocean were more accurately predicted than of the fish who spent two years in both freshwater and the ocean.\n\n\nKvichak 2.2\n\n\nCode\npred.kvi2 &lt;- forecast(fit.Kvichak_2.2, h=10)\n\nplot(pred.kvi2,ylab= \"log Abundance\", xlab =\"Time\")\npoints(test.Kvichak_2.2, pch=19, col =\"red\")\nlines(fitted(fit.Kvichak_2.2), col=\"blue\")\n\n\n\n\n\nCode\nforecast::checkresiduals(fit.Kvichak_2.2)\n\n\n\n\n\n\n    Ljung-Box test\n\ndata:  Residuals from ARIMA(0,0,1) with non-zero mean\nQ* = 36.296, df = 9, p-value = 3.513e-05\n\nModel df: 1.   Total lags used: 10\n\n\nCode\naccuracy(pred.kvi2, test.Kvichak_2.2)\n\n\n                       ME     RMSE      MAE        MPE     MAPE      MASE\nTraining set  0.008535118 1.696210 1.414096  -6.374419 21.61987 0.8022279\nTest set     -0.649087674 2.088137 1.751880 -21.121893 33.24484 0.9938554\n                    ACF1 Theil's U\nTraining set -0.02884552        NA\nTest set      0.65396329   1.93424\n\n\nCode\n#\n\n\nHere we see the cyclic nature of the data reflected in the residual’s ACF plot and the rejection of the Box test. This may have affected the model’s ability to predict. The RMSE = 2.088. The actual data points fell outside of the prediction intervals with this model. We observe the same straight line provided by the MA() model but there was more variance in this data which corresponds to the poor prediction performance ### Kvichak 1.3\n\n\nCode\n#chooses same exact model as the full dataset model\npred.kvi3 &lt;- forecast(fit.Kvichak_1.3, h=10)\n\nplot(pred.kvi3, ylab= \"log Abundance\", xlab =\"Time\")\npoints(test.Kvichak_1.3, pch=19, col =\"red\" ) \nlines(fitted(fit.Kvichak_1.3), col=\"blue\")\n\n\n\n\n\nCode\nforecast::checkresiduals(fit.Kvichak_1.3) \n\n\n\n\n\n\n    Ljung-Box test\n\ndata:  Residuals from ARIMA(0,1,1) with drift\nQ* = 1.9103, df = 9, p-value = 0.9928\n\nModel df: 1.   Total lags used: 10\n\n\nCode\naccuracy(pred.kvi3, test.Kvichak_1.3)\n\n\n                     ME     RMSE      MAE       MPE      MAPE      MASE\nTraining set  0.1613506 2.397324 1.399125  7.802140 22.591779 0.9296851\nTest set     -0.4366868 0.650266 0.553364 -5.920379  7.288404 0.3676971\n                      ACF1 Theil's U\nTraining set -0.0007066869        NA\nTest set     -0.4030463679 0.7920795\n\n\nCode\n#\n\n\nThe model fit the training data well again based on the failure to reject the Box test and did a good job forecasting future observation. The RMSE = 0.65 for this forecast’s accuracy, we see the prediction line with a positive trend which results because the model is ARIMA(0,1,1) with drift. Due to the smaller amount of variance in this data set the points fall much closer to the straight line prediction. Again we see that returns for fish that spent longer in the ocean were more accurately predicted in this system."
  },
  {
    "objectID": "Lab-1/Final_Write_ups/Lab-1-team-3_final.html",
    "href": "Lab-1/Final_Write_ups/Lab-1-team-3_final.html",
    "title": "5  Team 3 - Lab 1",
    "section": "",
    "text": "Data\nWe chose to work with all data to compare ability of the ARIMA models to forecast across different patterns of population dynamics and different sizes of training data sets.\nCode\nruggerone_data &lt;- readRDS(here::here(\"Lab-1\", \"Data_Images\", \"ruggerone_data.rds\"))\n\n#The above code was not working for me, so I've added this in temporarily (MS)\n#ruggerone_data &lt;- readRDS(\"C:/GitHub/fish550-2023/Lab-1/Data_Images/ruggerone_data.rds\")\nFor each species we will subset by region and test for stationarity. Then for forecast levels of 5, 10, and 20 years for each region, we will run auto-arima. We will look at forecasts and accuracy using RMSE to determine what level of for asting could be appropriate when considering management utility.\nWe will pick a couple of regions for each species to demonstrate ACF and PACF, and look through model results for any residuals.\nIt was harder to compare models across species and regions than we assumed. We created functions to help streamline this process. Also after researching forecast accuracy metrics, we decided to use MASE as a metric instead of RMSE. It was difficult to decipher why some regions were more easily forecasted and others returned unreliable results. Additionally, each species had different dynamics, and some variable methods were applied in order to find a model that worked.\nBecause of pink salmon life history, for regional models, models with even and odd years were considered separately.\nCode\n#Even Years First \n#Differenced plots for all Regions \nPinkByRegion_even %&gt;%\n  group_by(region) %&gt;%\n  mutate(diff_total = c(NA, diff(total))) %&gt;%\n  ggplot(aes(x = year, y = diff_total)) +\n  geom_line() +\n  facet_wrap(~region, scales = \"free_y\") +\n  ylab(\"Difference in Total Returns\") +\n  xlab(\"Year\") +\n  ggtitle(\"Diff by Region (Even Years)\") \n\n\nWarning: Removed 1 row containing missing values (`geom_line()`).\n\n\n\n\n\nCode\n  #ggfortify::ggstat_acf(method = \"ma\", na.action = na.pass)\n\n# Odd Years First \n#Differenced plots for all Regions \nPinkByRegion_odd %&gt;%\n  group_by(region) %&gt;%\n  mutate(diff_total = c(NA, diff(total))) %&gt;%\n  ggplot(aes(x = year, y = diff_total)) +\n  geom_line() +\n  facet_wrap(~region, scales = \"free_y\") +\n  ylab(\"Difference in Total Returns\") +\n  xlab(\"Year\") +\n  ggtitle(\"Diff by Region (Odd Years)\") \n\n\nWarning: Removed 1 row containing missing values (`geom_line()`).\nTo test stationarity outside the auto.arima function , the ADF and KPSS tests were compared for all years, and even and odd years. Note for the ADF null hypothesis is that the system is non-stationary (we want to reject), and the KPSS test null hypothesis is that there is stationarity.\nCode\n#Augmented Dicky Fuller \ntseries::adf.test(pink.ts, k=0)\n\n\nWarning in tseries::adf.test(pink.ts, k = 0): p-value smaller than printed\np-value\n\n\n\n    Augmented Dickey-Fuller Test\n\ndata:  pink.ts\nDickey-Fuller = -6.7912, Lag order = 0, p-value = 0.01\nalternative hypothesis: stationary\n\n\nCode\ntseries::adf.test(pink.ts_even, k=0)\n\n\n\n    Augmented Dickey-Fuller Test\n\ndata:  pink.ts_even\nDickey-Fuller = -2.7882, Lag order = 0, p-value = 0.2688\nalternative hypothesis: stationary\n\n\nCode\ntseries::adf.test(pink.ts_odd, k=0)\n\n\n\n    Augmented Dickey-Fuller Test\n\ndata:  pink.ts_odd\nDickey-Fuller = -3.3957, Lag order = 0, p-value = 0.07573\nalternative hypothesis: stationary\n\n\nCode\ntseries::kpss.test(pink.ts, null = c(\"Level\", \"Trend\"))\n\n\nWarning in tseries::kpss.test(pink.ts, null = c(\"Level\", \"Trend\")): p-value\nsmaller than printed p-value\n\n\n\n    KPSS Test for Level Stationarity\n\ndata:  pink.ts\nKPSS Level = 1.2192, Truncation lag parameter = 3, p-value = 0.01\n\n\nCode\ntseries::kpss.test(pink.ts_even, null = c(\"Level\", \"Trend\"))\n\n\n\n    KPSS Test for Level Stationarity\n\ndata:  pink.ts_even\nKPSS Level = 0.64625, Truncation lag parameter = 3, p-value = 0.01843\n\n\nCode\ntseries::kpss.test(pink.ts_odd, null = c(\"Level\", \"Trend\"))\n\n\n\n    KPSS Test for Level Stationarity\n\ndata:  pink.ts_odd\nKPSS Level = 0.64278, Truncation lag parameter = 3, p-value = 0.01875\nA complication is that the data sets split by even and odd years were not passing the tests of stationarity. Perhaps other steps should have been taken.\nCode\n#Functions for Regional ACF and PACF \n#======================================================\nACFandPACF&lt;-function(reg){\n  Pinkdat&lt;-PinkByRegion %&gt;% filter(region == reg)\n  #create time series\n  datts &lt;- ts(Pinkdat$lnreturns, start=Pinkdat$year[1]) \n  return(list(a = acf(datts, plot = FALSE), p = pacf(datts, plot = FALSE)))\n}\n\nACFandPACF_even&lt;-function(reg){\n  Pinkdat&lt;-PinkByRegion_even %&gt;% filter(region == reg)\n  #create time series\n  datts &lt;- ts(Pinkdat$lnreturns, start=Pinkdat$year[1]) \n  return(list(a = acf(datts, plot = FALSE), p = pacf(datts, plot = FALSE)))\n}\n\nACFandPACF_odd&lt;-function(reg){\n  Pinkdat&lt;-PinkByRegion_odd %&gt;% filter(region == reg)\n  #create time series\n  datts &lt;- ts(Pinkdat$lnreturns, start=Pinkdat$year[1]) \n  return(list(a = acf(datts, plot = FALSE), p = pacf(datts, plot = FALSE)))\n}\n\nFitModFunction&lt;-function(reg, forelevel){\n  #filter region\n  Pinkdat&lt;-PinkByRegion %&gt;% filter(region == reg)\n  #create time series\n  datts &lt;- ts(Pinkdat$lnreturns, start=Pinkdat$year[1], frequency = 0.5) #set Frequency for 0.5\n  cutoff&lt;-2014-forelevel\n  train &lt;- window(datts, Pinkdat$year[1], cutoff)\n  test &lt;- window(datts, cutoff+1, 2014)\n  \n  mod &lt;- auto.arima(train)\n  #testing to be sure that this is the best model (is the best mode the simplest if it is within 2 AIC values?)\n  trace &lt;- capture.output({\n    # assign so it doesn't pollute the output\n    model &lt;- auto.arima(datts, trace = TRUE)\n  })\n  con    &lt;- textConnection(trace)\n  models &lt;- read.table(con, sep=\":\")\n  close(con)\n  \n  #getting the \"best models\" that are within 2 AIC units\n  BestMods&lt;-models%&gt;% filter(row_number() != nrow(models)) %&gt;% mutate(AIC = replace(V2, V2 == \"Inf\", 99999), AIC = as.numeric(AIC), DeltaAIC = AIC-min(AIC)) %&gt;% filter(DeltaAIC &lt;= 2.0)\n  for(i in 1:nrow(BestMods)){\n    BestMods$Mod[i]&lt;-strsplit(strsplit(strsplit(BestMods$V1[i], \"[(]\")[[1]][2], \"[)]\")[[1]][1],\"[,]\")\n    BestMods$npar[i]&lt;-sum(as.numeric(BestMods$Mod[i][[1]][c(1,3)]))\n    if(strsplit(strsplit(BestMods$V1[i], \"[(]\")[[1]][2], \"[)]\")[[1]][2] == \" with drift         \"){\n      BestMods$npar[i] = BestMods$npar[i] + 1\n    }\n  }\n  \n  New&lt;-BestMods %&gt;% filter(npar == min(npar))\n  if(0 %in% New$DeltaAIC){\n    #auto arima picked the best model\n    res&lt;-accuracy(forecast(mod, h=forelevel), test)[2,\"MASE\"] #test set MASE\n  }else{\n    #of the models with the fewest parameters, pick the lowest AIC\n    newmod&lt;-New %&gt;% filter(AIC == min(AIC)) %&gt;% select(Mod)\n    mod&lt;-Arima(train, order = as.numeric(strsplit(newmod$Mod[[1]], \"[,]\")), include.constant = TRUE)\n    res&lt;-accuracy(forecast(mod, h=forelevel), test)[2,\"MASE\"] #test set MASE\n  }\n  \n  return(list(Fit = mod, MASE = res, Bm = BestMods)) #include best mods for testing to see that it's doing what I want\n  \n}\n\nFitModFunction_even&lt;-function(reg, forelevel){\n  #filter region\n  Pinkdat&lt;-PinkByRegion_even %&gt;% filter(region == reg)\n  #create time series\n  datts &lt;- ts(Pinkdat$lnreturns, start=Pinkdat$year[1], frequency = 0.5) #set Frequency for 0.5\n  cutoff&lt;-2014-forelevel\n  train &lt;- window(datts, Pinkdat$year[1], cutoff)\n  test &lt;- window(datts, cutoff+1, 2014)\n  \n  mod &lt;- auto.arima(train)\n  #testing to be sure that this is the best model (is the best mode the simplest if it is within 2 AIC values?)\n  trace &lt;- capture.output({\n    # assign so it doesn't pollute the output\n    model &lt;- auto.arima(datts, trace = TRUE)\n  })\n  con    &lt;- textConnection(trace)\n  models &lt;- read.table(con, sep=\":\")\n  close(con)\n  \n  #getting the \"best models\" that are within 2 AIC units\n  BestMods&lt;-models%&gt;% filter(row_number() != nrow(models)) %&gt;% mutate(AIC = replace(V2, V2 == \"Inf\", 99999), AIC = as.numeric(AIC), DeltaAIC = AIC-min(AIC)) %&gt;% filter(DeltaAIC &lt;= 2.0)\n  for(i in 1:nrow(BestMods)){\n    BestMods$Mod[i]&lt;-strsplit(strsplit(strsplit(BestMods$V1[i], \"[(]\")[[1]][2], \"[)]\")[[1]][1],\"[,]\")\n    BestMods$npar[i]&lt;-sum(as.numeric(BestMods$Mod[i][[1]][c(1,3)]))\n    if(strsplit(strsplit(BestMods$V1[i], \"[(]\")[[1]][2], \"[)]\")[[1]][2] == \" with drift         \"){\n      BestMods$npar[i] = BestMods$npar[i] + 1\n    }\n  }\n  \n  New&lt;-BestMods %&gt;% filter(npar == min(npar))\n  if(0 %in% New$DeltaAIC){\n    #auto arima picked the best model\n    res&lt;-accuracy(forecast(mod, h=forelevel), test)[2,\"MASE\"] #test set MASE\n  }else{\n    #of the models with the fewest parameters, pick the lowest AIC\n    newmod&lt;-New %&gt;% filter(AIC == min(AIC)) %&gt;% select(Mod)\n    mod&lt;-Arima(train, order = as.numeric(strsplit(newmod$Mod[[1]], \"[,]\")), include.constant = TRUE)\n    res&lt;-accuracy(forecast(mod, h=forelevel), test)[2,\"MASE\"] #test set MASE\n  }\n  \n  return(list(Fit = mod, MASE = res, Bm = BestMods)) #include best mods for testing to see that it's doing what I want\n  \n}\n\nFitModFunction_odd&lt;-function(reg, forelevel){\n  #filter region\n  Pinkdat&lt;-PinkByRegion_odd %&gt;% filter(region == reg)\n  #create time series\n  datts &lt;- ts(Pinkdat$lnreturns, start=Pinkdat$year[1], frequency = 0.5) \n  cutoff&lt;-2015-forelevel\n  train &lt;- window(datts, Pinkdat$year[1], cutoff)\n  test &lt;- window(datts, cutoff+1, 2015)\n  \n  mod &lt;- auto.arima(train)\n  #testing to be sure that this is the best model (is the best mode the simplest if it is within 2 AIC values?)\n  trace &lt;- capture.output({\n    # assign so it doesn't pollute the output\n    model &lt;- auto.arima(datts, trace = TRUE)\n  })\n  con    &lt;- textConnection(trace)\n  models &lt;- read.table(con, sep=\":\")\n  close(con)\n  \n  #getting the \"best models\" that are within 2 AIC units\n  BestMods&lt;-models%&gt;% filter(row_number() != nrow(models)) %&gt;% mutate(AIC = replace(V2, V2 == \"Inf\", 99999), AIC = as.numeric(AIC), DeltaAIC = AIC-min(AIC)) %&gt;% filter(DeltaAIC &lt;= 2.0)\n  for(i in 1:nrow(BestMods)){\n    BestMods$Mod[i]&lt;-strsplit(strsplit(strsplit(BestMods$V1[i], \"[(]\")[[1]][2], \"[)]\")[[1]][1],\"[,]\")\n    BestMods$npar[i]&lt;-sum(as.numeric(BestMods$Mod[i][[1]][c(1,3)]))\n    if(strsplit(strsplit(BestMods$V1[i], \"[(]\")[[1]][2], \"[)]\")[[1]][2] == \" with drift         \"){\n      BestMods$npar[i] = BestMods$npar[i] + 1\n    }\n  }\n  \n  New&lt;-BestMods %&gt;% filter(npar == min(npar))\n  if(0 %in% New$DeltaAIC){\n    #auto arima picked the best model\n    res&lt;-accuracy(forecast(mod, h=forelevel), test)[2,\"MASE\"] #test set MASE\n  }else{\n    #of the models with the fewest parameters, pick the lowest AIC\n    newmod&lt;-New %&gt;% filter(AIC == min(AIC)) %&gt;% select(Mod)\n    mod&lt;-Arima(train, order = as.numeric(strsplit(newmod$Mod[[1]], \"[,]\")), include.constant = TRUE)\n    res&lt;-accuracy(forecast(mod, h=forelevel), test)[2,\"MASE\"] #test set MASE\n  }\n  \n  return(list(Fit = mod, MASE = res, Bm = BestMods)) #include best mods for testing to see that it's doing what I want\n  \n}\n\n#================================================================\nNext step is to then define the regions\nCode\n#regions vector\nregions&lt;-unique(PinkByRegion$region)\n#regions key\nregionskey&lt;-c(\"Cook Inlet\", \"E. Kamchatka\", \"Japan\", \"Kodiak\", \"Russia\", \"N.British Columbia\",\n              \"Prince William Sound\", \"S. Alaska Pen.\", \"S. British Columbia\", \"SE Alaska\", \"W. Kamchatka\", \"W. Alaska\")\nnames(regionskey)&lt;-regions #for plotting\n\n#loop through regions/levels\n#all\nDiagPlots&lt;-lapply(regions, ACFandPACF)\n   names(DiagPlots)&lt;-regions\n\n#Even\nDiagPlots_even&lt;-lapply(regions, ACFandPACF_even)\n   names(DiagPlots_even)&lt;-regions\n   \n#Odd\nDiagPlots_odd&lt;-lapply(regions, ACFandPACF_odd)\n   names(DiagPlots_odd)&lt;-regions\nLets look at the regional breakdowns of ACF and PACF, first for all years:\nCode\n#Even Years \npar(mfrow=c(3,4))\nfor(r in 1:length(regions)){\n  plot(DiagPlots[[r]][[1]], main = paste0(\"Region: \", regionskey[r]))\n}\n\n\n\n\n\nCode\n#PACF plots for each region\npar(mfrow=c(3,4))\nfor(r in 1:length(regions)){\n  plot(DiagPlots[[r]][[2]], main = paste0(\"Region: \", regionskey[r]))\n}\nThe ACFs for regions show different levels of lag or total correlation. Let’s look for even years:\nCode\n#Even Years \npar(mfrow=c(3,4))\nfor(r in 1:length(regions)){\n  plot(DiagPlots_even[[r]][[1]], main = paste0(\"Region: \", regionskey[r]))\n}\n\n\n\n\n\nCode\n#PACF plots for each region\npar(mfrow=c(3,4))\nfor(r in 1:length(regions)){\n  plot(DiagPlots_even[[r]][[2]], main = paste0(\"Region: \", regionskey[r]))\n}\nAnd then for odd years:\nCode\n#Odd Years \npar(mfrow=c(3,4))\nfor(r in 1:length(regions)){\n  plot(DiagPlots_odd[[r]][[1]], main = paste0(\"Region: \", regionskey[r]))\n}\n\n\n\n\n\nCode\n#PACF plots for each region\npar(mfrow=c(3,4))\nfor(r in 1:length(regions)){\n  plot(DiagPlots_odd[[r]][[2]], main = paste0(\"Region: \", regionskey[r]))\n}\nThe next step is to look at the ARIMA models for regions by all years, even and odd years, and define forecast levels. Let’s start with all years.\nCode\n#forecast levels\nforecastlevels&lt;-c(5, 10, 20)\n#all combinations\nAllcombs&lt;-expand_grid(regions, forecastlevels)\n\n#================================================\n\n#All\nRegionMods&lt;-mapply(FitModFunction, Allcombs$regions, Allcombs$forecastlevels, SIMPLIFY = FALSE)\n# head(RegionMods_even)\n# names(RegionMods_even)\nNow let’s consider even years.\nCode\n#Even\nRegionMods_even&lt;-mapply(FitModFunction_even, Allcombs$regions, Allcombs$forecastlevels, SIMPLIFY = FALSE)\nhead(RegionMods_even)\n\n\n$ci\n$ci$Fit\nSeries: train \nARIMA(0,1,0) \n\nsigma^2 = 0.3224:  log likelihood = -23.88\nAIC=49.77   AICc=49.92   BIC=51.1\n\n$ci$MASE\n[1] 0.3602762\n\n$ci$Bm\n                                 V1        V2      AIC DeltaAIC     Mod npar\n1  ARIMA(0,1,0)                      55.48062 55.48062        0 0, 1, 0    0\n\n\n$ci\n$ci$Fit\nSeries: train \nARIMA(0,1,0) \n\nsigma^2 = 0.3052:  log likelihood = -21.47\nAIC=44.93   AICc=45.1   BIC=46.19\n\n$ci$MASE\n[1] 1.243461\n\n$ci$Bm\n                                 V1        V2      AIC DeltaAIC     Mod npar\n1  ARIMA(0,1,0)                      55.48062 55.48062        0 0, 1, 0    0\n\n\n$ci\n$ci$Fit\nSeries: train \nARIMA(0,1,0) \n\nsigma^2 = 0.2563:  log likelihood = -15.5\nAIC=33.01   AICc=33.22   BIC=34.05\n\n$ci$MASE\n[1] 0.3950404\n\n$ci$Bm\n                                 V1        V2      AIC DeltaAIC     Mod npar\n1  ARIMA(0,1,0)                      55.48062 55.48062        0 0, 1, 0    0\n\n\n$e_kam\n$e_kam$Fit\nSeries: train \nARIMA(0,0,0) with non-zero mean \n\nCoefficients:\n        mean\n      2.6102\ns.e.  0.1257\n\nsigma^2 = 0.4743:  log likelihood = -29.83\nAIC=63.65   AICc=64.11   BIC=66.39\n\n$e_kam$MASE\n[1] 0.2398603\n\n$e_kam$Bm\n                                 V1        V2      AIC DeltaAIC     Mod npar\n1  ARIMA(0,0,0) with non-zero mean   71.15545 71.15545  0.43946 0, 0, 0    0\n2  ARIMA(1,0,0) with non-zero mean   72.55604 72.55604  1.84005 1, 0, 0    1\n3  ARIMA(0,0,1) with non-zero mean   70.71599 70.71599  0.00000 0, 0, 1    1\n4  ARIMA(1,0,1) with non-zero mean   72.39343 72.39343  1.67744 1, 0, 1    2\n5  ARIMA(0,0,2) with non-zero mean   71.53128 71.53128  0.81529 0, 0, 2    2\n\n\n$e_kam\n$e_kam$Fit\nSeries: train \nARIMA(0,0,0) with non-zero mean \n\nCoefficients:\n        mean\n      2.5867\ns.e.  0.1318\n\nsigma^2 = 0.4873:  log likelihood = -28.1\nAIC=60.19   AICc=60.69   BIC=62.79\n\n$e_kam$MASE\n[1] 0.219349\n\n$e_kam$Bm\n                                 V1        V2      AIC DeltaAIC     Mod npar\n1  ARIMA(0,0,0) with non-zero mean   71.15545 71.15545  0.43946 0, 0, 0    0\n2  ARIMA(1,0,0) with non-zero mean   72.55604 72.55604  1.84005 1, 0, 0    1\n3  ARIMA(0,0,1) with non-zero mean   70.71599 70.71599  0.00000 0, 0, 1    1\n4  ARIMA(1,0,1) with non-zero mean   72.39343 72.39343  1.67744 1, 0, 1    2\n5  ARIMA(0,0,2) with non-zero mean   71.53128 71.53128  0.81529 0, 0, 2    2\n\n\n$e_kam\n$e_kam$Fit\nSeries: train \nARIMA(0,0,0) with non-zero mean \n\nCoefficients:\n        mean\n      2.6917\ns.e.  0.1209\n\nsigma^2 = 0.337:  log likelihood = -18.74\nAIC=41.48   AICc=42.12   BIC=43.67\n\n$e_kam$MASE\n[1] 0.2382605\n\n$e_kam$Bm\n                                 V1        V2      AIC DeltaAIC     Mod npar\n1  ARIMA(0,0,0) with non-zero mean   71.15545 71.15545  0.43946 0, 0, 0    0\n2  ARIMA(1,0,0) with non-zero mean   72.55604 72.55604  1.84005 1, 0, 0    1\n3  ARIMA(0,0,1) with non-zero mean   70.71599 70.71599  0.00000 0, 0, 1    1\n4  ARIMA(1,0,1) with non-zero mean   72.39343 72.39343  1.67744 1, 0, 1    2\n5  ARIMA(0,0,2) with non-zero mean   71.53128 71.53128  0.81529 0, 0, 2    2\n\n\nCode\n#names(RegionMods_even) #should be three for each region\nNow let’s consider odd years.\nCode\n#Odd \nRegionMods_odd&lt;-mapply(FitModFunction_odd, Allcombs$regions, Allcombs$forecastlevels, SIMPLIFY = FALSE)\nhead(RegionMods_odd)\n\n\n$ci\n$ci$Fit\nSeries: train \nARIMA(1,0,0) with zero mean \n\nCoefficients:\n         ar1\n      0.6039\ns.e.  0.1467\n\nsigma^2 = 0.4057:  log likelihood = -27.79\nAIC=59.57   AICc=60.03   BIC=62.31\n\n$ci$MASE\n[1] 2.144842\n\n$ci$Bm\n                                 V1        V2      AIC DeltaAIC     Mod npar\n1  ARIMA(1,0,0) with non-zero mean    75.3159 75.31590  0.36364 1, 0, 0    1\n2  ARIMA(1,0,0) with zero mean       74.95226 74.95226  0.00000 1, 0, 0    1\n\n\n$ci\n$ci$Fit\nSeries: train \nARIMA(1,0,0) with zero mean \n\nCoefficients:\n         ar1\n      0.6037\ns.e.  0.1610\n\nsigma^2 = 0.4189:  log likelihood = -26.28\nAIC=56.57   AICc=57.07   BIC=59.16\n\n$ci$MASE\n[1] 1.555645\n\n$ci$Bm\n                                 V1        V2      AIC DeltaAIC     Mod npar\n1  ARIMA(1,0,0) with non-zero mean    75.3159 75.31590  0.36364 1, 0, 0    1\n2  ARIMA(1,0,0) with zero mean       74.95226 74.95226  0.00000 1, 0, 0    1\n\n\n$ci\n$ci$Fit\nSeries: train \nARIMA(1,0,0) with zero mean \n\nCoefficients:\n         ar1\n      0.6430\ns.e.  0.1528\n\nsigma^2 = 0.3645:  log likelihood = -19.87\nAIC=43.74   AICc=44.37   BIC=45.93\n\n$ci$MASE\n[1] 1.425649\n\n$ci$Bm\n                                 V1        V2      AIC DeltaAIC     Mod npar\n1  ARIMA(1,0,0) with non-zero mean    75.3159 75.31590  0.36364 1, 0, 0    1\n2  ARIMA(1,0,0) with zero mean       74.95226 74.95226  0.00000 1, 0, 0    1\n\n\n$e_kam\n$e_kam$Fit\nSeries: train \nARIMA(0,1,0) \n\nsigma^2 = 0.1936:  log likelihood = -16.75\nAIC=35.49   AICc=35.65   BIC=36.82\n\n$e_kam$MASE\n[1] 0.1721234\n\n$e_kam$Bm\n                                 V1        V2      AIC DeltaAIC     Mod npar\n1  ARIMA(1,1,0) with drift           60.55848 60.55848  1.02617 1, 1, 0    2\n2  ARIMA(0,1,0)                      59.53231 59.53231  0.00000 0, 1, 0    0\n\n\n$e_kam\n$e_kam$Fit\nSeries: train \nARIMA(0,0,1) with non-zero mean \n\nCoefficients:\n         ma1    mean\n      0.5514  3.9961\ns.e.  0.1250  0.1117\n\nsigma^2 = 0.1551:  log likelihood = -12.29\nAIC=30.59   AICc=31.63   BIC=34.48\n\n$e_kam$MASE\n[1] 0.2364036\n\n$e_kam$Bm\n                                 V1        V2      AIC DeltaAIC     Mod npar\n1  ARIMA(1,1,0) with drift           60.55848 60.55848  1.02617 1, 1, 0    2\n2  ARIMA(0,1,0)                      59.53231 59.53231  0.00000 0, 1, 0    0\n\n\n$e_kam\n$e_kam$Fit\nSeries: train \nARIMA(0,0,1) with non-zero mean \n\nCoefficients:\n         ma1    mean\n      0.5404  3.9140\ns.e.  0.1481  0.1168\n\nsigma^2 = 0.1433:  log likelihood = -8.97\nAIC=23.94   AICc=25.28   BIC=27.21\n\n$e_kam$MASE\n[1] 0.1918676\n\n$e_kam$Bm\n                                 V1        V2      AIC DeltaAIC     Mod npar\n1  ARIMA(1,1,0) with drift           60.55848 60.55848  1.02617 1, 1, 0    2\n2  ARIMA(0,1,0)                      59.53231 59.53231  0.00000 0, 1, 0    0\n\n\nCode\n#names(RegionMods_odd) #should be three for each region\nNow, we’re extracting the MASE and creating our final model tables\nCode\n#getting MASE\n#All\nRegionMASE&lt;-sapply(RegionMods, function(x){y&lt;-x$MASE})\nRegionBestMod&lt;-sapply(RegionMods, function(x){y&lt;-as.character(x$Fit)})\n#Even\nRegionMASE_even&lt;-sapply(RegionMods_even, function(x){y&lt;-x$MASE})\nRegionBestMod_even&lt;-sapply(RegionMods_even, function(x){y&lt;-as.character(x$Fit)})\n#Odd\nRegionMASE_odd&lt;-sapply(RegionMods_odd, function(x){y&lt;-x$MASE})\nRegionBestMod_odd&lt;-sapply(RegionMods_odd, function(x){y&lt;-as.character(x$Fit)})\n#combine into tables\n#all\nResultsTable&lt;-Allcombs %&gt;% add_column(Model = RegionBestMod, MASE = RegionMASE)\nResultsTable\n\n\n# A tibble: 36 × 4\n   regions forecastlevels Model                            MASE\n   &lt;chr&gt;            &lt;dbl&gt; &lt;chr&gt;                           &lt;dbl&gt;\n 1 ci                   5 ARIMA(2,0,0) with non-zero mean 0.460\n 2 ci                  10 ARIMA(2,0,0) with non-zero mean 0.549\n 3 ci                  20 ARIMA(1,0,1) with non-zero mean 0.711\n 4 e_kam                5 ARIMA(2,0,0) with non-zero mean 0.134\n 5 e_kam               10 ARIMA(2,0,0) with non-zero mean 0.111\n 6 e_kam               20 ARIMA(2,0,0) with non-zero mean 0.196\n 7 japan                5 ARIMA(0,0,0) with non-zero mean 0.744\n 8 japan               10 ARIMA(0,0,0) with non-zero mean 0.901\n 9 japan               20 ARIMA(0,1,1)                    0.853\n10 kod                  5 ARIMA(0,1,1) with drift         0.221\n# ℹ 26 more rows\n\n\nCode\n#even\nResultsTable_even&lt;-Allcombs %&gt;% add_column(Model = RegionBestMod_even, MASE = RegionMASE_even)\nResultsTable_even\n\n\n# A tibble: 36 × 4\n   regions forecastlevels Model                            MASE\n   &lt;chr&gt;            &lt;dbl&gt; &lt;chr&gt;                           &lt;dbl&gt;\n 1 ci                   5 ARIMA(0,1,0)                    0.360\n 2 ci                  10 ARIMA(0,1,0)                    1.24 \n 3 ci                  20 ARIMA(0,1,0)                    0.395\n 4 e_kam                5 ARIMA(0,0,0) with non-zero mean 0.240\n 5 e_kam               10 ARIMA(0,0,0) with non-zero mean 0.219\n 6 e_kam               20 ARIMA(0,0,0) with non-zero mean 0.238\n 7 japan                5 ARIMA(0,1,0)                    0.743\n 8 japan               10 ARIMA(0,1,0)                    0.500\n 9 japan               20 ARIMA(1,0,0) with non-zero mean 0.731\n10 kod                  5 ARIMA(0,0,0) with non-zero mean 0.155\n# ℹ 26 more rows\n\n\nCode\n#Odd\nResultsTable_odd&lt;-Allcombs %&gt;% add_column(Model = RegionBestMod_odd, MASE = RegionMASE_odd)\nResultsTable_odd\n\n\n# A tibble: 36 × 4\n   regions forecastlevels Model                            MASE\n   &lt;chr&gt;            &lt;dbl&gt; &lt;chr&gt;                           &lt;dbl&gt;\n 1 ci                   5 ARIMA(1,0,0) with zero mean     2.14 \n 2 ci                  10 ARIMA(1,0,0) with zero mean     1.56 \n 3 ci                  20 ARIMA(1,0,0) with zero mean     1.43 \n 4 e_kam                5 ARIMA(0,1,0)                    0.172\n 5 e_kam               10 ARIMA(0,0,1) with non-zero mean 0.236\n 6 e_kam               20 ARIMA(0,0,1) with non-zero mean 0.192\n 7 japan                5 ARIMA(1,1,0)                    0.898\n 8 japan               10 ARIMA(0,1,0)                    0.557\n 9 japan               20 ARIMA(1,0,0) with non-zero mean 0.550\n10 kod                  5 ARIMA(0,1,0)                    0.124\n# ℹ 26 more rows\nComparing the models across the three forecasts for SBC underlines that the data chosen for a forecast matters. Not only is the estimated ARIMA a better fit for a shorter forecast (and is trained on more data), but the training data for the model for the 20 year forecast is not stationary so the ARIMA parameters are very different from the parameters estimated for the 5 and 10 year forecasts.\nFor sockeye, six regions had at least one forecast with a well performing model (MASE &lt; 1); however, six regions did not have MASE &lt; 1 for even the 5 year forecast model. None of the 20 year forecasts resulted in MASE &lt; 1. This suggests that our data are so stochastic that it is difficult to forecast more than 5 years into the future. Another hypothesis could be that the training data set isn’t long enough to generate a good model for the 20 year forecast, but from looking at the data we think the large inter-year variability in returns makes it difficult to fit an accurate model. In general, the models that fit the data better (lower MASE) tended to include differencing and were more likely to have higher order parameters.\nModels fit to Chum do better than models fit to Sockeye. There may be something about the patterns of chum population fluctuations that are more amenable to being modeled with ARIMA.\nModel fits to pink depended on data assumptions given their cyclic life history, and while the MASE results were lower than the other stock, ARIMA models are likely not the appropriate method for assessing or predicting pinnk returns with any level of certainty.\nAll team members helped decide on the goal and ran the analyses for the individual species and all regions. All team members wrote the code and created the results for one species. ZR researched approaches for measuring accuracy of forecasts and created functions to run the ARIMA models over multiple regions and select the best model (even if it was different than selected by auto.arima). ETS and MS modified this code to work with their own species. All team members helped write and edit the report."
  },
  {
    "objectID": "Lab-1/Final_Write_ups/Lab-1-team-3_final.html#sockeye-combined-regions",
    "href": "Lab-1/Final_Write_ups/Lab-1-team-3_final.html#sockeye-combined-regions",
    "title": "5  Team 3 - Lab 1",
    "section": "Sockeye: Combined Regions",
    "text": "Sockeye: Combined Regions\nSubset and format the data to analyze just sockeye.\n\n\nCode\nSockByRegion&lt;-ruggerone_data %&gt;%\n  filter(region != \"japan\") %&gt;%\n  filter(region != \"korea\") %&gt;%\n  group_by(species, region, year) %&gt;%\n  summarize(total = sum(returns, na.rm=TRUE)) %&gt;% \n  mutate(lnreturns = log(total)) %&gt;%\n  filter(species == \"sockeye\")\n\n\n`summarise()` has grouped output by 'species', 'region'. You can override using\nthe `.groups` argument.\n\n\nCreate a time series object and train the data on the first 59 years of data; forecast the last 5 years.\n\n\nCode\nsockeye.ts&lt;-ts(SockByRegion$lnreturns, start=SockByRegion$year[1])\n\ntrain.sockeye&lt;-window(sockeye.ts, start=1952, end=2010)\ntest.sockeye&lt;-window(sockeye.ts, start=2011, end=2015)\n\n\nAssess the ACF and PACF of the training data set.\n\n\n\n\n\n\n\n\nLook at the options for fitting an ARIMA to the data and then choose a final model. The best model for both of these is ARIMA(0,1,2); however, a comparison with other models suggests that ARIMA(1,1,1) is also a good fit with AIC within 0.3 of the ARIMA(0,1,2). The full dataset requires differencing (d=1).\n\n\nCode\nfit &lt;- forecast::auto.arima(train.sockeye, trace=T)\n\n\n\n ARIMA(2,1,2) with drift         : Inf\n ARIMA(0,1,0) with drift         : 61.95027\n ARIMA(1,1,0) with drift         : 60.11204\n ARIMA(0,1,1) with drift         : 57.27974\n ARIMA(0,1,0)                    : 59.87487\n ARIMA(1,1,1) with drift         : Inf\n ARIMA(0,1,2) with drift         : 57.23854\n ARIMA(1,1,2) with drift         : Inf\n ARIMA(0,1,3) with drift         : Inf\n ARIMA(1,1,3) with drift         : Inf\n ARIMA(0,1,2)                    : 55.53198\n ARIMA(0,1,1)                    : 55.33664\n ARIMA(1,1,1)                    : 55.19379\n ARIMA(1,1,0)                    : 57.99975\n ARIMA(2,1,1)                    : 57.46972\n ARIMA(1,1,2)                    : 57.48549\n ARIMA(2,1,0)                    : 58.91271\n ARIMA(2,1,2)                    : Inf\n\n Best model: ARIMA(1,1,1)                    \n\n\nCode\nfit.final.sock&lt;-forecast::auto.arima(train.sockeye, approximation = F, stepwise = F)\n\n\nPlot the 5 year forecast for the last part of the dataset compared to the actual data. The real data are represented by the black dots; the forecast is represented by the black line."
  },
  {
    "objectID": "Lab-1/Final_Write_ups/Lab-1-team-3_final.html#assess-how-well-forecasting-performs-for-sockeye-returns-by-region",
    "href": "Lab-1/Final_Write_ups/Lab-1-team-3_final.html#assess-how-well-forecasting-performs-for-sockeye-returns-by-region",
    "title": "5  Team 3 - Lab 1",
    "section": "Assess how well forecasting performs for sockeye returns by region",
    "text": "Assess how well forecasting performs for sockeye returns by region\nCreate objects needed for plotting.\n\n\nCode\nregions&lt;-unique(SockByRegion$region)\nregionskey&lt;-c(\"Cook Inlet\", \"E. Kamchatka\", \"Kodiak\", \"Russia\", \"N.British Columbia\",\n              \"Prince William Sound\", \"S. Alaska Pen.\", \"S. British Columbia\", \"SE Alaska\", \"W. Kamchatka\", \"Washington\", \"W. Alaska\")\nnames(regionskey)&lt;-regions\nforecastlevels&lt;-c(5, 10, 20)\nAllcombs&lt;-expand_grid(regions, forecastlevels)\n\n\nPlot ACF and PACF for each region.\n\n\nCode\nACFandPACF&lt;-function(reg){\n  Sockdat&lt;-SockByRegion %&gt;% filter(region == reg)\n  #create time series\n  datts &lt;- ts(Sockdat$lnreturns, start=Sockdat$year[1])\n  return(list(a = acf(datts, plot = FALSE), p = pacf(datts, plot = FALSE)))\n}\n\n\n\n\nCode\nDiagPlots&lt;-lapply(regions, ACFandPACF)\nnames(DiagPlots)&lt;-regions\n\n\nACF plots\n\n\n\n\n\nPACF plots\n\n\n\n\n\nFit ARIMA models to each region.\n\n\nCode\nFitModFunction&lt;-function(reg, forelevel){\n  #filter region\n  Sockdat&lt;-SockByRegion %&gt;% filter(region == reg)\n  #create time series\n  datts &lt;- ts(Sockdat$lnreturns, start=Sockdat$year[1]) #this assumes the first year in data is the start of the time series (they are in order) \n  cutoff&lt;-2015-forelevel\n  train &lt;- window(datts, 1952, cutoff)\n  test &lt;- window(datts, cutoff+1, 2015)\n  \n  mod &lt;- auto.arima(train)\n  \n  #testing to be sure that this is the best model (is the best mode the simplest if it is within 2 AIC values?)\n  trace &lt;- capture.output({\n    # assign so it doesn't pollute the output\n    model &lt;- auto.arima(datts, trace = TRUE)\n  })\n  con    &lt;- textConnection(trace)\n  models &lt;- read.table(con, sep=\":\")\n  close(con)\n  \n  #getting the \"best models\" that are within 2 AIC units\n  BestMods&lt;-models%&gt;% filter(row_number() != nrow(models)) %&gt;% mutate(AIC = replace(V2, V2 == \"Inf\", 99999), AIC = as.numeric(AIC), DeltaAIC = AIC-min(AIC)) %&gt;% filter(DeltaAIC &lt;= 2.0)\n  for(i in 1:nrow(BestMods)){\n    BestMods$Mod[i]&lt;-strsplit(strsplit(strsplit(BestMods$V1[i], \"[(]\")[[1]][2], \"[)]\")[[1]][1],\"[,]\")\n    BestMods$npar[i]&lt;-sum(as.numeric(BestMods$Mod[i][[1]][c(1,3)]))\n    if(strsplit(strsplit(BestMods$V1[i], \"[(]\")[[1]][2], \"[)]\")[[1]][2] == \" with drift         \"){\n      BestMods$npar[i] = BestMods$npar[i] + 1\n    }\n  }\n  \n  New&lt;-BestMods %&gt;% filter(npar == min(npar))\n  if(0 %in% New$DeltaAIC){\n      #auto arima picked the best model\n      res&lt;-accuracy(forecast(mod, h=forelevel), test)[2,\"MASE\"] #test set MASE\n  }else{\n      #of the models with the fewest parameters, pick the lowest AIC\n      newmod&lt;-New %&gt;% filter(AIC == min(AIC)) %&gt;% select(Mod)\n      mod&lt;-Arima(train, order = as.numeric(strsplit(newmod$Mod[[1]], \"[,]\")), include.constant = TRUE)\n      res&lt;-accuracy(forecast(mod, h=forelevel), test)[2,\"MASE\"] #test set MASE\n    }\n\n  return(list(Fit = mod, MASE = res, Bm = BestMods)) #include best mods for testing to see that it's doing what I want\n}\nRegionModsSock&lt;-mapply(FitModFunction, Allcombs$regions, Allcombs$forecastlevels, SIMPLIFY = FALSE)\n\n\nExtract MASE for comparisons of models across regions.\n\n\nCode\nRegionMASESock&lt;-sapply(RegionModsSock, function(x){y&lt;-x$MASE})\nRegionBestModSock&lt;-sapply(RegionModsSock, function(x){y&lt;-as.character(x$Fit)})\n\nResultsTableSock&lt;-Allcombs %&gt;% add_column(Model = RegionBestModSock, MASE = RegionMASESock)\n\n\nHow well does auto.arima do in choosing a model? Is it different from what we would choose looking at ACF and PACF? For Cook Inlet, auto.arima selected ARIMA(4,1,1), but PACF has a significant lag at 6 and ACF trails off.\n\n\nCode\nsock.ci&lt;-subset(SockByRegion, region=='ci')\nci.ts&lt;-ts(sock.ci$lnreturns, start=sock.ci$year[1])\nforecast::ndiffs(ci.ts, test='adf')\n\n\n[1] 1\n\n\nCode\nforecast::ndiffs(ci.ts, test='kpss')\n\n\n[1] 1\n\n\nCode\ntrain.ci5&lt;-window(ci.ts, start=1952, end=2010)\ntest.ci5&lt;-window(ci.ts, start=2011, end=2015)\nci.final5&lt;-forecast::auto.arima(train.ci5, approximation = F, stepwise = F)\naccuracy(forecast(ci.final5, h=5), test.ci5)\n\n\n                     ME      RMSE       MAE       MPE     MAPE      MASE\nTraining set 0.02471079 0.3370305 0.2702999 -38.06705 62.87923 0.8967555\nTest set     0.34919358 0.4082214 0.3491936  17.84353 17.84353 1.1584957\n                     ACF1 Theil's U\nTraining set  0.008040561        NA\nTest set     -0.080588177  1.829245\n\n\nCode\n#MASE is just above 1\n\nacf(train.ci5)\n\n\n\n\n\nCode\npacf(train.ci5)\n\n\n\n\n\nCode\n#select ARIMA (6,1,0)\nfit.ci2 &lt;- Arima(train.ci5, order=c(6,1,0), include.mean=TRUE)\naccuracy(forecast(fit, h=5), test.ci5)\n\n\n                     ME      RMSE       MAE       MPE     MAPE      MASE\nTraining set 0.03439583 0.3641608 0.2787817 -40.97753 65.59960 0.9248951\nTest set     0.29776606 0.3308204 0.2977661  15.30517 15.30517 0.9878781\n                     ACF1 Theil's U\nTraining set -0.007356741        NA\nTest set      0.206715703  1.669537\n\n\nCode\n#MASE is very high for the test set.\n\n\nHere are the plots comparing the two models for Cook Inlet. The plots look very similar, but the forecast differs a bit for the last 2 years."
  },
  {
    "objectID": "Lab-1/Final_Write_ups/Lab-1-team-3_final.html#chum-regional",
    "href": "Lab-1/Final_Write_ups/Lab-1-team-3_final.html#chum-regional",
    "title": "5  Team 3 - Lab 1",
    "section": "Chum: Regional",
    "text": "Chum: Regional\nLooking at data:\n\n\n\n\n\nGetting a subset of the data (removing regions with no data):\n\n\nCode\n#removing Korea Japan because there's no data\nChumByRegion&lt;-ruggerone_data %&gt;%\n  filter(region != \"japan\") %&gt;%\n  filter(region != \"korea\") %&gt;%\n  group_by(species, region, year) %&gt;%\n  summarize(total = sum(returns, na.rm=TRUE)) %&gt;% \n  mutate(lnreturns = log(total)) %&gt;%\n  filter(species == \"chum\")\n\n\n`summarise()` has grouped output by 'species', 'region'. You can override using\nthe `.groups` argument.\n\n\nCode\nhead(ChumByRegion)\n\n\n# A tibble: 6 × 5\n# Groups:   species, region [1]\n  species region  year total lnreturns\n  &lt;chr&gt;   &lt;chr&gt;  &lt;dbl&gt; &lt;dbl&gt;     &lt;dbl&gt;\n1 chum    ci      1952 1.25     0.226 \n2 chum    ci      1953 1.44     0.363 \n3 chum    ci      1954 1.93     0.656 \n4 chum    ci      1955 0.957   -0.0436\n5 chum    ci      1956 2.11     0.748 \n6 chum    ci      1957 2.76     1.01  \n\n\n\n\nCode\n#making sure all the regions cover all the years (or at least start and end)\nChumByRegion %&gt;% group_by(region) %&gt;% summarise(startyear = min(year), endyear = max(year))\n\n\n# A tibble: 12 × 3\n   region startyear endyear\n   &lt;chr&gt;      &lt;dbl&gt;   &lt;dbl&gt;\n 1 ci          1952    2015\n 2 e_kam       1952    2015\n 3 kod         1952    2015\n 4 m_i         1952    2015\n 5 nbc         1952    2015\n 6 pws         1952    2015\n 7 s_pen       1952    2015\n 8 sbc         1952    2015\n 9 seak        1952    2015\n10 w_kam       1952    2015\n11 wa          1952    2015\n12 wak         1952    2015\n\n\nCode\n#all start in 1952 and end in 2015\n\n\nCreating tibble to loop through:\n\n\nCode\n#regions vector\nregions&lt;-unique(ChumByRegion$region)\n#regions key\nregionskey&lt;-c(\"Cook Inlet\", \"E. Kamchatka\", \"Kodiak\", \"Russia\", \"N.British Columbia\",\n              \"Prince William Sound\", \"S. Alaska Pen.\", \"S. British Columbia\", \"SE Alaska\", \"W. Kamchatka\", \"Washington\", \"W. Alaska\")\nnames(regionskey)&lt;-regions #for plotting\n#forecast levels\nforecastlevels&lt;-c(5, 10, 20)\n#all combinations\nAllcombs&lt;-expand_grid(regions, forecastlevels)\n\n\nFunction for ACF and PACF\n\n\nCode\n#ACF and PACF\nACFandPACF&lt;-function(reg){\n  Chumdat&lt;-ChumByRegion %&gt;% filter(region == reg)\n  #create time series\n  datts &lt;- ts(Chumdat$lnreturns, start=Chumdat$year[1])\n  return(list(a = acf(datts, plot = FALSE), p = pacf(datts, plot = FALSE)))\n}\n#loop through regions/levels\nDiagPlots&lt;-lapply(regions, ACFandPACF)\nnames(DiagPlots)&lt;-regions\n\n\n\n\nCode\n#ACF plots for each region\npar(mfrow=c(3,4))\nfor(r in 1:length(regions)){\n  plot(DiagPlots[[r]][[1]], main = paste0(\"Region: \", regionskey[r]))\n}\n\n\n\n\n\nCode\n#PACF plots for each region\npar(mfrow=c(3,4))\nfor(r in 1:length(regions)){\n  plot(DiagPlots[[r]][[2]], main = paste0(\"Region: \", regionskey[r]))\n}\n\n\n\n\n\n\n\nCode\n#function for ARIMA models\nFitModFunction&lt;-function(reg, forelevel){\n  #This function takes a region and forecast level, subsets the data according to these parameters, then sets up the time series object, and the test and train sets. It uses auto.arima to find the \"best\" model and then this is checked by comparing other models with DeltaAICc &lt; 2 and the number of parameters. If auto.arima picked a the model with the lowest AIC and the fewest parameters, it forecasts using this model and checks forecast accuracy with MASE. If not, it refits the model using Arima and the simpler model, and then checks forecast accuracy with this.\n  #filter region\n  Chumdat&lt;-ChumByRegion %&gt;% filter(region == reg)\n  #create time series\n  datts &lt;- ts(Chumdat$lnreturns, start=Chumdat$year[1]) #this assumes the first year in data is the start of the time series (they are in order) \n  cutoff&lt;-2015-forelevel\n  train &lt;- window(datts, 1952, cutoff)\n  test &lt;- window(datts, cutoff+1, 2015)\n  \n  mod &lt;- auto.arima(train)\n  \n  #testing to be sure that this is the best model (is the best mode the simplest if it is within 2 AIC values?)\n  trace &lt;- capture.output({\n    # assign so it doesn't pollute the output\n    model &lt;- auto.arima(datts, trace = TRUE)\n  })\n  con    &lt;- textConnection(trace)\n  models &lt;- read.table(con, sep=\":\")\n  close(con)\n  \n  #getting the \"best models\" that are within 2 AIC units\n  BestMods&lt;-models%&gt;% filter(row_number() != nrow(models)) %&gt;% mutate(AIC = replace(V2, V2 == \"Inf\", 99999), AIC = as.numeric(AIC), DeltaAIC = AIC-min(AIC)) %&gt;% filter(DeltaAIC &lt;= 2.0)\n  for(i in 1:nrow(BestMods)){\n    BestMods$Mod[i]&lt;-strsplit(strsplit(strsplit(BestMods$V1[i], \"[(]\")[[1]][2], \"[)]\")[[1]][1],\"[,]\")\n    BestMods$npar[i]&lt;-sum(as.numeric(BestMods$Mod[i][[1]][c(1,3)]))\n    if(strsplit(strsplit(BestMods$V1[i], \"[(]\")[[1]][2], \"[)]\")[[1]][2] == \" with drift         \"){\n      BestMods$npar[i] = BestMods$npar[i] + 1\n    }\n  }\n  \n  New&lt;-BestMods %&gt;% filter(npar == min(npar))\n  if(0 %in% New$DeltaAIC){\n      #auto arima picked the best model\n      res&lt;-accuracy(forecast(mod, h=forelevel), test)[2,\"MASE\"] #test set MASE\n  }else{\n      #of the models with the fewest parameters, pick the lowest AIC\n      newmod&lt;-New %&gt;% filter(AIC == min(AIC)) %&gt;% select(Mod)\n      mod&lt;-Arima(train, order = as.numeric(strsplit(newmod$Mod[[1]], \"[,]\")), include.constant = TRUE)\n      res&lt;-accuracy(forecast(mod, h=forelevel), test)[2,\"MASE\"] #test set MASE\n    }\n\n  return(list(Fit = mod, MASE = res, Bm = BestMods)) #include best mods for testing to see that it's doing what I want\n}\n\n\n\n\nCode\nRegionModsChum&lt;-mapply(FitModFunction, Allcombs$regions, Allcombs$forecastlevels, SIMPLIFY = FALSE)\n\n\n\n\nCode\nRegionMASEChum&lt;-sapply(RegionModsChum, function(x){y&lt;-x$MASE})\nRegionBestModChum&lt;-sapply(RegionModsChum, function(x){y&lt;-as.character(x$Fit)})\n#combine into tables\nResultsTableChum&lt;-Allcombs %&gt;% add_column(Model = RegionBestModChum, MASE = RegionMASEChum)\nknitr::kable(head(ResultsTableChum))\n\n\n\n\n\nregions\nforecastlevels\nModel\nMASE\n\n\n\n\nci\n5\nARIMA(1,1,1)\n0.4232248\n\n\nci\n10\nARIMA(1,1,1)\n0.3650863\n\n\nci\n20\nARIMA(0,0,2) with non-zero mean\n1.3678453\n\n\ne_kam\n5\nARIMA(1,0,0) with non-zero mean\n2.0352335\n\n\ne_kam\n10\nARIMA(1,0,0) with non-zero mean\n1.6504750\n\n\ne_kam\n20\nARIMA(1,0,0) with non-zero mean\n1.4845904"
  },
  {
    "objectID": "Lab-1/Final_Write_ups/Lab-1-team-3_final.html#pink-combined-regions",
    "href": "Lab-1/Final_Write_ups/Lab-1-team-3_final.html#pink-combined-regions",
    "title": "5  Team 3 - Lab 1",
    "section": "Pink: Combined Regions",
    "text": "Pink: Combined Regions\nSubset the data to look at pink salmon only.\n\n\nCode\n#Filter by species (Pink)\ndat &lt;- ruggerone_data %&gt;%  \n  filter(species==\"pink\" & region==\"ci\") %&gt;% \n  mutate(log.returns = log(returns)) %&gt;% \n  select(year, log.returns)\n\n\nPlot the data\n\n\nCode\n#Plot by region\nruggerone_data %&gt;% \n  filter(species==\"pink\") %&gt;% \n  ggplot(aes(x=year, y=log(returns))) + \n  geom_line() + \n  ggtitle(\"pink salmon log abundance by region\") +\n  facet_wrap(~region)\n\n\n\n\n\nNote that there is no data in Korea, and WA has a lot of 0 values and very low returns. We will filter these regions out. All 0 values (-Inf in log space) were removed.\n\n\nCode\nPinkByRegion&lt;-ruggerone_data %&gt;%\n  filter(region != \"korea\") %&gt;% \n  filter(region != \"wa\") %&gt;%#Remove WA too, it's trouble \n  group_by(species, region, year) %&gt;%\n  summarize(total = sum(returns, na.rm=TRUE)) %&gt;% \n  mutate(lnreturns = log(total)) %&gt;%\n  mutate(lnreturns = ifelse(lnreturns == -Inf, NA, lnreturns)) %&gt;%\n  filter(species == \"pink\")%&gt;% \n  print(n=5)\n\n\n`summarise()` has grouped output by 'species', 'region'. You can override using\nthe `.groups` argument.\n\n\n# A tibble: 768 × 5\n# Groups:   species, region [12]\n  species region  year total lnreturns\n  &lt;chr&gt;   &lt;chr&gt;  &lt;dbl&gt; &lt;dbl&gt;     &lt;dbl&gt;\n1 pink    ci      1952  4.36     1.47 \n2 pink    ci      1953  1.30     0.264\n3 pink    ci      1954  4.67     1.54 \n4 pink    ci      1955  2.67     0.981\n5 pink    ci      1956  3.57     1.27 \n# ℹ 763 more rows\n\n\nIdentify start and end years for each region.\n\n\nCode\nPinkByRegion %&gt;% group_by(region) %&gt;% summarise(startyear = min(year), endyear = max(year))\n\n\n# A tibble: 12 × 3\n   region startyear endyear\n   &lt;chr&gt;      &lt;dbl&gt;   &lt;dbl&gt;\n 1 ci          1952    2015\n 2 e_kam       1952    2015\n 3 japan       1952    2015\n 4 kod         1952    2015\n 5 m_i         1952    2015\n 6 nbc         1952    2015\n 7 pws         1952    2015\n 8 s_pen       1952    2015\n 9 sbc         1952    2015\n10 seak        1952    2015\n11 w_kam       1952    2015\n12 wak         1952    2015\n\n\nThe next step is to ID Stationarity with all the pink data. Lets plot the data in aggregate.\n\n\nCode\nPinkByRegion %&gt;%\n  group_by(year) %&gt;%\n  summarize(total = sum(total, na.rm=T)) %&gt;%\n  ggplot(aes(x=year, y=log(total))) +\n  geom_line() +\n  ylab('Log (Returns)') +\n  xlab('Year')\n\n\n\n\n\nNext, a time series object was created and we look at the ACF and PACF\n\n\nCode\ntotal.pink&lt;-PinkByRegion %&gt;%\n  group_by(year) %&gt;%\n  summarize(lntotal=log(sum(total, na.rm=T)))\n\npink.ts&lt;-ts(total.pink$lntotal, \n            start=total.pink$year[1])\nplot(diff(pink.ts)) #something odd happened between 1990 and 2005\n\n\n\n\n\nCode\nacf(diff(pink.ts)) #ruh roh, ACF correlation for entire series \n\n\n\n\n\nThe ACF looks like there is a lot of corelation, that’s probably because Pinks have a very consistent two year cycle.\nLet’s try a forecast model to see what happens.\n\n\nCode\n#Let's train and test with a 10 year period\ntrain.pink&lt;-window(pink.ts, start=1952, end=2005)\ntest.pink&lt;-window(pink.ts, start=2006, end=2015)\n\nfit &lt;- forecast::auto.arima(train.pink, trace=T)\n\n\n\n ARIMA(2,1,2) with drift         : Inf\n ARIMA(0,1,0) with drift         : 44.48651\n ARIMA(1,1,0) with drift         : -0.8966894\n ARIMA(0,1,1) with drift         : 18.15923\n ARIMA(0,1,0)                    : 42.45004\n ARIMA(2,1,0) with drift         : -1.222687\n ARIMA(3,1,0) with drift         : -2.155628\n ARIMA(4,1,0) with drift         : 0.3831016\n ARIMA(3,1,1) with drift         : 0.2902468\n ARIMA(2,1,1) with drift         : Inf\n ARIMA(4,1,1) with drift         : Inf\n ARIMA(3,1,0)                    : -4.270823\n ARIMA(2,1,0)                    : -3.360303\n ARIMA(4,1,0)                    : -1.841485\n ARIMA(3,1,1)                    : -1.889482\n ARIMA(2,1,1)                    : Inf\n ARIMA(4,1,1)                    : 0.4019518\n\n Best model: ARIMA(3,1,0)                    \n\n\nCode\nfit.final.pink&lt;-forecast::auto.arima(train.pink, approximation = F, stepwise = F)\n\n#30 year forcast, not so believeable\nfit.final.pink %&gt;%\n  forecast(h=15) %&gt;%\n  autoplot() + geom_point(aes(x=x, y=y), data=fortify(test.pink))\n\n\n\n\n\nThe best model was the ARIMA(3,1,0), but the forecast doesn’t look particularly great.\nGiven the life history of pink salmon, let’s parse the data set into two pieces, even and odd years.\n\n\nCode\n#Even Years: Totals \nPinkByRegion_even&lt;-PinkByRegion %&gt;% \n  filter(year %% 2 == 0)\n\n#Odd Years: Totals \nPinkByRegion_odd&lt;-PinkByRegion %&gt;% \n  filter(year %% 2 == 1)\n\n#Trends\nPinkByRegion_even %&gt;%\n  group_by(year) %&gt;%\n  summarize(total = sum(total, na.rm=T)) %&gt;%\n  ggplot(aes(x=year, y=log(total))) +\n  geom_line() +\n  ylab('Log (Returns)') +\n  xlab('Year') +\n  ggtitle('Total Pinks (Even Years)')\n\n\n\n\n\nCode\nPinkByRegion_odd %&gt;%\n  group_by(year) %&gt;%\n  summarize(total = sum(total, na.rm=T)) %&gt;%\n  ggplot(aes(x=year, y=log(total))) +\n  geom_line() +\n  ylab('Log (Returns)') +\n  xlab('Year') +\n  ggtitle('Total Pinks (Odd Years)')\n\n\n\n\n\nLet’s look at the ACF and PACF for even years:\n\n\nCode\n#Even Years -- Total\ntotal.pink_even&lt;-PinkByRegion_even %&gt;%\n  group_by(year) %&gt;%\n  summarize(lntotal=log(sum(total, na.rm=T)))\n\npink.ts_even&lt;-ts(total.pink_even$lntotal, \n            start=total.pink$year[1], frequency = 0.5)\nplot(diff(pink.ts_even)) #Looks pretty stationary\n\n\n\n\n\nCode\nacf(diff(pink.ts_even)) #This looks much better\n\n\n\n\n\nThe differences and the ACF plots here look better than the aggregate data set. Let’s look at a forcast.\n\n\nCode\n#Train and test for a 10 year period\ntrain.pink_even&lt;-window(pink.ts_even, start=1952, end=2004)\ntest.pink_even&lt;-window(pink.ts_even, start=2006, end=2014)\n\nfit &lt;- forecast::auto.arima(train.pink_even, trace=T)\n\n\n\n ARIMA(2,1,2) with drift         : Inf\n ARIMA(0,1,0) with drift         : 2.346942\n ARIMA(1,1,0) with drift         : 4.419114\n ARIMA(0,1,1) with drift         : 4.222938\n ARIMA(0,1,0)                    : 0.1554815\n ARIMA(1,1,1) with drift         : Inf\n\n Best model: ARIMA(0,1,0)                    \n\n\nCode\nfit.final.pink_even&lt;-forecast::auto.arima(train.pink_even, approximation = F, stepwise = F)\n\nfit.final.pink_even %&gt;%\n  forecast(h=15) %&gt;%\n  autoplot() + geom_point(aes(x=x, y=y), data=fortify(test.pink_even))\n\n\n\n\n\nCode\n#That is a straight line..... not very good.....\n\n\nThe best model was the ARIMA(0,1,0) model. But the forcast doesn’t capture the trend.\nLet’s repeat the next steps for odd years.\n\n\nCode\n#Odd Years -- Total\n\ntotal.pink_odd&lt;-PinkByRegion_odd %&gt;%\n  group_by(year) %&gt;%\n  summarize(lntotal=log(sum(total, na.rm=T)))\n\npink.ts_odd&lt;-ts(total.pink_odd$lntotal, \n                 start=total.pink_odd$year[1], frequency = 0.5)\nplot(diff(pink.ts_odd)) #Looks pretty stationary\n\n\n\n\n\nCode\nacf(diff(pink.ts_odd)) #This also looks better\n\n\n\n\n\nThese look stationary and the ACF looks better.\n\n\nCode\n#Train and test for a 10 year period\ntrain.pink_odd&lt;-window(pink.ts_odd, start=1953, end=2005)\ntest.pink_odd&lt;-window(pink.ts_odd, start=2007, end=2015)\n\nfit &lt;- forecast::auto.arima(train.pink_odd, trace=T)\n\n\n\n ARIMA(2,1,2) with drift         : Inf\n ARIMA(0,1,0) with drift         : 4.01998\n ARIMA(1,1,0) with drift         : 5.551776\n ARIMA(0,1,1) with drift         : 4.461601\n ARIMA(0,1,0)                    : 1.771054\n ARIMA(1,1,1) with drift         : Inf\n\n Best model: ARIMA(0,1,0)                    \n\n\nCode\nfit.final.pink_odd&lt;-forecast::auto.arima(train.pink_odd, approximation = F, stepwise = F)\n\nfit.final.pink_odd %&gt;%\n  forecast(h=15) %&gt;%\n  autoplot() + geom_point(aes(x=x, y=y), data=fortify(test.pink_odd))\n\n\n\n\n\nThe best model was the ARIMA(0,1,0) model. But the forcast for only odd years also doesn’t capture the trend."
  },
  {
    "objectID": "Lab-1/Final_Write_ups/Lab-1-team-3_final.html#sockeye",
    "href": "Lab-1/Final_Write_ups/Lab-1-team-3_final.html#sockeye",
    "title": "5  Team 3 - Lab 1",
    "section": "Sockeye:",
    "text": "Sockeye:\nPlot MASE for three different forecast periods - 5, 10, and 20 years - across all regions. MASE &lt; 1 is a “good” value.\n\n\n\n\n\nNone of the ARIMA models performed well for the forecasts of 20 years of data. Below is a comparison of the three lengths of forecasted data for South British Columbia where MASE was below 1 for the 5 year forecast but &gt;1 for the 10 and 20 year forecasts.\n\n\nCode\nsock.sbc&lt;-subset(SockByRegion, region=='sbc')\nsbc.ts&lt;-ts(sock.sbc$lnreturns, start=sock.sbc$year[1])\n#create training and test datasets for the 5, 10, and 20 year forecasts\ntrain.sbc5&lt;-window(sbc.ts, start=1952, end=2010)\ntest.sbc5&lt;-window(sbc.ts, start=2011, end=2015)\nsbc.final5&lt;-forecast::auto.arima(train.sbc5, approximation = F, stepwise = F)\n\ntrain.sbc10&lt;-window(sbc.ts, start=1952, end=2005)\ntest.sbc10&lt;-window(sbc.ts, start=2006, end=2015)\nsbc.final10&lt;-forecast::auto.arima(train.sbc10, approximation = F, stepwise = F)\n\ntrain.sbc20&lt;-window(sbc.ts, start=1952, end=1995)\ntest.sbc20&lt;-window(sbc.ts, start=1996, end=2015)\nsbc.final20&lt;-forecast::auto.arima(train.sbc20, approximation = F, stepwise = F)\n\n\nHere are plots of the three forecast scenarios for sockeye in South British Columbia.\n\n\n\n\n\n\n\n\n\n\n\nLooking at stationarity:\n\n\nCode\nNdiff&lt;-sapply(RegionBestModSock, function(x){\n  a&lt;-strsplit(strsplit(strsplit(x, \"[(]\")[[1]][2], \"[)]\")[[1]][1],\"[,]\")\n  return(a[[1]][2])}\n)\n\ntibble(Ndiff = Ndiff, region = Allcombs$regions, level = Allcombs$forecastlevels) %&gt;%\n  ggplot() + geom_bar(aes(x = region, y = Ndiff, fill = as.factor(level)), stat = \"identity\", position = \"dodge\") +\n  scale_x_discrete(labels = as_labeller(regionskey)) +\n  labs(fill = \"Forecast Levels\", x = \"Region\", y = \"Number of Differences\") + \n  ggtitle(\"Number of differences to achieve stationarity (Sockeye)\") + theme_bw() + theme(axis.text.x=element_text(angle=-90, hjust = 0, vjust = 0.5 ))\n\n\n\n\n\nFor Sockeye, 6 regions required differencing for all of the three subsets of the data (3 forecasting levels). Two regions required differencing for one subset of the data; four regions were stationary at any level of subsetting.\nNone of the regional models for the 5-year forecast had autocorrelation in the residuals based on the results of the Ljung-Box test (p-value &gt; 0.05)."
  },
  {
    "objectID": "Lab-1/Final_Write_ups/Lab-1-team-3_final.html#chum",
    "href": "Lab-1/Final_Write_ups/Lab-1-team-3_final.html#chum",
    "title": "5  Team 3 - Lab 1",
    "section": "Chum:",
    "text": "Chum:\n\n\nCode\nggplot(ResultsTableChum) + \n  geom_bar(aes(x = regions, y = MASE, fill = as.factor(forecastlevels)), stat = \"identity\", position = \"dodge\") + \n  geom_hline(aes(yintercept = 1), linetype = \"dashed\") + \n  scale_x_discrete(labels = as_labeller(regionskey)) +\n  labs(fill = \"Forecast Levels\", x = \"Region\") + \n  ggtitle(\"Chum\") + theme_bw() + theme(axis.text.x=element_text(angle=-90, hjust = 0, vjust = 0.5 ))\n\n\n\n\n\nMany of the 5 and 10 year forecasts for Chum seem to perform well across regions. Models fit to data in Russia do the worst at forecasting in that region. Additionally, forecasts are poor across the different numbers of years tested in E. Kamachatka, SE Alaska and W. Kamachatka.\n20 year forecast for Kodiak:\n\n\nCode\nchum.kod&lt;-subset(ChumByRegion, region=='kod')\nchum.ts&lt;-ts(chum.kod$lnreturns, start=chum.kod$year[1])\n#test datasets for plotting\ntest.kod20&lt;-window(chum.ts, start=1996, end=2015)\nforecast(RegionModsChum[[9]]$Fit, h = 20) %&gt;% autoplot() + geom_point(aes(x=x, y=y), data=fortify(test.kod20))\n\n\n\n\n\n10 year forecast for Russia:\n\n\nCode\nchum.russ&lt;-subset(ChumByRegion, region=='m_i')\nchum.ts&lt;-ts(chum.russ$lnreturns, start=chum.russ$year[1])\n#test datasets for plotting\ntest.russ10&lt;-window(chum.ts, start=2006, end=2015)\nforecast(RegionModsChum[[11]]$Fit, h = 10) %&gt;% autoplot() + geom_point(aes(x=x, y=y), data=fortify(test.russ10))\n\n\n\n\n\nIt looks like returns really increase at the end of the time series in this region, which is likely why ARIMA models don’t forecast this well.\nLooking at stationarity:\n\n\nCode\nNdiff&lt;-sapply(RegionBestModChum, function(x){\n  a&lt;-strsplit(strsplit(strsplit(x, \"[(]\")[[1]][2], \"[)]\")[[1]][1],\"[,]\")\n  return(a[[1]][2])}\n)\n\ntibble(Ndiff = Ndiff, region = Allcombs$regions, level = Allcombs$forecastlevels) %&gt;%\n  ggplot() + geom_bar(aes(x = region, y = Ndiff, fill = as.factor(level)), stat = \"identity\", position = \"dodge\") +\n  scale_x_discrete(labels = as_labeller(regionskey)) +\n  labs(fill = \"Forecast Levels\", x = \"Region\", y = \"Number of Differences\") + \n  ggtitle(\"Number of differences to achieve stationarity (Chum)\") + theme_bw() + theme(axis.text.x=element_text(angle=-90, hjust = 0, vjust = 0.5 ))\n\n\n\n\n\nFor Chum, time series for 5 of the regions were stationary (using tests from auto.arima) and 7 required 1 difference to be stationary.\nThere was significant autocorrelation (based on Ljung-Box test) in 4 of the regional models for Chum:\n\n\nCode\nac_mods_chum&lt;-c(26, 27, 31, 32) #indexes of models with autocorrelated residuals\nfor(i in 1:length(ac_mods_chum)){\n  print(paste(regionskey[ResultsTableChum$regions[ac_mods_chum[i]]], ResultsTableChum$forecastlevels[ac_mods_chum[i]]))\n  checkresiduals(RegionModsChum[[ac_mods_chum[i]]]$Fit)\n}\n\n\n[1] \"SE Alaska 10\"\n\n\n\n\n\n\n    Ljung-Box test\n\ndata:  Residuals from ARIMA(1,0,0) with non-zero mean\nQ* = 25.498, df = 9, p-value = 0.002467\n\nModel df: 1.   Total lags used: 10\n\n[1] \"SE Alaska 20\"\n\n\n\n\n\n\n    Ljung-Box test\n\ndata:  Residuals from ARIMA(1,0,0) with non-zero mean\nQ* = 15.578, df = 8, p-value = 0.04884\n\nModel df: 1.   Total lags used: 9\n\n[1] \"NA 5\"\n\n\n\n\n\n\n    Ljung-Box test\n\ndata:  Residuals from ARIMA(0,1,1)\nQ* = 35.287, df = 9, p-value = 5.302e-05\n\nModel df: 1.   Total lags used: 10\n\n[1] \"NA 10\"\n\n\n\n\n\n\n    Ljung-Box test\n\ndata:  Residuals from ARIMA(0,1,1)\nQ* = 34.843, df = 9, p-value = 6.35e-05\n\nModel df: 1.   Total lags used: 10\n\n\nThis suggests that ARIMA models may not be the best fit in this instance."
  },
  {
    "objectID": "Lab-1/Final_Write_ups/Lab-1-team-3_final.html#pink",
    "href": "Lab-1/Final_Write_ups/Lab-1-team-3_final.html#pink",
    "title": "5  Team 3 - Lab 1",
    "section": "Pink:",
    "text": "Pink:\nPlot MASE for three different forecast periods - 5, 10, and 20 years - across all regions. MASE &lt; 1 is a “good” value.\n\n\nCode\n#All Years\nggplot(ResultsTable) + \n  geom_bar(aes(x = regions, y = MASE, fill = as.factor(forecastlevels)), stat = \"identity\", position = \"dodge\") + \n  geom_hline(aes(yintercept = 1), linetype = \"dashed\") + \n  scale_x_discrete(labels = as_labeller(regionskey)) +\n  labs(fill = \"Forecast Levels\", x = \"Region\") + \n  ggtitle(\"Pinks all Years\") + theme_bw() + theme(axis.text.x=element_text(angle=-90, hjust = 0, vjust = 0.5 ))\n\n\n\n\n\nCode\n#Even Years \nggplot(ResultsTable_even) + \n  geom_bar(aes(x = regions, y = MASE, fill = as.factor(forecastlevels)), stat = \"identity\", position = \"dodge\") + \n  geom_hline(aes(yintercept = 1), linetype = \"dashed\") + \n  scale_x_discrete(labels = as_labeller(regionskey)) +\n  labs(fill = \"Forecast Levels\", x = \"Region\") + \n  ggtitle(\"Pinks Even Years\") + theme_bw() + theme(axis.text.x=element_text(angle=-90, hjust = 0, vjust = 0.5 ))\n\n\n\n\n\nCode\n#Odd Years \nggplot(ResultsTable_odd) + \n  geom_bar(aes(x = regions, y = MASE, fill = as.factor(forecastlevels)), stat = \"identity\", position = \"dodge\") + \n  geom_hline(aes(yintercept = 1), linetype = \"dashed\") + \n  scale_x_discrete(labels = as_labeller(regionskey)) +\n  labs(fill = \"Forecast Levels\", x = \"Region\") + \n  ggtitle(\"Pinks Odd Years\") + theme_bw() + theme(axis.text.x=element_text(angle=-90, hjust = 0, vjust = 0.5 ))\n\n\n\n\n\nDespite the MASE fits seeming pretty good for the pink model runs some of the forecasts were underwhelming. Two regions were considered for forcasts, Cook Inlet, and SE Alaska with models that included for all years, even years, and odd years.\nThe first region, Cook Inlet, performed poorly (relative to some of the other regions) when looking at MASE values.\n\n\nCode\n#Cook Inlet\n#----------------------------------------------------\n#All Years\npink.ci&lt;-subset(PinkByRegion, region=='ci')\nci.ts&lt;-ts(pink.ci$lnreturns, start=pink.ci$year[1], frequency = 1)\n\n#create training and test datasets for the 5 year forecast \ntrain.ci5&lt;-window(ci.ts, start=1952, end=2010)\ntest.ci5&lt;-window(ci.ts, start=2011, end=2015)\nci.final5&lt;-forecast::auto.arima(train.ci5, approximation = F, stepwise = F)\n\n#create training and test datasets for the 10 year forecast \ntrain.ci10&lt;-window(ci.ts, start=1952, end=2005)\ntest.ci10&lt;-window(ci.ts, start=2006, end=2015)\nci.final10&lt;-forecast::auto.arima(train.ci10, approximation = F, stepwise = F)\n\n#create training and test datasets for the 20 year forecast \ntrain.ci20&lt;-window(ci.ts, start=1952, end=1995)\ntest.ci20&lt;-window(ci.ts, start=1996, end=2015)\nci.final20&lt;-forecast::auto.arima(train.ci20, approximation = F, stepwise = F)\n\n#------------------------------\n#Even Years\npink.ci_even&lt;-subset(PinkByRegion_even, region=='ci')\nci.ts_even&lt;-ts(pink.ci_even$lnreturns, start=pink.ci_even$year[1], frequency = 0.5)\n\n#create training and test datasets for the 5 year forecast \ntrain.ci_even5&lt;-window(ci.ts_even, start=1952, end=2010)\ntest.ci_even5&lt;-window(ci.ts_even, start=2011, end=2014)\nci_even.final5&lt;-forecast::auto.arima(train.ci_even5, approximation = F, stepwise = F)\n\n#create training and test datasets for the 10 year forecast \ntrain.ci_even10&lt;-window(ci.ts_even, start=1952, end=2005)\ntest.ci_even10&lt;-window(ci.ts_even, start=2006, end=2014)\nci_even.final10&lt;-forecast::auto.arima(train.ci_even10, approximation = F, stepwise = F)\n\n#create training and test datasets for the 20 year forecast \ntrain.ci_even20&lt;-window(ci.ts_even, start=1952, end=1995)\ntest.ci_even20&lt;-window(ci.ts_even, start=1996, end=2014)\nci_even.final20&lt;-forecast::auto.arima(train.ci_even20, approximation = F, stepwise = F)\n\n#------------------------------\n#Odd Years\npink.ci_odd&lt;-subset(PinkByRegion_odd, region=='ci')\nci.ts_odd&lt;-ts(pink.ci_odd$lnreturns, start=pink.ci_odd$year[1], frequency = 0.5)\n\n#create training and test datasets for the 5 year forecast \ntrain.ci_odd5&lt;-window(ci.ts_odd, start=1953, end=2009)\ntest.ci_odd5&lt;-window(ci.ts_odd, start=2011, end=2015)\nci_odd.final5&lt;-forecast::auto.arima(train.ci_odd5, approximation = F, stepwise = F)\n\n#create training and test datasets for the 10 year forecast \ntrain.ci_odd10&lt;-window(ci.ts_odd, start=1953, end=2005)\ntest.ci_odd10&lt;-window(ci.ts_odd, start=2007, end=2015)\nci_odd.final10&lt;-forecast::auto.arima(train.ci_odd10, approximation = F, stepwise = F)\n\n#create training and test datasets for the 20 year forecast \ntrain.ci_odd20&lt;-window(ci.ts_odd, start=1953, end=1995)\ntest.ci_odd20&lt;-window(ci.ts_odd, start=1997, end=2015)\nci_odd.final20&lt;-forecast::auto.arima(train.ci_odd20, approximation = F, stepwise = F)\n\n\nLet’s look at forcast plots for the best performing models that consider all data, even years, and odd years.\n\n\nCode\n#Plots\nplot_5 &lt;- ci.final5 %&gt;%\n  forecast(h=5) %&gt;%\n  autoplot() + geom_point(aes(x=x, y=y), data=fortify(test.ci5))\n\nplot_10 &lt;- ci.final10 %&gt;%\n  forecast(h=10) %&gt;%\n  autoplot() + geom_point(aes(x=x, y=y), data=fortify(test.ci10))\n\nplot_20 &lt;- ci.final20 %&gt;%\n  forecast(h=20) %&gt;%\n  autoplot() + geom_point(aes(x=x, y=y), data=fortify(test.ci20))\n\nplot_even_5 &lt;- ci_even.final5 %&gt;%\n  forecast(h=5) %&gt;%\n  autoplot() + geom_point(aes(x=x, y=y), data=fortify(test.ci_even5))\n\nplot_even_10 &lt;- ci_even.final10 %&gt;%\n  forecast(h=10) %&gt;%\n  autoplot() + geom_point(aes(x=x, y=y), data=fortify(test.ci_even10))\n\nplot_even_20 &lt;- ci_even.final20 %&gt;%\n  forecast(h=20) %&gt;%\n  autoplot() + geom_point(aes(x=x, y=y), data=fortify(test.ci_even20))\n\nplot_odd_5 &lt;- ci_odd.final5 %&gt;%\n  forecast(h=5) %&gt;%\n  autoplot() + geom_point(aes(x=x, y=y), data=fortify(test.ci_odd5))\n\nplot_odd_10 &lt;- ci_odd.final10 %&gt;%\n  forecast(h=10) %&gt;%\n  autoplot() + geom_point(aes(x=x, y=y), data=fortify(test.ci_odd10))\n\nplot_odd_20 &lt;- ci_odd.final20 %&gt;%\n  forecast(h=20) %&gt;%\n  autoplot() + geom_point(aes(x=x, y=y), data=fortify(test.ci_odd20))\n\nplot_grid(plot_5, plot_10, plot_20, plot_even_5, plot_even_10, plot_even_20, plot_odd_5, plot_odd_10, plot_odd_20, ncol = 3, nrow = 3)\n\n\n\n\n\nNone of the models fit well. Let’s look at one more region.\n\n\nCode\n#SE AK\n#---------------------------------------------------\n#All Years\npink.seak&lt;-subset(PinkByRegion, region=='seak')\nseak.ts&lt;-ts(pink.seak$lnreturns, start=pink.seak$year[1], frequency = 0.5)\n\n#create training and test datasets for the 5 year forecast \ntrain.seak5&lt;-window(seak.ts, start=1952, end=2010)\ntest.seak5&lt;-window(seak.ts, start=2011, end=2015)\nseak.final5&lt;-forecast::auto.arima(train.seak5, approximation = F, stepwise = F)\n\n#create training and test datasets for the 10 year forecast \ntrain.seak10&lt;-window(seak.ts, start=1952, end=2005)\ntest.seak10&lt;-window(seak.ts, start=2006, end=2015)\nseak.final10&lt;-forecast::auto.arima(train.seak10, approximation = F, stepwise = F)\n\n#create training and test datasets for the 20 year forecast \ntrain.seak20&lt;-window(seak.ts, start=1952, end=1995)\ntest.seak20&lt;-window(seak.ts, start=1996, end=2015)\nseak.final20&lt;-forecast::auto.arima(train.seak20, approximation = F, stepwise = F)\n\n#----------------------------------------------------\n#Even Years\npink.seak_even&lt;-subset(PinkByRegion_even, region=='seak')\nseak.ts_even&lt;-ts(pink.seak_even$lnreturns, start=pink.seak_even$year[1], frequency = 0.5)\n\n#create training and test datasets for the 5 year forecast \ntrain.seak_even5&lt;-window(seak.ts_even, start=1952, end=2010)\ntest.seak_even5&lt;-window(seak.ts_even, start=2012, end=2014)\nseak_even.final5&lt;-forecast::auto.arima(train.seak_even5, approximation = F, stepwise = F)\n\n#create training and test datasets for the 10 year forecast \ntrain.seak_even10&lt;-window(seak.ts_even, start=1952, end=2004)\ntest.seak_even10&lt;-window(seak.ts_even, start=2006, end=2014)\nseak_even.final10&lt;-forecast::auto.arima(train.seak_even10, approximation = F, stepwise = F)\n\n#create training and test datasets for the 20 year forecast \ntrain.seak_even20&lt;-window(seak.ts_even, start=1952, end=1994)\ntest.seak_even20&lt;-window(seak.ts_even, start=1996, end=2014)\nseak_even.final20&lt;-forecast::auto.arima(train.seak_even20, approximation = F, stepwise = F)\n\n#------------------------------\n#Odd Years\npink.seak_odd&lt;-subset(PinkByRegion_odd, region=='seak')\nseak.ts_odd&lt;-ts(pink.seak_odd$lnreturns, start=pink.seak_odd$year[1], frequency = 0.5)\n\n#create training and test datasets for the 5 year forecast \ntrain.seak_odd5&lt;-window(seak.ts_odd, start=1953, end=2009)\ntest.seak_odd5&lt;-window(seak.ts_odd, start=2011, end=2015)\nseak_odd.final5&lt;-forecast::auto.arima(train.seak_odd5, approximation = F, stepwise = F)\n\n#create training and test datasets for the 10 year forecast \ntrain.seak_odd10&lt;-window(seak.ts_odd, start=1953, end=2005)\ntest.seak_odd10&lt;-window(seak.ts_odd, start=2007, end=2015)\nseak_odd.final10&lt;-forecast::auto.arima(train.seak_odd10, approximation = F, stepwise = F)\n\n#create training and test datasets for the 20 year forecast \ntrain.seak_odd20&lt;-window(seak.ts_odd, start=1953, end=1995)\ntest.seak_odd20&lt;-window(seak.ts_odd, start=1997, end=2015)\nseak_odd.final20&lt;-forecast::auto.arima(train.seak_odd20, approximation = F, stepwise = F)\n\n\nLet’s look at forcast plots for the best performing models that consider all data, even years, and odd years.\n\n\nCode\n#Plots \nplot_5 &lt;- seak.final5 %&gt;%\n  forecast(h=5) %&gt;%\n  autoplot() + geom_point(aes(x=x, y=y), data=fortify(test.seak5))\n\nplot_10 &lt;- seak.final10 %&gt;%\n  forecast(h=10) %&gt;%\n  autoplot() + geom_point(aes(x=x, y=y), data=fortify(test.seak10))\n\nplot_20 &lt;- seak.final20 %&gt;%\n  forecast(h=20) %&gt;%\n  autoplot() + geom_point(aes(x=x, y=y), data=fortify(test.seak20))\n\nplot_even_5 &lt;- seak_even.final5 %&gt;%\n  forecast(h=5) %&gt;%\n  autoplot() + geom_point(aes(x=x, y=y), data=fortify(test.seak_even5))\n\nplot_even_10 &lt;- seak_even.final10 %&gt;%\n  forecast(h=10) %&gt;%\n  autoplot() + geom_point(aes(x=x, y=y), data=fortify(test.seak_even10))\n\nplot_even_20 &lt;- seak_even.final20 %&gt;%\n  forecast(h=20) %&gt;%\n  autoplot() + geom_point(aes(x=x, y=y), data=fortify(test.seak_even20))\n\nplot_odd_5 &lt;- seak_odd.final5 %&gt;%\n  forecast(h=5) %&gt;%\n  autoplot() + geom_point(aes(x=x, y=y), data=fortify(test.seak_odd5))\n\nplot_odd_10 &lt;- seak_odd.final10 %&gt;%\n  forecast(h=10) %&gt;%\n  autoplot() + geom_point(aes(x=x, y=y), data=fortify(test.seak_odd10))\n\nplot_odd_20 &lt;- seak_odd.final20 %&gt;%\n  forecast(h=20) %&gt;%\n  autoplot() + geom_point(aes(x=x, y=y), data=fortify(test.seak_odd20))\n\nplot_grid(plot_5, plot_10, plot_20, plot_even_5, plot_even_10, plot_even_20, plot_odd_5, plot_odd_10, plot_odd_20, ncol = 3, nrow = 3)\n\n\n\n\n\nThese models were all pretty flat and also didn’t seem to capture the trends particularly well.\nNext, the number of models that had a differencing was plotted for all years, even years, and odd years.\n\n\nCode\n#All Years \nNdiff&lt;-sapply(RegionBestMod, function(x){\n  a&lt;-strsplit(strsplit(strsplit(x, \"[(]\")[[1]][2], \"[)]\")[[1]][1],\"[,]\")\n  return(a[[1]][2])}\n)\n\ntibble(Ndiff = Ndiff, region = Allcombs$regions, level = Allcombs$forecastlevels) %&gt;%\n  ggplot() + geom_bar(aes(x = region, y = Ndiff, fill = as.factor(level)), stat = \"identity\", position = \"dodge\") +\n  scale_x_discrete(labels = as_labeller(regionskey)) +\n  labs(fill = \"Forecast Levels\", x = \"Region\", y = \"Number of Differences\") + \n  ggtitle(\"Number of differences to achieve stationarity (Pink-All Years)\") + theme_bw() + theme(axis.text.x=element_text(angle=-90, hjust = 0, vjust = 0.5 ))\n\n\n\n\n\nCode\n#Even Years \nNdiff_even&lt;-sapply(RegionBestMod_even, function(x){\n  a&lt;-strsplit(strsplit(strsplit(x, \"[(]\")[[1]][2], \"[)]\")[[1]][1],\"[,]\")\n  return(a[[1]][2])}\n)\n\ntibble(Ndiff = Ndiff_even, region = Allcombs$regions, level = Allcombs$forecastlevels) %&gt;%\n  ggplot() + geom_bar(aes(x = region, y = Ndiff, fill = as.factor(level)), stat = \"identity\", position = \"dodge\") +\n  scale_x_discrete(labels = as_labeller(regionskey)) +\n  labs(fill = \"Forecast Levels\", x = \"Region\", y = \"Number of Differences\") + \n  ggtitle(\"Number of differences to achieve stationarity (Pink-Even Years)\") + theme_bw() + theme(axis.text.x=element_text(angle=-90, hjust = 0, vjust = 0.5 ))\n\n\n\n\n\nCode\n#Odd Years \nNdiff_odd&lt;-sapply(RegionBestMod_odd, function(x){\n  a&lt;-strsplit(strsplit(strsplit(x, \"[(]\")[[1]][2], \"[)]\")[[1]][1],\"[,]\")\n  return(a[[1]][2])}\n)\n\ntibble(Ndiff = Ndiff_odd, region = Allcombs$regions, level = Allcombs$forecastlevels) %&gt;%\n  ggplot() + geom_bar(aes(x = region, y = Ndiff, fill = as.factor(level)), stat = \"identity\", position = \"dodge\") +\n  scale_x_discrete(labels = as_labeller(regionskey)) +\n  labs(fill = \"Forecast Levels\", x = \"Region\", y = \"Number of Differences\") + \n  ggtitle(\"Number of differences to achieve stationarity (Pink-Odd Years)\") + theme_bw() + theme(axis.text.x=element_text(angle=-90, hjust = 0, vjust = 0.5 ))\n\n\n\n\n\nWhen considering models that used all data, five regions needed differencing. In models that considered even years only, six regions needed differencing. In models that considered odd years only, ten regions needed differencing.\nFinally we’re going to look at some residuals for models that displayed autocorraltion based on Ljung-Box test. There were only\n\n\nCode\n#Residuals \n#all\nac_mods_Pink&lt;- c(10, 11, 15, 29)\n\nfor(i in 1:length(ac_mods_Pink)){\nprint(paste(regionskey[ResultsTable$regions[ac_mods_Pink[i]]], ResultsTable_even$forecastlevels[ac_mods_Pink[i]]))\ncheckresiduals(RegionMods[[ac_mods_Pink[i]]]$Fit)\n}\n\n\n[1] \"Kodiak 5\"\n\n\n\n\n\n\n    Ljung-Box test\n\ndata:  Residuals from ARIMA(0,1,1) with drift\nQ* = 12.949, df = 5, p-value = 0.02386\n\nModel df: 1.   Total lags used: 6\n\n[1] \"Kodiak 10\"\n\n\n\n\n\n\n    Ljung-Box test\n\ndata:  Residuals from ARIMA(0,1,1) with drift\nQ* = 13.668, df = 4, p-value = 0.008432\n\nModel df: 1.   Total lags used: 5\n\n[1] \"Russia 20\"\n\n\n\n\n\n\n    Ljung-Box test\n\ndata:  Residuals from ARIMA(0,0,0) with non-zero mean\nQ* = 13.669, df = 4, p-value = 0.008429\n\nModel df: 0.   Total lags used: 4\n\n[1] \"SE Alaska 10\"\n\n\n\n\n\n\n    Ljung-Box test\n\ndata:  Residuals from ARIMA(0,1,1) with drift\nQ* = 7.1988, df = 4, p-value = 0.1257\n\nModel df: 1.   Total lags used: 5\n\n\nCode\n#Even\nac_mods_Pink_even&lt;-c(19, 20) \n\nfor(i in 1:length(ac_mods_Pink_even)){\nprint(paste(regionskey[ResultsTable_even$regions[ac_mods_Pink_even[i]]], ResultsTable_even$forecastlevels[ac_mods_Pink_even[i]]))\ncheckresiduals(RegionMods_even[[ac_mods_Pink_even[i]]]$Fit)\n}\n\n\n[1] \"Prince William Sound 5\"\n\n\n\n\n\n\n    Ljung-Box test\n\ndata:  Residuals from ARIMA(0,0,0) with non-zero mean\nQ* = 19.847, df = 6, p-value = 0.002949\n\nModel df: 0.   Total lags used: 6\n\n[1] \"Prince William Sound 10\"\n\n\n\n\n\n\n    Ljung-Box test\n\ndata:  Residuals from ARIMA(0,0,0) with non-zero mean\nQ* = 11.944, df = 5, p-value = 0.03556\n\nModel df: 0.   Total lags used: 5\n\n\nCode\n#Odd\nac_mods_Pink_odd&lt;-c(8) \n\nfor(i in 1:length(ac_mods_Pink_odd)){\n  print(paste(regionskey[ResultsTable_odd$regions[ac_mods_Pink_odd[i]]], ResultsTable_odd$forecastlevels[ac_mods_Pink_odd[i]]))\n  checkresiduals(RegionMods_odd[[ac_mods_Pink_odd[i]]]$Fit)\n}\n\n\n[1] \"Japan 10\"\n\n\n\n\n\n\n    Ljung-Box test\n\ndata:  Residuals from ARIMA(0,1,0)\nQ* = 11.71, df = 5, p-value = 0.03899\n\nModel df: 0.   Total lags used: 5\n\n\n#———————————————————————"
  },
  {
    "objectID": "Lab-1/Final_Write_ups/Lab-1-team-4_final.html",
    "href": "Lab-1/Final_Write_ups/Lab-1-team-4_final.html",
    "title": "6  Team 4 - Lab 1",
    "section": "",
    "text": "Data\nRuggerone & Irvine Data. We will focus on sockeye salmon and all their 15 regional stocks in the North Pacific.\nOverall, the sockeye stocks population trajectories are clearly not stationary. All regions benefit from ARIMA models to understand their underlying temporal dynamics. There is no unifying ARIMA structure that can reliably describe all sockeye populations. This is unsurprising because of the wide spectrum of biological and environmental forces that impact sockeye across its species range. Scattered across the North Pacific are 3 sockeye ecotypes (kokanee, lake, sea/river) that often occur together in the same watershed. Some regions, such as Southern British Columbia, also undergo more human disturbance than other more “pristine” regions, such as Western Alaska.\nAlaska regional stocks seem to share similar temporal dynamics and this is especially true for wak, ci, and pws stocks. We do not what the mechanisms for the shared pattern of these 3 stocks, which are not spatially adjacent to each other. We did not detect reliably, representative ARIMA structures for both the West Coast and East Asia stocks. The low sample size of 3 for both areas is a likely reason for the inconclusiveness.\nInterestingly, the area-wide ARIMA structures did not confirm the area-summarized regional ARIMA ones. Summing the scaled totals by area seems to wash away the temporal dynamics within each region and do not describe the general ARIMA structure and diversity of structures within areas. A next step would explore the potential area-wide ARIMA model candidates for each area since we looked only at the best fitting ones.\nTerrance did most of it, Karl did stationarity section."
  },
  {
    "objectID": "Lab-1/Final_Write_ups/Lab-1-team-4_final.html#regional-arima-models",
    "href": "Lab-1/Final_Write_ups/Lab-1-team-4_final.html#regional-arima-models",
    "title": "6  Team 4 - Lab 1",
    "section": "Regional ARIMA models",
    "text": "Regional ARIMA models\nWe fit ARIMA models to each individual regional stock and report the fits and diagnostics in the table below.\n\n\nCode\n# make a data frame to fill in values for each stock\nstock_arima = data.frame(matrix(ncol = 4))\nnames = c(\"region\",\"p\",\"d\",\"q\")\ncolnames(stock_arima) = names\nsock_stocks = unique(sockeye_data$region)\n\n# loop through each stock and auto arima and save outputs\nfor (i in 1:length(sock_stocks)){\n# subset data to each region\nstock=sock_stocks[i]\nstock_data = sockeye_data%&gt;% filter(region==stock)\ndatts = ts(stock_data$lnreturns, start=stock_data$year[1])\n\n# arima tests \nmod = auto.arima(datts)\nmod$coef\narima_order = arimaorder(mod)\n\n# look at model resids\nresid = checkresiduals(mod,plot=F)\n\n# save all this data\nstock_arima[i,c(\"p\",\"d\",\"q\")] = arima_order\nstock_arima[i,c(names(mod$coef))] = mod$coef\nstock_arima[i,c(\"region\")] = stock\nstock_arima[i,c(\"resid_p\")] = resid$p.value\n\n}\n\nstock_arima_area = stock_arima %&gt;% \n  # fill in NAs with 0s\n  mutate_if(is.numeric, ~replace_na(., 0)) %&gt;% \n  # add area\n  mutate(\n    area = case_match(\n      region, \n      c(\"japan\", \"korea\", \"m_i\", \"e_kam\", \"w_kam\") ~ \"East_Asia\",\n      c(\"wak\", \"s_pen\", \"kod\", \"ci\", \"pws\", \"seak\") ~ \"Alaska\",\n      c(\"nbc\", \"sbc\", \"wa\", \"wc\") ~ \"WC\",\n      .default = region)) \n\n\n\n\nCode\nkable(stock_arima_area%&gt;% select(area,region, p, d, q,ar1,ar2,ma1,ma2,resid_p)%&gt;%arrange(area),\n      caption = \"ARIMA fitting results and residual diagnostics for all sockeye regions\")\n\n\n\nARIMA fitting results and residual diagnostics for all sockeye regions\n\n\n\n\n\n\n\n\n\n\n\n\n\n\narea\nregion\np\nd\nq\nar1\nar2\nma1\nma2\nresid_p\n\n\n\n\nAlaska\nci\n1\n1\n1\n0.3771937\n0.0000000\n-0.7575114\n0.0000000\n0.0955948\n\n\nAlaska\nkod\n0\n1\n1\n0.0000000\n0.0000000\n-0.6049560\n0.0000000\n0.3682442\n\n\nAlaska\npws\n1\n1\n1\n0.4031980\n0.0000000\n-0.9583822\n0.0000000\n0.0312119\n\n\nAlaska\nseak\n0\n1\n1\n0.0000000\n0.0000000\n-0.4807931\n0.0000000\n0.3015960\n\n\nAlaska\ns_pen\n0\n1\n1\n0.0000000\n0.0000000\n-0.7605650\n0.0000000\n0.9076421\n\n\nAlaska\nwak\n2\n1\n2\n0.5174071\n-0.9318466\n-0.7103177\n0.7039975\n0.2357500\n\n\nEast_Asia\ne_kam\n1\n0\n0\n0.7956410\n0.0000000\n0.0000000\n0.0000000\n0.4879928\n\n\nEast_Asia\nm_i\n1\n0\n0\n0.5291796\n0.0000000\n0.0000000\n0.0000000\n0.5479562\n\n\nEast_Asia\nw_kam\n0\n1\n1\n0.0000000\n0.0000000\n-0.3667696\n0.0000000\n0.0992328\n\n\nWC\nnbc\n1\n0\n1\n0.9296554\n0.0000000\n-0.7239860\n0.0000000\n0.3154644\n\n\nWC\nsbc\n0\n0\n0\n0.0000000\n0.0000000\n0.0000000\n0.0000000\n0.0015210\n\n\nWC\nwc\n1\n0\n2\n-0.9320727\n0.0000000\n1.2724536\n0.4421506\n0.6338888\n\n\n\n\n\nThe best fitting ARIMA models show a wide diversity of structure. Similarities and differences within and among areas will be discussed in more detail in the next section. Residuals are generally stationary, meaning acceptable ARIMA fits, with a few exceptions (e.g., kod, sbc). Below, the example of w_kam shows that residuals show signs of stationarity like a stable mean, normal distribution of values, and little autocorrelation. Though there is some temporal pattern in the variance.\n\n\nCode\nresid = checkresiduals(mod,plot=T)\n\n\n\n\n\nExample of residual diagnostics of one of the regions\n\n\n\n\n\n    Ljung-Box test\n\ndata:  Residuals from ARIMA(0,1,1)\nQ* = 14.709, df = 9, p-value = 0.09923\n\nModel df: 1.   Total lags used: 10\n\n\n\n\nCode\n# make into long format for ggplotting\nstock_gg_long = stock_arima_area %&gt;% \n  pivot_longer(-c(region,area), names_to = \"parameter\", values_to = \"param_est\")\n\n# General ARIMA structure\nstock_gg_long %&gt;% filter(parameter %in% c(\"p\",\"d\",\"q\")) %&gt;%\n  ggplot(aes(x=param_est,fill=area)) + geom_bar() +\n  facet_wrap(vars(parameter),ncol=1) + theme_bw()\n\n\n\n\n\nARIMA structure by area\n\n\n\n\nCode\n# Autoregressive plot\nstock_gg_long %&gt;% filter(parameter %in% c(\"ar1\",\"ar2\")) %&gt;%\n  ggplot(aes(x=param_est,y=area,color=area)) + geom_boxplot(outlier.shape = NA) +\n  geom_jitter()+\n  facet_wrap(vars(parameter),ncol=1, scales = \"free\")+ theme_bw()\n\n\n\n\n\nAR parameters by area\n\n\n\n\nCode\n# Moving average plot\nstock_gg_long %&gt;% filter(parameter %in% c(\"ma1\",\"ma2\")) %&gt;%\n  ggplot(aes(x=param_est,y=area,color=area)) + geom_boxplot(outlier.shape = NA) +\n  geom_jitter()+\n  facet_wrap(vars(parameter),ncol=1, scales = \"free\")+ theme_bw()\n\n\n\n\n\nMA parameters by area\n\n\n\n\n\nComparing regional ARIMA models within and among area\nThe ARIMA structure for all sockeye stocks (ignoring area) do not show a clear pattern in AR, differencing, and MA. A slight majority of stocks support first order AR, differencing, and MA. When we look closer at the parameter values, there is a small tendency for sockeye to have positive AR1 values and negative MA1 values. This suggests sockeye populations are loosely related to the previous time step and deviate around the general trajectory with a 2 year period.\nAlaska shows a consistent ARIMA pattern for all of its regions. The best fit ARIMA models for AK regions all predict first difference. AK strongly supports a first order of the moving average part. Additionally, all AK regions have negative MA1 values. There is some substructure of ARIMA properties within AK. AK shows no area-wide consensus on the order of the autoregressive part, but Looking more closely at the autoregressive parameter values of Alaska regions, we see only positive AR1 values for the regions with at least 1 order of AR (wak,ci,pws). Wak, ci, and pws populations tend to be more related to the previous year than other AK regions are.\nWest Coast regions do not have a consensus on ARIMA structure, with an exception of 0 differencing. AR1 and MA1 parameters range from negative to positive. This inconclusiveness is partly explained by the low sample size (n=3). East Asia regions are also inconsistent on the predicted order number of the moving average and autoregressive components. With only 3 East Asia regions with data, it is difficult to construe any pattern."
  },
  {
    "objectID": "Lab-1/Final_Write_ups/Lab-1-team-4_final.html#area-arima-models",
    "href": "Lab-1/Final_Write_ups/Lab-1-team-4_final.html#area-arima-models",
    "title": "6  Team 4 - Lab 1",
    "section": "Area ARIMA models",
    "text": "Area ARIMA models\nWe fit ARIMA models to each area stock (scaled, summed, and logged) and report the fits and diagnostics in the table below.\n\n\nCode\nsockeye_data_area_sum\n\narea_arima = data.frame(matrix(ncol = 4))\nnames = c(\"region\",\"p\",\"d\",\"q\")\ncolnames(area_arima) = names\nsock_area = unique(sockeye_data_area_sum$area)\n\n# loop through each area and auto arima and save outputs\nfor (i in 1:length(sock_area)){\n# subset data to each region\narea_tmp=sock_area[i]\nstock_data = sockeye_data_area_sum%&gt;% filter(area==area_tmp)\ndatts = ts(stock_data$lntotal, start=sockeye_data_area_sum$year[1])\n\n# arima tests \nmod = auto.arima(datts)\nmod$coef\narima_order = arimaorder(mod)\n\n# look at model resids\nresid = checkresiduals(mod,plot=F)\n\n# save all this data\narea_arima[i,c(\"p\",\"d\",\"q\")] = arima_order\narea_arima[i,c(names(mod$coef))] = mod$coef\narea_arima[i,c(\"area\")] = area_tmp\narea_arima[i,c(\"resid_p\")] = resid$p.value\n\n}\n\narea_arima=area_arima %&gt;% \n  # fill in NAs with 0s\n  mutate_if(is.numeric, ~replace_na(., 0))\n\n\n\n\nCode\nkable(area_arima%&gt;% select(area, p, d, q,ar1,ar2,ma1,ma2,resid_p)%&gt;%arrange(area),\n      caption = \"ARIMA fitting results and residual diagnostics for summed scaled sockeye areas\")\n\n\n\nARIMA fitting results and residual diagnostics for summed scaled sockeye areas\n\n\n\n\n\n\n\n\n\n\n\n\n\narea\np\nd\nq\nar1\nar2\nma1\nma2\nresid_p\n\n\n\n\nAlaska\n2\n1\n2\n0.5975743\n-0.8201475\n-0.9625597\n0.7736959\n0.5803041\n\n\nEast_Asia\n1\n1\n0\n-0.2890606\n0.0000000\n0.0000000\n0.0000000\n0.6259541\n\n\nWC\n0\n0\n0\n0.0000000\n0.0000000\n0.0000000\n0.0000000\n0.0265574\n\n\n\n\n\n\nComparing regional ARIMA models to area ARIMA models\nThe area-wide ARIMA structures did not match their regional counterparts. The best fitting AK ARIMA model was a 2 order AR and MA and 1 order difference structure, which contrasts with the &lt;2 order AR and 1 order MA of the summarized ARIMA structure of the regional stocks. The East Asia ARIMA model has some semblance to the regional E Asia stocks, but this is inconclusive because of the low sample size. West Coast model had no ARIMA structure which does not to capture the non-stationarity of some NA WC regional stocks."
  },
  {
    "objectID": "Lab-2/Lab2-MARSS.html#teams",
    "href": "Lab-2/Lab2-MARSS.html#teams",
    "title": "7  Lab Intro",
    "section": "Teams",
    "text": "Teams\n\nLower Columbia River Chinook: Zoe Rand (QERM), Emma Timmins-Schiffman (Genome Sci), Maria Kuruvilla (QERM)\nLower Columbia River Steelhead: Eric French (Civil), Liz Elmstrom (SAFS), Terrance Wang (SAFS)\nLower Columbia River Coho: Nick Chambers (SAFS), Karl Veggerby (SAFS), Miranda Mudge (Molecular & Cellular)\nMiddle Columbia River Steelhead: Madison Shipley (SAFS), Dylan Hubl (Env & Forest Sci)"
  },
  {
    "objectID": "Lab-2/Lab2-MARSS.html#lower-columbia-river-salmon-spawner-data",
    "href": "Lab-2/Lab2-MARSS.html#lower-columbia-river-salmon-spawner-data",
    "title": "7  Lab Intro",
    "section": "Lower Columbia River salmon spawner data",
    "text": "Lower Columbia River salmon spawner data\nThese data are from the Coordinated Assessments Partnership (CAP) and downloaded using the rCAX R client for the CAX (the CAP database) API. The data are saved in Lab-2/Data_Images/columbia-river.rda.\n\n\nCode\nload(here::here(\"Lab-2\", \"Data_Images\", \"columbia-river.rda\"))\n\n\nThe data set has data for fi endangered and threatened ESU (Evolutionary Significant Units) in the Lower Columbia River.\n\n\nCode\nesu &lt;- unique(columbia.river$esu_dps)\nesu\n\n\n[1] \"Steelhead (Middle Columbia River DPS)\"     \n[2] \"Steelhead (Upper Columbia River DPS)\"      \n[3] \"Steelhead (Lower Columbia River DPS)\"      \n[4] \"Salmon, coho (Lower Columbia River ESU)\"   \n[5] \"Salmon, Chinook (Lower Columbia River ESU)\"\n\n\n\n\n\n\n\nFigure from ESA recovery plan for Lower Columbia River Coho salmon, Lower Columbia River Chinook salmon, Columbia River Chum salmon, and Lower Columbia River steelhead. 2013. NMFS NW Region. https://repository.library.noaa.gov/view/noaa/16002\n\n\n\n\n\nData structure\nThe dataset has the following columns\n\n\nCode\ncolnames(columbia.river)\n\n\n[1] \"species\"       \"esu_dps\"       \"majorpopgroup\" \"esapopname\"   \n[5] \"commonpopname\" \"run\"           \"spawningyear\"  \"value\"        \n[9] \"value_type\"   \n\n\n\nspecies: Chinook, Coho, Steelhead\nesu_dps: name of the ESU\nmajorpopgroup: biological major group\ncommonpopname: common population name, generally a stream or river\nrun: run-timing\nspawningyear: the year that the spawners were counted on the spawning grounds\nvalue: total (natural-born and hatchery-born) spawners on the spawning ground. Generally some type of redd-count expansion or some other stream count of spawners. Redd = a gravel nest.\n\n\n\nData plots\nLet’s load one ESU and make a plot. Create a function.\n\n\nCode\nplotesu &lt;- function(esuname){\n  df &lt;- columbia.river %&gt;% subset(esu_dps %in% esuname)\nggplot(df, aes(x=spawningyear, y=log(value), color=majorpopgroup)) + \n  geom_point(size=0.2, na.rm = TRUE) + \n  theme(strip.text.x = element_text(size = 3)) +\n  theme(axis.text.x = element_text(size = 5, angle = 90)) +\n  facet_wrap(~esapopname) +\n  ggtitle(paste0(esuname, collapse=\"\\n\"))\n}\n\n\n\n\nCode\nplotesu(esu[3])\n\n\n\n\n\n\n\nCode\nplotesu(esu[4])\n\n\n\n\n\n\n\nCode\nplotesu(esu[5])\n\n\n\n\n\n\n\nCode\nplotesu(esu[1])\n\n\n\n\n\n\n\nCode\ndf &lt;- columbia.river %&gt;% subset(species == \"Chinook salmon\")\nggplot(df, aes(x=spawningyear, y=log(value), color=run)) + \n  geom_point(size=0.2, na.rm = TRUE) +\n  theme(strip.text.x = element_text(size = 3)) +\n  theme(axis.text.x = element_text(size = 5, angle = 90)) + \n  facet_wrap(~esapopname)"
  },
  {
    "objectID": "Lab-2/Lab2-MARSS.html#tasks-for-each-group",
    "href": "Lab-2/Lab2-MARSS.html#tasks-for-each-group",
    "title": "7  Lab Intro",
    "section": "Tasks for each group",
    "text": "Tasks for each group\n\nCreate estimates of spawner abundance for all missing years and provide estimates of the decline from the historical abundance.\nEvaluate support for the major population groups. Are the populations in the groups more correlated than outside the groups?\nEvaluate the evidence of cycling in the data. We will talk about how to do this on the Tuesday after lab.\n\n\nTips\nSimplify\nIf your ESU has many populations, start with a smaller set of 4-7 populations.\nAssumptions\nYou can assume that R=\"diagonal and equal\" and A=\"scaling\". Assume that “historical” means the earliest years available for your group.\nStates\nYour abundance estimate is the “x” or “state” estimates. You can get this from\nfit$states\nor\ntsSmooth(fit)\nwhere fit is from fit &lt;- MARSS()\nplotting\nEstimate of the mean of the spawner counts based on your x model.\nautoplot(fit, plot.type=\"fitted.ytT\")\ndiagnostics\nautoplot(fit, plot.type=\"residuals\")\n\n\nAddress the following in your methods\n\nDescribe your assumptions about the x and how the data time series are related to x.\n\nHow are the x and y (data) related? 1 x for 1 y or will you assume 1 x for all y or 1 x for each major population group? How will you choose?\nWhat will you assume about the U for the x’s?\nWhat will you assume about the Q matrix?\n\nWrite out your assumptions as different models in matrix form, fit each and then compare these with AIC or AICc.\nDo your estimates differ depending on the assumptions you make about the structure of the data, i.e. you assumptions about the x’s, Q, and U."
  },
  {
    "objectID": "Lab-2/Lab2-MARSS.html#sample-code",
    "href": "Lab-2/Lab2-MARSS.html#sample-code",
    "title": "7  Lab Intro",
    "section": "Sample code",
    "text": "Sample code\nHere I show how I might analyze the Upper Columbia Steelhead data.\n\n\n\n\n\nFigure from 2022 5-Year Review: Summary & Evaluation of Upper Columbia River Spring-run Chinook Salmon and Upper Columbia River Steelhead. NMFS. West Coast Region. https://doi.org/10.25923/p4w5-dp31\n\n\n\n\nSet up the data. We need the time series in a matrix with time across the columns.\nLoad the data.\n\n\nCode\nload(here::here(\"Lab-2\", \"Data_Images\", \"columbia-river.rda\"))\n\n\nWrangle the data.\n\n\nCode\nlibrary(dplyr)\nesuname &lt;- esu[2]\n\ndat &lt;- columbia.river %&gt;% \n  subset(esu_dps == esuname) %&gt;% # get only this ESU\n  mutate(log.spawner = log(value)) %&gt;% # create a column called log.spawner\n  select(esapopname, spawningyear, log.spawner) %&gt;% # get just the columns that I need\n  pivot_wider(names_from = \"esapopname\", values_from = \"log.spawner\") %&gt;% \n  column_to_rownames(var = \"spawningyear\") %&gt;% # make the years rownames\n  as.matrix() %&gt;% # turn into a matrix with year down the rows\n  t() # make time across the columns\n# MARSS complains if I don't do this\ndat[is.na(dat)] &lt;- NA\n\n\nClean up the row names\n\n\nCode\ntmp &lt;- rownames(dat)\ntmp &lt;- stringr::str_replace(tmp, \"Steelhead [(]Upper Columbia River DPS[)]\", \"\")\ntmp &lt;- stringr::str_replace(tmp, \"River - summer\", \"\")\ntmp &lt;- stringr::str_trim(tmp)\nrownames(dat) &lt;- tmp\n\n\nSpecify a model\n\n\nCode\nmod.list1 &lt;- list(\n  U = \"unequal\",\n  R = \"diagonal and equal\",\n  Q = \"unconstrained\"\n)\n\n\nFit the model. In this case, a BFGS algorithm is faster.\n\n\nCode\nlibrary(MARSS)\nfit1 &lt;- MARSS(dat, model=mod.list1, method=\"BFGS\")\n\n\nSuccess! Converged in 235 iterations.\nFunction MARSSkfas used for likelihood calculation.\n\nMARSS fit is\nEstimation method: BFGS \nEstimation converged in 235 iterations. \nLog-likelihood: -109.4078 \nAIC: 256.8155   AICc: 262.1676   \n \n               Estimate\nR.diag          0.00997\nU.X.Entiat      0.02182\nU.X.Methow      0.01852\nU.X.Okanogan    0.00140\nU.X.Wenatchee  -0.02222\nQ.(1,1)         0.28016\nQ.(2,1)         0.12303\nQ.(3,1)         0.14275\nQ.(4,1)         0.23415\nQ.(2,2)         0.31642\nQ.(3,2)         0.30806\nQ.(4,2)         0.19061\nQ.(3,3)         0.31031\nQ.(4,3)         0.18852\nQ.(4,4)         0.52813\nx0.X.Entiat     4.61647\nx0.X.Methow     6.43401\nx0.X.Okanogan   6.47217\nx0.X.Wenatchee  8.04868\nInitial states (x0) defined at t=0\n\nStandard errors have not been calculated. \nUse MARSSparamCIs to compute CIs and bias estimates.\n\n\nHmmmmm, the Q variance is so high that it perfectly fits the data. That doesn’t seem right.\n\n\nCode\nautoplot(fit1, plot.type=\"fitted.ytT\")\n\n\nMARSSresiduals.tT reported warnings. See msg element or attribute of returned residuals object.\n\n\n\n\n\nplot.type = fitted.ytT \n\n\n\n\n\nFinished plots.\n\n\nLet’s look at the corrplot. Interesting. The Methow and Entiat are almost perfectly correlated while the Entiat and Wenatchee are somewhat correlated. That makes sense if you look at a map.\n\n\nCode\nlibrary(corrplot)\n\n\ncorrplot 0.92 loaded\n\n\nCode\nQ &lt;- coef(fit1, type=\"matrix\")$Q\ncorrmat &lt;- diag(1/sqrt(diag(Q))) %*% Q %*% diag(1/sqrt(diag(Q)))\ncorrplot(corrmat)\n\n\n\n\n\nI need to use the EM algorithm (remove method=\"BFGS\") because the BFGS algorithm doesn’t allow constraints on the Q matrix.\n\n\nCode\nmod.list2 &lt;- list(\n  U = \"unequal\",\n  R = \"diagonal and equal\",\n  Q = \"equalvarcov\"\n)\nfit2 &lt;- MARSS(dat, model=mod.list2, control = list(maxit=1000))\n\n\nSuccess! abstol and log-log tests passed at 794 iterations.\nAlert: conv.test.slope.tol is 0.5.\nTest with smaller values (&lt;0.1) to ensure convergence.\n\nMARSS fit is\nEstimation method: kem \nConvergence test: conv.test.slope.tol = 0.5, abstol = 0.001\nEstimation converged in 794 iterations. \nLog-likelihood: -120.6028 \nAIC: 263.2057   AICc: 264.9657   \n \n               Estimate\nR.diag           0.1290\nU.X.Entiat       0.0257\nU.X.Methow       0.0311\nU.X.Okanogan     0.0166\nU.X.Wenatchee   -0.0282\nQ.diag           0.2632\nQ.offdiag        0.2631\nx0.X.Entiat      4.2026\nx0.X.Methow      5.9042\nx0.X.Okanogan    5.8359\nx0.X.Wenatchee   8.0703\nInitial states (x0) defined at t=0\n\nStandard errors have not been calculated. \nUse MARSSparamCIs to compute CIs and bias estimates.\n\n\n\n\nCode\nautoplot(fit2, plot.type=\"fitted.ytT\")\n\n\nMARSSresiduals.tT reported warnings. See msg element or attribute of returned residuals object.\n\n\n\n\n\nplot.type = fitted.ytT \n\n\n\n\n\nFinished plots.\n\n\nNow I want try something different. I will treat the Methow-Okanogan as one state and the Entiat-Wenatchee as another. I’ll let these be correlated together. Interesting, these two are estimated to be perfectly correlated.\n\n\nCode\nmod.list3 &lt;- mod.list1\nmod.list3$Q &lt;- \"unconstrained\"\nmod.list3$Z &lt;- factor(c(\"ew\", \"mo\", \"mo\", \"ew\"))\nfit3 &lt;- MARSS(dat, model = mod.list3)\n\n\nWarning! Reached maxit before parameters converged. Maxit was 500.\n neither abstol nor log-log convergence tests were passed.\n\nMARSS fit is\nEstimation method: kem \nConvergence test: conv.test.slope.tol = 0.5, abstol = 0.001\nWARNING: maxit reached at  500  iter before convergence.\n Neither abstol nor log-log convergence test were passed.\n The likelihood and params are not at the ML values.\n Try setting control$maxit higher.\nLog-likelihood: -137.532 \nAIC: 295.064   AICc: 296.5209   \n \n            Estimate\nA.Okanogan  -0.68779\nA.Wenatchee  1.54127\nR.diag       0.18062\nU.ew        -0.02175\nU.mo         0.00374\nQ.(1,1)      0.22050\nQ.(2,1)      0.22103\nQ.(2,2)      0.22164\nx0.ew        6.51468\nx0.mo        7.33795\nInitial states (x0) defined at t=0\n\nStandard errors have not been calculated. \nUse MARSSparamCIs to compute CIs and bias estimates.\n\nConvergence warnings\n Warning: the  logLik  parameter value has not converged.\n Type MARSSinfo(\"convergence\") for more info on this warning.\n\n\nCode\nautoplot(fit3, plot.type=\"fitted.ytT\")\n\n\n\n\n\nplot.type = fitted.ytT \n\n\n\n\n\nFinished plots.\n\n\nFinally, let’s look at the AIC values. Fit1 was very flexible and can put a line through the data so I know I have at least one model in the set that can fit the data. Well, the most flexible model is the best. At this point, I’d like to look just at data after 1980 or so. I don’t like the big dip that happened in the Wenatchee River. I’d want to talk to the biologists to find out what happened, especially because I know that there might be hatchery releases in this system.\n\n\nCode\naic &lt;- c(fit1$AICc, fit2$AICc, fit3$AICc)\naic-min(aic)\n\n\n[1]  0.00000  2.79807 34.35331\n\n\n\nIncluding cycling\nLet’s just look at the data after 1987 to eliminate that string of NAs in the 3 rivers.\n\n\nCode\ndat87 &lt;- dat[,colnames(dat)&gt;1987]\n\n\nLet’s look the acf to look for evidence of cycling. Due to the nature of their life-cycle where they tend to return back to their spawning grounds after a certain numbers of years, we might expect some cycling although steelhead aren’t really known for this (unlike sockeye, chinook and pink).\nWell no obvious cycles.\n\n\nCode\npar(mfrow=c(2,2))\nfor(i in 1:4){\n  acf(dat87[i,], na.action=na.pass, main=rownames(dat87)[i])\n}\n\n\n\n\n\nBut let’s go through how we might include cycles. We are going to include cycles with frequency 3, 4, and 5, choosem to reflect steelhead returning after 3, 4 or 5 years.\n\n\nCode\nTT &lt;- dim(dat87)[2] #number of time steps\ncovariates &lt;- rbind(\n  forecast::fourier(ts(1:TT, freq=3), K=1) |&gt; t(),\n  forecast::fourier(ts(1:TT, freq=4), K=1) |&gt; t(),\n  forecast::fourier(ts(1:TT, freq=5), K=1) |&gt; t()\n)\n\n\nRegistered S3 method overwritten by 'quantmod':\n  method            from\n  as.zoo.data.frame zoo \n\n\nNow let’s fit a model with these covariates. Let’s analyze the populations separately, so Q is diagonal.\n\n\nCode\nmod.list4 &lt;- list(\n  Q = \"unconstrained\",\n  U = \"unequal\",\n  R = \"diagonal and equal\",\n  D = \"unconstrained\",\n  d = covariates\n)\n\n\n\n\nCode\nfit4.87 &lt;- MARSS(dat87, model=mod.list4)\n\n\nSuccess! abstol and log-log tests passed at 78 iterations.\nAlert: conv.test.slope.tol is 0.5.\nTest with smaller values (&lt;0.1) to ensure convergence.\n\nMARSS fit is\nEstimation method: kem \nConvergence test: conv.test.slope.tol = 0.5, abstol = 0.001\nEstimation converged in 78 iterations. \nLog-likelihood: -55.48472 \nAIC: 196.9694   AICc: 238.5519   \n \n                   Estimate\nR.diag              0.00841\nU.X.Entiat         -0.01592\nU.X.Methow          0.00629\nU.X.Okanogan       -0.01331\nU.X.Wenatchee      -0.06327\nQ.(1,1)             0.21426\nQ.(2,1)             0.10446\nQ.(3,1)             0.12493\nQ.(4,1)             0.12760\nQ.(2,2)             0.21888\nQ.(3,2)             0.21364\nQ.(4,2)             0.13562\nQ.(3,3)             0.22037\nQ.(4,3)             0.13483\nQ.(4,4)             0.31566\nx0.X.Entiat         6.34777\nx0.X.Methow         7.39581\nx0.X.Okanogan       7.02470\nx0.X.Wenatchee      8.65239\nD.(Entiat,S1-3)    -0.03464\nD.(Methow,S1-3)    -0.12969\nD.(Okanogan,S1-3)  -0.11592\nD.(Wenatchee,S1-3) -0.01482\nD.(Entiat,C1-3)     0.02784\nD.(Methow,C1-3)    -0.08604\nD.(Okanogan,C1-3)  -0.09585\nD.(Wenatchee,C1-3)  0.05808\nD.(Entiat,S1-4)    -0.11286\nD.(Methow,S1-4)    -0.13983\nD.(Okanogan,S1-4)  -0.09480\nD.(Wenatchee,S1-4) -0.06365\nD.(Entiat,C1-4)     0.02030\nD.(Methow,C1-4)    -0.09692\nD.(Okanogan,C1-4)  -0.08208\nD.(Wenatchee,C1-4) -0.08237\nD.(Entiat,S1-5)    -0.19272\nD.(Methow,S1-5)     0.05745\nD.(Okanogan,S1-5)   0.07723\nD.(Wenatchee,S1-5) -0.18255\nD.(Entiat,C1-5)    -0.01818\nD.(Methow,C1-5)     0.17916\nD.(Okanogan,C1-5)   0.15510\nD.(Wenatchee,C1-5) -0.02965\nInitial states (x0) defined at t=0\n\nStandard errors have not been calculated. \nUse MARSSparamCIs to compute CIs and bias estimates.\n\n\nLet’s plot the estimates. broom::tidy() will get a data frame with the terms, estimates and CIs.\n\n\nCode\nlibrary(broom)\n# get all the parameter estimates for D\ndf &lt;- tidy(fit4.87) %&gt;%\n  subset(stringr::str_sub(term,1,1)==\"D\")\n# add a column with the river names\ndf$river &lt;- as.factor(rep(rownames(dat87),nrow(covariates)))\n# add a column for the lag or frequency\nlags &lt;- stringr::str_split(rownames(covariates), \"-\") %&gt;% lapply(function(x){x[[2]]}) %&gt;% unlist()\ndf$lag &lt;- rep(lags, each=nrow(dat87))\n# add column for the type of fourier\ndf$type &lt;- rep(rownames(covariates), each=nrow(dat87))\n\n\nWe can then plot this. Interesting. Some support for 5 year cycles.\n\n\nCode\nggplot(df, aes(x=type, y=estimate, col=lag)) + \n  geom_point() +\n  geom_errorbar(aes(ymin=conf.low, ymax=conf.up), width=.2, position=position_dodge(.9)) +\n  geom_hline(yintercept = 0) +\n  facet_wrap(~river) +\n  ggtitle(\"The cycle estimates with CIs\")\n\n\n\n\n\nLet’s compare some other models.\n\n\nCode\n# No cycles\nmod.list &lt;- list(\n  Q = \"unconstrained\",\n  U = \"unequal\",\n  R = \"diagonal and equal\"\n)\nfit1.87 &lt;- MARSS(dat87, model=mod.list, silent=TRUE)\n# Only lag 5 cycles\nmod.list &lt;- list(\n  Q = \"unconstrained\",\n  U = \"unequal\",\n  R = \"diagonal and equal\",\n  D = \"unconstrained\",\n  d = covariates[5:6,]\n)\nfit5.87 &lt;- MARSS(dat87, model=mod.list, silent=TRUE)\n# Cycles in the process\n# which doesn't really make sense for salmon since the cycles are age-structure cycles \n# which act like cycles in the observations\nmod.list &lt;- list(\n  Q = \"unconstrained\",\n  U = \"unequal\",\n  R = \"diagonal and equal\",\n  C = \"unconstrained\",\n  c = covariates\n)\nfit6.87 &lt;- MARSS(dat87, model=mod.list, silent=TRUE)\n\n\nHmm model without cyles is much better (lower AICc). Even if we only have the 5 year cycles (covariates[5:6,]), the AICc is larger than for the models with cycles.\n\n\nCode\naic &lt;- c(fit1.87$AICc, fit4.87$AICc, fit5.87$AICc, fit6.87$AICc)\naic-min(aic)\n\n\n[1]  0.00000 56.99612 11.66091 56.99461"
  },
  {
    "objectID": "Lab-2/Lab2-MARSS.html#resources",
    "href": "Lab-2/Lab2-MARSS.html#resources",
    "title": "7  Lab Intro",
    "section": "Resources",
    "text": "Resources\nChapter 7 MARSS models. ATSA Lab Book. https://atsa-es.github.io/atsa-labs/chap-mss.html\nChapter 8 MARSS models with covariate. ATSA Lab Book. https://atsa-es.github.io/atsa-labs/chap-msscov.html\nChapter 16 Modeling cyclic sockeye https://atsa-es.github.io/atsa-labs/chap-cyclic-sockeye.html"
  },
  {
    "objectID": "Lab-2/Final_Write_ups/Lab-2-team-1_final.html",
    "href": "Lab-2/Final_Write_ups/Lab-2-team-1_final.html",
    "title": "8  Team 1 - Lab 2",
    "section": "",
    "text": "Data\nDescribe what data set you will work with and any subsetting you decided on. For example, you may have decided to look only at a section of the ESU that your team was assigned.\nLoad the data.\nCode\nload(here::here(\"Lab-2\", \"Data_Images\", \"columbia-river.rda\"))\nLook at the data.\nCode\nesu &lt;- unique(columbia.river$esu_dps)\nesu\n\n\n[1] \"Steelhead (Middle Columbia River DPS)\"     \n[2] \"Steelhead (Upper Columbia River DPS)\"      \n[3] \"Steelhead (Lower Columbia River DPS)\"      \n[4] \"Salmon, coho (Lower Columbia River ESU)\"   \n[5] \"Salmon, Chinook (Lower Columbia River ESU)\"\n\n\nCode\nplotesu &lt;- function(esuname){\n  df &lt;- columbia.river %&gt;% subset(esu_dps %in% esuname)\n  ggplot(df, aes(x=spawningyear, y=log(value), color=majorpopgroup)) + \n    geom_point(size=0.2, na.rm = TRUE) + \n    theme(strip.text.x = element_text(size = 3)) +\n    theme(axis.text.x = element_text(size = 5, angle = 90)) +\n    facet_wrap(~esapopname) +\n    ggtitle(paste0(esuname, collapse=\"\\n\"))\n}\n#Chinook\nplotesu(esu[5])\nWrangle the data.\nWe had some issues with one of the populations having duplicated entries, with some being NA and some having values, (Lower Gorge Tributaries - fall) and we also had a lot of ESA populations, so we decided to focus only on the Cascade populations.\nCode\nchin_c_r&lt;-columbia.river %&gt;% subset(esu_dps == esu[5])\nchin_c_r %&gt;% \n  filter(majorpopgroup %in% c(\"Cascade fall\", \"Cascade late fall\", \"Cascade spring\")) %&gt;% ggplot(aes(x=spawningyear, y=log(value), color=majorpopgroup)) + \n    geom_point(size=0.2, na.rm = TRUE) + \n    theme(strip.text.x = element_text(size = 3)) +\n    theme(axis.text.x = element_text(size = 5, angle = 90)) +\n    facet_wrap(~esapopname) +\n    ggtitle(paste0(esu[5], collapse=\"\\n\"))\nFormatting data for MARSS:\nCode\nchin_newdat &lt;- chin_c_r %&gt;% \n  filter(majorpopgroup %in% c(\"Cascade fall\", \"Cascade late fall\", \"Cascade spring\")) %&gt;% #just looking at cascade populations\n  mutate(log.spawner = log(value)) %&gt;% # create a column called log.spawner\n  select(esapopname, spawningyear, log.spawner) %&gt;% # get just the columns that I need\n  pivot_wider(names_from = esapopname, values_from = log.spawner) %&gt;% \n  column_to_rownames(var = \"spawningyear\") %&gt;% # make the years rownames\n  as.matrix() %&gt;% # turn into a matrix with year down the rows\n  t() # make time across the columns\n# MARSS complains if I don't do this\nchin_newdat[is.na(chin_newdat)] &lt;- NA\n\n#clean up row names\ntmp &lt;- rownames(chin_newdat)\ntmp &lt;- stringr::str_replace(tmp, \"Salmon, Chinook [(]Lower Columbia River ESU[)]\", \"\")\ntmp &lt;- stringr::str_trim(tmp)\nrownames(chin_newdat) &lt;- tmp\n\n#look at data\nprint(chin_newdat[,1:5])\n\n\n                                    1964     1965     1966     1967     1968\nClackamas River - fall                NA       NA       NA       NA       NA\nLewis River - fall              6.448889 6.792344 6.368187 6.018593 5.517453\nLower Cowlitz River - fall      8.105308 8.649449 8.472614 8.610137 7.741968\nToutle River - fall             7.821643 7.289611 7.206377 7.353722 7.830028\nUpper Cowlitz River - fall            NA       NA       NA       NA       NA\nLewis River - late fall         9.732521 8.978030 9.361085 9.181015 8.876265\nSandy River - late fall               NA       NA       NA       NA       NA\nKalama River - spring                 NA       NA       NA       NA       NA\nNorth Fork Lewis River - spring       NA       NA       NA       NA       NA\nSandy River - spring                  NA       NA       NA       NA       NA\nUpper Cowlitz River - spring          NA       NA       NA       NA       NA\nEach group has the same general tasks, but you will adapt them as you work on the data.\nAddress the following in your methods\nDescribe your assumptions about the x and how the data time series are related to x.\n\\[\n\\mathbf{Q} =\n\\begin{bmatrix} q & p  & ...& p\\\\\np & q &  ...& p\\\\\n\\vdots & p & \\ddots & \\vdots\\\\\np & p & p  & q \\end{bmatrix}\n\\]\n\\[\n\\begin{bmatrix} y_{t,1} \\\\ y_{t, 2} \\\\ \\vdots \\\\y_{t,11} \\end{bmatrix} =\n\\begin{bmatrix}1 & 0  & ...& 0\\\\\n0 & 1 &  ...& 0\\\\\n\\vdots & 0 & \\ddots & \\vdots\\\\\n0 & 0 & 0  & 1\\end{bmatrix}\n\\begin{bmatrix} x_{t,1} \\\\ x_{t, 2} \\\\ \\vdots \\\\x_{t,11} \\end{bmatrix} + \\mathbf{a} + \\mathbf{v_t} \\text{ where } \\mathbf{v_t} \\sim MVN(0, \\mathbf{R})\n\\]\nwhere:\n\\[\n\\mathbf{R} =\n\\begin{bmatrix} r & 0  & ...& 0\\\\\n0 & r &  ...& 0\\\\\n\\vdots & 0 & \\ddots & \\vdots\\\\\n0 & 0 & 0  & r \\end{bmatrix}\n\\]\n\\[\n\\begin{bmatrix} x_{t,1} \\\\ x_{t,2}\\\\ x_{t,3} \\end{bmatrix} = \\begin{bmatrix} x_{t-1,1} \\\\ x_{t-1,2}\\\\ x_{t-1,3} \\end{bmatrix} + \\begin{bmatrix} u_1 \\\\ u_2\\\\ u_3 \\end{bmatrix} + w_t \\text{  where } w_t \\sim MVN(0, \\mathbf{Q})\\]\nwhere Q is as above but is 3x3 instead of 11x11.\n\\[\n\\begin{bmatrix} y_{t,1} \\\\ y_{t, 2} \\\\ \\vdots \\\\y_{t,11} \\end{bmatrix} =\n\\begin{bmatrix}1 & 0  &  0\\\\\n1 & 0 &  0\\\\\n\\vdots & 1 & \\vdots\\\\\n0 & 1 & 0 \\\\\n\\vdots & \\vdots & \\vdots\\\\\n\\vdots & 0 & 1 \\\\\n\\vdots & \\vdots & \\vdots \\end{bmatrix}\n\\begin{bmatrix} x_{t,1} \\\\ x_{t, 2} \\\\x_{t,3} \\end{bmatrix} + \\mathbf{a} + \\mathbf{v_t} \\text{ where } \\mathbf{v_t} \\sim MVN(0, \\mathbf{R})\n\\]\nand R is the same as above.\nCode\naic &lt;- c(fit1$AICc, fit2$AICc, fit3$AICc, fit4$AICc, fit5$AICc, fit6$AICc)\nmods&lt;-seq(1,6)\naic.names&lt;-paste(\"Model\", mods, sep = \" \")\na&lt;-matrix(c(aic, aic-min(aic)), nrow = 6, byrow = F)\nrownames(a)&lt;-aic.names\na&lt;-a[order(a[,2],decreasing=FALSE),] #order by lowest AICc\nknitr::kable(a, col.names = c(\"AICc\", \"Delta AIC\")) #make a pretty table\n\n\n\n\n\n\nAICc\nDelta AIC\n\n\n\n\nModel 1\n905.3217\n0.00000\n\n\nModel 3\n995.6934\n90.37173\n\n\nModel 2\n1030.3319\n125.01016\n\n\nModel 4\n1040.2284\n134.90665\n\n\nModel 6\n1049.3786\n144.05686\n\n\nModel 5\n1059.6243\n154.30253\nThe first model we tested, where we had each population with its own x value and Q was diagonal and unequal, had the lowest AICc. Therefore, we used this model to look at historical abundance.\nEstimates of log abundance for each population:\nCode\ntibble(\"Pop\" = rownames(chin_newdat),\"Dat\" = chin_newdat[,1], \"Est\" = fit1$states[,1])\n\n\n# A tibble: 11 × 3\n   Pop                               Dat   Est\n   &lt;chr&gt;                           &lt;dbl&gt; &lt;dbl&gt;\n 1 Clackamas River - fall          NA     7.53\n 2 Lewis River - fall               6.45  6.23\n 3 Lower Cowlitz River - fall       8.11  8.76\n 4 Toutle River - fall              7.82  7.68\n 5 Upper Cowlitz River - fall      NA    -1.29\n 6 Lewis River - late fall          9.73  9.22\n 7 Sandy River - late fall         NA     7.96\n 8 Kalama River - spring           NA     7.00\n 9 North Fork Lewis River - spring NA     6.96\n10 Sandy River - spring            NA     6.79\n11 Upper Cowlitz River - spring    NA     4.48\nEstimated percent change from historical abundance for each population\nCode\n#percent change in log abundance \nhist.abund&lt;-tibble(Pop = rownames(chin_newdat), \n                   Year1 = fit1$states[,1],\n                   Year58 = fit1$states[,58])\n                   \nhist.abund&lt;-hist.abund %&gt;% mutate(PChange = ((Year58 - Year1)/abs(Year1)) * 100)\n\n#the estimate for \"Upper Cowlitz River - fall\" initial population is super low (&lt;1 in real scale), and so the percent change blows up (it's like 1000), so I took this out to make the plot easier to read. Also I think this is probably unrealistic. \nhist.abund %&gt;% filter(Pop != \"Upper Cowlitz River - fall\") %&gt;%\n  ggplot() + geom_histogram(aes(x = Pop, y = PChange, fill = factor(c(rep(\"fa\", 5), rep(\"l_fa\", 2), rep(\"Sp\", 3)))), stat = \"identity\") + \n  geom_hline(aes(yintercept = 0), color = \"red\") + \n  scale_fill_discrete(labels = c(\"Fall\", \"Late Fall\", \"Spring\"), name = \"Run\") + \n  labs(x = \"Population\", y=\"% Change From Hist. Abund.\") + theme_minimal() + \n  theme(axis.text.x = element_text(angle = 270, hjust = -0.1))\nDo your estimates differ depending on the assumptions you make about the structure of the data, i.e. you assumptions about the x’s, Q, and U?\nUsing our second best model:\nCode\nhist.abund&lt;-tibble(Pop = rownames(chin_newdat), \n                   Year1 = fit3$states[,1],\n                   Year58 = fit3$states[,58])\n                   \nhist.abund&lt;-hist.abund %&gt;% mutate(PChange = ((Year58 - Year1)/abs(Year1)) * 100)\n\n#the estimate for \"Upper Cowlitz River - fall\" is still not great, so I took this out for this plot as well\nhist.abund %&gt;% filter(Pop != \"Upper Cowlitz River - fall\") %&gt;% \n  ggplot() + geom_histogram(aes(x = Pop, y = PChange, fill = factor(c(rep(\"fa\", 5), rep(\"l_fa\", 2), rep(\"Sp\", 3)))), stat = \"identity\") + \n  geom_hline(aes(yintercept = 0), color = \"red\") + \n  scale_fill_discrete(labels = c(\"Fall\", \"Late Fall\", \"Spring\"), name = \"Run\") + \n  labs(x = \"Population\", y=\"% Change From Hist. Abund.\") + theme_minimal() + \n  theme(axis.text.x = element_text(angle = 270, hjust = -0.1))\nThe form of the model does make a difference in the model outputs. For instance, in the first model, the populations of Sandy River spring and late fall are estimated to show an increase, while in the second model, it’s estimated to decrease. Lewis River fall and Lower Cowlitz river fall and Toutle River fall, all show opposite trends in these two models as well.\nWe esimated that 6 of the 11 populations showed a decline from historical abundance, with two populations demonstrating a &gt;25% decline in log-abundance. However, other populations were estimated to be increasing, with the populations in the Upper Cowlitz river (both spring and fall) showing very large increases in abundance. However, we’re not sure all of these results are reasonable, specially these levels of increase in the Upper Cowlitz river, and these results change with the different model formulations we tested. Though our best model had the lowest AICc, perhaps more models should be tested to confirm these results.\nResiduals for model 1 (hyp. 1) did not show an association with time; however, in the residuals for model 4 (best hyp. 2 model) some of the populations did still show an association with time. This further supports our selection of model 1 as our best model.\nWe found that the population abundances of fall and late fall Chinook were positively correlated, with additional structure according to geographic proximity. Spring run populations showed higher differentiation from each other. However, when fall populations were grouped the model AICc was not improved. There is likely environmental and/or biological association among the fall and late fall run populations but they should be considered separate populations in our models.\nWhen we evaluated the evidence for 4 and 5 year cycling in Chinook salmon in a subset of the rivers (Lewis fall, Lewis late fall, and Lower Cowlitz fall), we found that there was some support for a 4 year cycle in Lewis fall data. However, the AIC was much lower for a model without cycles. It is possible that another model with cycles is better.\nAll members contributed to developing the plan and methods for the analysis. ETS and ZR worked on the code for subsetting the data and fitting the models. ZR wrote the equations for the methods and worked on the results for the first question on historical abundance. ETS analyzed the results in terms of evidence for multiple populations. MK analyzed the evidence of cycling in the data. All team members contributed to the discussion and worked on the report together."
  },
  {
    "objectID": "Lab-2/Final_Write_ups/Lab-2-team-1_final.html#code-for-analysis",
    "href": "Lab-2/Final_Write_ups/Lab-2-team-1_final.html#code-for-analysis",
    "title": "8  Team 1 - Lab 2",
    "section": "Code for analysis:",
    "text": "Code for analysis:\n\n1. Hypothesis 1: 11 independent populations\n\n\nCode\nmod.list1 &lt;- list(\n  U = \"unequal\",\n  R = \"diagonal and equal\",\n  Q = \"diagonal and unequal\"\n)\nfit1&lt;-MARSS(chin_newdat, model=mod.list1, method = \"BFGS\")\n\n\nSuccess! Converged in 528 iterations.\nFunction MARSSkfas used for likelihood calculation.\n\nMARSS fit is\nEstimation method: BFGS \nEstimation converged in 528 iterations. \nLog-likelihood: -414.6942 \nAIC: 897.3884   AICc: 905.3217   \n \n                                                                         Estimate\nR.diag                                                                   4.02e-01\nU.X.Clackamas River - fall                                              -3.53e-02\nU.X.Lewis River - fall                                                   2.99e-02\nU.X.Lower Cowlitz River - fall                                          -2.06e-02\nU.X.Toutle River - fall                                                 -2.37e-02\nU.X.Upper Cowlitz River - fall                                           2.26e-01\nU.X.Lewis River - late fall                                             -5.80e-03\nU.X.Sandy River - late fall                                              1.97e-02\nU.X.Kalama River - spring                                               -5.68e-02\nU.X.North Fork Lewis River - spring                                     -2.02e-02\nU.X.Sandy River - spring                                                 2.56e-02\nU.X.Upper Cowlitz River - spring                                         3.71e-02\nQ.(X.Clackamas River - fall,X.Clackamas River - fall)                    2.50e-15\nQ.(X.Lewis River - fall,X.Lewis River - fall)                            2.57e-02\nQ.(X.Lower Cowlitz River - fall,X.Lower Cowlitz River - fall)            1.48e-14\nQ.(X.Toutle River - fall,X.Toutle River - fall)                          7.25e-01\nQ.(X.Upper Cowlitz River - fall,X.Upper Cowlitz River - fall)            7.07e+00\nQ.(X.Lewis River - late fall,X.Lewis River - late fall)                  1.73e-19\nQ.(X.Sandy River - late fall,X.Sandy River - late fall)                  2.82e-02\nQ.(X.Kalama River - spring,X.Kalama River - spring)                      5.91e-01\nQ.(X.North Fork Lewis River - spring,X.North Fork Lewis River - spring)  2.16e-01\nQ.(X.Sandy River - spring,X.Sandy River - spring)                        8.73e-14\nQ.(X.Upper Cowlitz River - spring,X.Upper Cowlitz River - spring)        1.13e-13\nx0.X.Clackamas River - fall                                              7.57e+00\nx0.X.Lewis River - fall                                                  6.20e+00\nx0.X.Lower Cowlitz River - fall                                          8.78e+00\nx0.X.Toutle River - fall                                                 7.70e+00\nx0.X.Upper Cowlitz River - fall                                         -1.51e+00\nx0.X.Lewis River - late fall                                             9.22e+00\nx0.X.Sandy River - late fall                                             7.94e+00\nx0.X.Kalama River - spring                                               7.05e+00\nx0.X.North Fork Lewis River - spring                                     6.98e+00\nx0.X.Sandy River - spring                                                6.76e+00\nx0.X.Upper Cowlitz River - spring                                        4.44e+00\nInitial states (x0) defined at t=0\n\nStandard errors have not been calculated. \nUse MARSSparamCIs to compute CIs and bias estimates.\n\n\n\n\nCode\nautoplot(fit1, plot.type=\"fitted.ytT\")\n\n\n\n\n\nplot.type = fitted.ytT \n\n\n\n\n\nFinished plots.\n\n\n\n\nCode\n# resid1&lt;-autoplot(fit1, plot.type=\"residuals\")\n# headings&lt;-c('Model innovation', \"Cholesky standardized model smoothation\", \"Cholesky standaradized state smoothation\", \"Residuals normality test\", \"Cholesky standaradized model innnovation residuals acf\")\n\nplot(fit1, plot.type = \"model.resids.ytt1\")\n\n\n\n\n\n\n\n\nplot type = model.resids.ytt1\n\n\nCode\nplot(fit1, plot.type = \"qqplot.std.model.resids.ytt1\")\n\n\n\n\n\n\n\n\nplot type = qqplot.std.model.resids.ytt1\n\n\nCode\nplot(fit1, plot.type = \"acf.std.model.resids.ytt1\")\n\n\n\n\n\n\n\n\nplot type = acf.std.model.resids.ytt1\n\n\n\n\nCode\nmod.list2 &lt;- list(\n  U = \"unequal\",\n  R = \"diagonal and equal\",\n  Q = \"diagonal and equal\"\n)\nfit2&lt;-MARSS(chin_newdat, model=mod.list2, control = list(maxit = 2000))\n\n\nSuccess! abstol and log-log tests passed at 1328 iterations.\nAlert: conv.test.slope.tol is 0.5.\nTest with smaller values (&lt;0.1) to ensure convergence.\n\nMARSS fit is\nEstimation method: kem \nConvergence test: conv.test.slope.tol = 0.5, abstol = 0.001\nEstimation converged in 1328 iterations. \nLog-likelihood: -489.2305 \nAIC: 1026.461   AICc: 1030.332   \n \n                                     Estimate\nR.diag                                0.72949\nU.X.Clackamas River - fall           -0.03785\nU.X.Lewis River - fall                0.02564\nU.X.Lower Cowlitz River - fall       -0.01440\nU.X.Toutle River - fall              -0.00564\nU.X.Upper Cowlitz River - fall        0.36757\nU.X.Lewis River - late fall          -0.01337\nU.X.Sandy River - late fall           0.02332\nU.X.Kalama River - spring            -0.06396\nU.X.North Fork Lewis River - spring  -0.02687\nU.X.Sandy River - spring              0.02783\nU.X.Upper Cowlitz River - spring      0.02691\nQ.diag                                0.09185\nx0.X.Clackamas River - fall           7.71621\nx0.X.Lewis River - fall               6.28414\nx0.X.Lower Cowlitz River - fall       8.50382\nx0.X.Toutle River - fall              7.61118\nx0.X.Upper Cowlitz River - fall      -8.27194\nx0.X.Lewis River - late fall          9.30977\nx0.X.Sandy River - late fall          7.89736\nx0.X.Kalama River - spring            7.49044\nx0.X.North Fork Lewis River - spring  7.27055\nx0.X.Sandy River - spring             6.65318\nx0.X.Upper Cowlitz River - spring     4.92931\nInitial states (x0) defined at t=0\n\nStandard errors have not been calculated. \nUse MARSSparamCIs to compute CIs and bias estimates.\n\n\n\n\nCode\nautoplot(fit2, plot.type=\"fitted.ytT\")\n\n\n\n\n\nplot.type = fitted.ytT \n\n\n\n\n\nFinished plots.\n\n\n\n\nCode\nmod.list3 &lt;- list(\n  U = \"unequal\",\n  R = \"diagonal and equal\",\n  Q = \"equalvarcov\"\n)\nfit3&lt;-MARSS(chin_newdat, model=mod.list3, control = list(maxit = 2000))\n\n\nSuccess! abstol and log-log tests passed at 1128 iterations.\nAlert: conv.test.slope.tol is 0.5.\nTest with smaller values (&lt;0.1) to ensure convergence.\n\nMARSS fit is\nEstimation method: kem \nConvergence test: conv.test.slope.tol = 0.5, abstol = 0.001\nEstimation converged in 1128 iterations. \nLog-likelihood: -470.7432 \nAIC: 991.4863   AICc: 995.6934   \n \n                                     Estimate\nR.diag                                0.61116\nU.X.Clackamas River - fall           -0.12651\nU.X.Lewis River - fall                0.05037\nU.X.Lower Cowlitz River - fall        0.00770\nU.X.Toutle River - fall               0.01946\nU.X.Upper Cowlitz River - fall        0.37609\nU.X.Lewis River - late fall           0.01014\nU.X.Sandy River - late fall          -0.00839\nU.X.Kalama River - spring            -0.09167\nU.X.North Fork Lewis River - spring  -0.06193\nU.X.Sandy River - spring             -0.00388\nU.X.Upper Cowlitz River - spring      0.01885\nQ.diag                                0.20574\nQ.offdiag                             0.15919\nx0.X.Clackamas River - fall          12.71323\nx0.X.Lewis River - fall               6.24942\nx0.X.Lower Cowlitz River - fall       8.59167\nx0.X.Toutle River - fall              7.62076\nx0.X.Upper Cowlitz River - fall      -7.61327\nx0.X.Lewis River - late fall          9.30191\nx0.X.Sandy River - late fall          9.75499\nx0.X.Kalama River - spring            9.24570\nx0.X.North Fork Lewis River - spring  9.30467\nx0.X.Sandy River - spring             8.59831\nx0.X.Upper Cowlitz River - spring     6.27949\nInitial states (x0) defined at t=0\n\nStandard errors have not been calculated. \nUse MARSSparamCIs to compute CIs and bias estimates.\n\n\n\n\nCode\nautoplot(fit3, plot.type=\"fitted.ytT\")\n\n\nMARSSresiduals.tT reported warnings. See msg element or attribute of returned residuals object.\n\n\n\n\n\nplot.type = fitted.ytT \n\n\n\n\n\nFinished plots.\n\n\n\nHypothesis 2: 3 independent populations based on run timing\n\n\n\nCode\nmod.list4&lt;-mod.list1\nrownames(chin_newdat)\n\n\n [1] \"Clackamas River - fall\"          \"Lewis River - fall\"             \n [3] \"Lower Cowlitz River - fall\"      \"Toutle River - fall\"            \n [5] \"Upper Cowlitz River - fall\"      \"Lewis River - late fall\"        \n [7] \"Sandy River - late fall\"         \"Kalama River - spring\"          \n [9] \"North Fork Lewis River - spring\" \"Sandy River - spring\"           \n[11] \"Upper Cowlitz River - spring\"   \n\n\nCode\nmod.list4$Z&lt;-factor(c(rep(\"fa\", 5), rep(\"l_fa\", 2), rep(\"Sp\", 4))) #creating factor based on run times\n#mod.list4\nfit4&lt;-MARSS(chin_newdat, model = mod.list4, method = \"BFGS\")\n\n\nSuccess! Converged in 568 iterations.\nFunction MARSSkfas used for likelihood calculation.\n\nMARSS fit is\nEstimation method: BFGS \nEstimation converged in 568 iterations. \nLog-likelihood: -501.0319 \nAIC: 1038.064   AICc: 1040.228   \n \n                                   Estimate\nA.Lewis River - fall               1.41e+00\nA.Lower Cowlitz River - fall       2.96e+00\nA.Toutle River - fall              1.52e+00\nA.Upper Cowlitz River - fall       4.49e-01\nA.Sandy River - late fall         -7.45e-01\nA.North Fork Lewis River - spring  8.78e-01\nA.Sandy River - spring             2.49e+00\nA.Upper Cowlitz River - spring     1.71e-01\nR.diag                             1.03e+00\nU.fa                               1.97e-03\nU.l_fa                            -1.99e-03\nU.Sp                              -2.08e-02\nQ.(fa,fa)                          2.31e-01\nQ.(l_fa,l_fa)                      3.88e-12\nQ.(Sp,Sp)                          1.39e-12\nx0.fa                              5.49e+00\nx0.l_fa                            9.13e+00\nx0.Sp                              6.10e+00\nInitial states (x0) defined at t=0\n\nStandard errors have not been calculated. \nUse MARSSparamCIs to compute CIs and bias estimates.\n\n\n\n\nCode\nautoplot(fit4, plot.type=\"fitted.ytT\")\n\n\n\n\n\nplot.type = fitted.ytT \n\n\n\n\n\nFinished plots.\n\n\n\n\nCode\nmod.list5&lt;-mod.list4\nmod.list5$Q&lt;-\"diagonal and equal\"\nfit5&lt;-MARSS(chin_newdat, model = mod.list5, control = list(maxit = 2000))\n\n\nSuccess! abstol and log-log tests passed at 419 iterations.\nAlert: conv.test.slope.tol is 0.5.\nTest with smaller values (&lt;0.1) to ensure convergence.\n\nMARSS fit is\nEstimation method: kem \nConvergence test: conv.test.slope.tol = 0.5, abstol = 0.001\nEstimation converged in 419 iterations. \nLog-likelihood: -512.9568 \nAIC: 1057.914   AICc: 1059.624   \n \n                                  Estimate\nA.Lewis River - fall               1.61011\nA.Lower Cowlitz River - fall       3.15768\nA.Toutle River - fall              1.70686\nA.Upper Cowlitz River - fall       0.65164\nA.Sandy River - late fall         -0.84303\nA.North Fork Lewis River - spring  0.91788\nA.Sandy River - spring             2.52482\nA.Upper Cowlitz River - spring     0.19157\nR.diag                             1.08461\nU.fa                               0.00745\nU.l_fa                             0.01049\nU.Sp                              -0.01849\nQ.diag                             0.05334\nx0.fa                              5.29045\nx0.l_fa                            9.14607\nx0.Sp                              6.08345\nInitial states (x0) defined at t=0\n\nStandard errors have not been calculated. \nUse MARSSparamCIs to compute CIs and bias estimates.\n\n\n\n\nCode\nautoplot(fit5, plot.type=\"fitted.ytT\")\n\n\n\n\n\nplot.type = fitted.ytT \n\n\n\n\n\nFinished plots.\n\n\n\n\nCode\nmod.list6&lt;-mod.list4\nmod.list6$Q&lt;-\"equalvarcov\"\nfit6&lt;-MARSS(chin_newdat, model = mod.list6, control = list(maxit = 2000))\n\n\nSuccess! abstol and log-log tests passed at 370 iterations.\nAlert: conv.test.slope.tol is 0.5.\nTest with smaller values (&lt;0.1) to ensure convergence.\n\nMARSS fit is\nEstimation method: kem \nConvergence test: conv.test.slope.tol = 0.5, abstol = 0.001\nEstimation converged in 370 iterations. \nLog-likelihood: -506.724 \nAIC: 1047.448   AICc: 1049.379   \n \n                                  Estimate\nA.Lewis River - fall               1.86873\nA.Lower Cowlitz River - fall       3.42045\nA.Toutle River - fall              1.99521\nA.Upper Cowlitz River - fall       0.98958\nA.Sandy River - late fall         -0.81266\nA.North Fork Lewis River - spring  0.93794\nA.Sandy River - spring             2.55274\nA.Upper Cowlitz River - spring     0.21590\nR.diag                             1.03257\nU.fa                               0.02001\nU.l_fa                             0.00719\nU.Sp                              -0.03876\nQ.diag                             0.11257\nQ.offdiag                          0.10630\nx0.fa                              5.00493\nx0.l_fa                            9.33436\nx0.Sp                              7.28177\nInitial states (x0) defined at t=0\n\nStandard errors have not been calculated. \nUse MARSSparamCIs to compute CIs and bias estimates.\n\n\n\n\nCode\nautoplot(fit6, plot.type=\"fitted.ytT\")\n\n\nMARSSresiduals.tT reported warnings. See msg element or attribute of returned residuals object.\n\n\n\n\n\nplot.type = fitted.ytT \n\n\n\n\n\nFinished plots."
  },
  {
    "objectID": "Lab-2/Final_Write_ups/Lab-2-team-2_final.html",
    "href": "Lab-2/Final_Write_ups/Lab-2-team-2_final.html",
    "title": "9  Team 2 - Lab 2",
    "section": "",
    "text": "General Questions\nEach group has the same general tasks, but you will adapt them as you work on the data.\nWe analyzed the Steelhead (Lower Columbia ESU). We decided to exclude the Gorge Tributary winter run because there was only 1 short time series, and focused the 9 remaining runs that belonged to Cascade major population group.\nWe tested 5 different population groups hypotheses: one population, individual populations, run timing groups, spatial groups, and correlation groups.\nOne population \\[\n\\begin{bmatrix} y_{1} \\\\ y_{2} \\\\ \\vdots \\\\y_{9} \\end{bmatrix}_{t} =\n\\begin{bmatrix}1\\\\\n1\\\\\n\\vdots\\\\\n\\\\\n1\\end{bmatrix}\nx_{t}  + \\mathbf{a} + \\mathbf{v_t} \\text{ where } \\mathbf{v_t} \\sim MVN(0, \\mathbf{R})\n\\]\n\\[\n\\begin{bmatrix} x \\end{bmatrix}_{t} =\n\\begin{bmatrix}1\\\\\n\\end{bmatrix}\nx_{t-1}  + u + w_t \\text{ where } w_t \\sim N(0,q)\n\\]\nIndividual populations \\[\n\\begin{bmatrix} y_{1} \\\\ y_{2} \\\\ \\vdots \\\\y_{9} \\end{bmatrix}_{t} =\nI_{9}\n\\begin{bmatrix} x_{1} \\\\ x_{2} \\\\ \\vdots \\\\x_{9} \\end{bmatrix}_{t} + \\mathbf{a} + \\mathbf{v_t} \\text{ where } \\mathbf{v_t} \\sim MVN(0, \\mathbf{R})\n\\] \\[\n\\begin{bmatrix} x_{1} \\\\\nx_{2} \\\\\n\\vdots \\\\\nx_{9}\n\\end{bmatrix}_{t}\n=\nI_{9}\n\\begin{bmatrix} x_{1} \\\\\nx_{2} \\\\\n\\vdots \\\\\nx_{9}\n\\end{bmatrix}_{t-1}  + \\begin{bmatrix}u_{1}\\\\u_{2}\\\\ \\vdots \\\\u_{9} \\end{bmatrix}  + \\mathbf{w_t} \\text{ where } \\mathbf{w_t} \\sim MVN(0, \\mathbf{Q})\n\\] Run Timing Groups, Spatial Groups, Correlation Groups We provide the Z matrices for the 3 groupings below. \\[\n\\begin{equation*}\n\\begin{array}{rcccc}\n&Run Timing&Spatial&Correlation\\\\\n&\\text{summer winter}&\\text{Coweeman E-Fork-Lewis Kalama Cowlitz Washougal}&\\text{Coweeman Kalama Cowlitz}\\\\\n\\hline\n\\begin{array}{r}\\text{Coweeman - W}\\\\ \\text{Fork E Lewis - W} \\\\ \\text{Kalama - S} \\\\ \\text{Kalama - W} \\\\\n\\text{Lower Cowlitz - W} \\\\ \\text{Toutle - W} \\\\ \\text{Tilton - W} \\\\ \\text{Upper Cowlitz - W} \\\\ \\text{Washougal - W}\\end{array}&\n\\begin{bmatrix}\n0 & 1 \\\\\n0 & 1 \\\\\n1 & 0 \\\\\n0 & 1 \\\\\n0 & 1 \\\\\n0 & 1 \\\\\n0 & 1 \\\\\n0 & 1 \\\\\n0 & 1 \\\\\n\\end{bmatrix}&\n\\begin{bmatrix}\n1 & 0 & 0 & 0 &0 \\\\\n0 & 1 & 0 & 0 &0 \\\\\n0 & 0 & 1 & 0 &0 \\\\\n0 & 0 & 1 & 0 &0 \\\\\n0 & 0 & 0 & 1 &0 \\\\\n1 & 0 & 0 & 0 &0 \\\\\n0 & 0 & 0 & 1 &0 \\\\\n1 & 0 & 0 & 0 &0 \\\\\n0 & 0 & 0 & 0 &1 \\\\\n\\end{bmatrix}&\n\\begin{bmatrix}\n1 & 0 & 0 \\\\\n1 & 0 & 0 \\\\\n0 & 1 & 0 \\\\\n0 & 1 & 0 \\\\\n0 & 0 & 1 \\\\\n1 & 0 & 0 \\\\\n0 & 0 & 1 \\\\\n0 & 0 & 1 \\\\\n1 & 0 & 0\n\\end{bmatrix}&\n\\end{array}\n\\end{equation*}\n\\]\nWe assume that all models have identical observation errors, thus a diagonal and equal R matrix. \\[\n\\mathbf{R} =\n\\begin{bmatrix} r & 0  & ...& 0\\\\\n0 & r &  ...& 0\\\\\n\\vdots & 0 & \\ddots & \\vdots\\\\\n0 & 0 & 0  & r \\end{bmatrix}\n\\] For each model we test both equal and unequal biases for the states. We also assumed all states were correlated over time and test both equal var-cov and unconstrained process errors for each state.\nEqual Bias \\[\n\\mathbf{u} =\n\\begin{bmatrix} u\\\\\n\\vdots\\\\\nu\\end{bmatrix}\n\\] Unequal Bias \\[\n\\mathbf{u} =\n\\begin{bmatrix} u_{1}\\\\\n\\vdots\\\\\nu_{i}\\end{bmatrix} \\text{where i is # of states}\n\\]\nEqual Variance-Covariance \\[\n\\begin{equation}\n\\mathbf{Q}=\\begin{bmatrix}\n    q & c & ... & c \\\\\n    c & q & \\ddots & \\vdots\\\\\n    \\vdots & c & \\ddots & c \\\\\n    c & c & ... & q \\end{bmatrix}\n\\end{equation}\n\\text{where # of rows is equal to # of states}\n\\] Unconstrained \\[\n\\begin{equation}\n\\mathbf{Q}=\\begin{bmatrix}\n    q_{1}& c_{1,2} & ... & c_{1,i} \\\\\n    c_{1,2} & q_{2} & \\ddots & c_{2,i}\\\\\n    \\vdots & \\ddots & \\ddots & \\vdots \\\\\n    c_{1,i} & ... & c_{i-1,i} & q_{i} \\end{bmatrix}\n\\end{equation}\n\\text{where # of rows is equal to # of states}\n\\]\nLoad the data.\nCode\nlibrary(tidyverse)\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\nlibrary(dplyr)\nlibrary(janitor)\n\n\n\nAttaching package: 'janitor'\n\nThe following objects are masked from 'package:stats':\n\n    chisq.test, fisher.test\n\n\nCode\nlibrary(MARSS)\nlibrary(forecast)\n\n\nRegistered S3 method overwritten by 'quantmod':\n  method            from\n  as.zoo.data.frame zoo \n\n\nCode\nlibrary(broom)\n\nload(here::here(\"Lab-2\", \"Data_Images\", \"columbia-river.rda\"))\n\n#Evolutionary Significant Units\nesu &lt;- unique(columbia.river$esu_dps)\nesu\n\n\n[1] \"Steelhead (Middle Columbia River DPS)\"     \n[2] \"Steelhead (Upper Columbia River DPS)\"      \n[3] \"Steelhead (Lower Columbia River DPS)\"      \n[4] \"Salmon, coho (Lower Columbia River ESU)\"   \n[5] \"Salmon, Chinook (Lower Columbia River ESU)\"\nCode\ndf &lt;- columbia.river %&gt;% subset(esu_dps %in% \"Steelhead (Lower Columbia River DPS)\")\n\ncat(\"colnames: \", colnames(df), \"\\n\")\n\n\ncolnames:  species esu_dps majorpopgroup esapopname commonpopname run spawningyear value value_type \n\n\nCode\nunique(df$esapopname)\n\n\n [1] \"Steelhead (Lower Columbia River DPS) Kalama River - summer\"           \n [2] \"Steelhead (Lower Columbia River DPS) Coweeman River - winter\"         \n [3] \"Steelhead (Lower Columbia River DPS) East Fork Lewis River - winter\"  \n [4] \"Steelhead (Lower Columbia River DPS) Kalama River - winter\"           \n [5] \"Steelhead (Lower Columbia River DPS) Lower Cowlitz River - winter\"    \n [6] \"Steelhead (Lower Columbia River DPS) South Fork Toutle River - winter\"\n [7] \"Steelhead (Lower Columbia River DPS) Tilton River - winter\"           \n [8] \"Steelhead (Lower Columbia River DPS) Upper Cowlitz River - winter\"    \n [9] \"Steelhead (Lower Columbia River DPS) Washougal River - winter\"        \n[10] \"Steelhead (Lower Columbia River DPS) Upper Gorge Tributaries - winter\"\n\n\nCode\nunique(df$commonpopname)\n\n\n [1] \"Kalama Summer Steelhead\"                  \n [2] \"Coweeman Winter Steelhead\"                \n [3] \"East Fork Lewis Winter Steelhead\"         \n [4] \"Kalama Winter Steelhead\"                  \n [5] \"Lower Cowlitz Winter Steelhead\"           \n [6] \"South Fork Toutle Winter Steelhead\"       \n [7] \"Tilton Winter Steelhead\"                  \n [8] \"Upper Cowlitz and Cispus Winter Steelhead\"\n [9] \"Washougal Winter Steelhead\"               \n[10] \"Upper Gorge (Columbia) Winter Steelhead\"  \n\n\nCode\ndf$esapopname2 &lt;- stringr::str_replace(df$esapopname, \"Steelhead [(]Lower Columbia River DPS[)] \", \"\")\nunique(df$esapopname2)\n\n\n [1] \"Kalama River - summer\"            \"Coweeman River - winter\"         \n [3] \"East Fork Lewis River - winter\"   \"Kalama River - winter\"           \n [5] \"Lower Cowlitz River - winter\"     \"South Fork Toutle River - winter\"\n [7] \"Tilton River - winter\"            \"Upper Cowlitz River - winter\"    \n [9] \"Washougal River - winter\"         \"Upper Gorge Tributaries - winter\"\n\n\nCode\nggplot(df, aes(x=spawningyear, y=log(value), color=majorpopgroup)) + \n  geom_point(size=2, na.rm = TRUE) + \n  theme(strip.text.x = element_text(size = 3)) +\n  theme(axis.text.x = element_text(size = 5, angle = 90)) +\n  facet_wrap(~esapopname2) +\n  ggtitle('Lower Columbia Steelhead Populations')+\n  theme(strip.text.x = element_text(size = 10))\nWrangle the data.\nCode\nesuname &lt;- esu[3]\ndat &lt;- columbia.river %&gt;% \n  subset(esu_dps == esuname) %&gt;% # get only this ESU\n  mutate(log.spawner = log(value)) %&gt;% # create a column called log.spawner\n  select(esapopname, spawningyear, log.spawner) %&gt;% # get just the columns that I need\n  pivot_wider(names_from = \"esapopname\", values_from = \"log.spawner\") %&gt;% \n  column_to_rownames(var = \"spawningyear\") %&gt;% # make the years rownames\n  as.matrix() %&gt;% # turn into a matrix with year down the rows\n  t() # make time across the columns\ndat[is.na(dat)] &lt;- NA\n\n## Fixing row names\ntmp &lt;- rownames(dat)\ntmp &lt;- stringr::str_replace(tmp, \"Steelhead [(]Lower Columbia River DPS[)]\", \"\")\ntmp &lt;- make_clean_names(tmp)\nrownames(dat) &lt;- tmp\n\ndat &lt;- dat[1:9,]# remove upper gorge\ndat &lt;- dat[ order(row.names(dat)), ]## sort\nIn this next section, we test for age structured cycling of steelhead populations or “season” in our best “spatial” model.\nOur best model was our “spatial” group model, which was designed based on the spatial proximity of the subwatersheds of study and their steelhead populations. This grouped 9 steelhead populations together to form 5 populations or 5 “hidden states” of steelhead abundance dynamics through time. This implies that steelhead populations located closer in space or within the same catchment share temporal variation in their abundance dynamics, suggesting that populations are largely influenced by similar river or watershed characteristics (e.g., habitat quality or availability) and not so much run timing. All run populations seem to have increased since the earliest year of data, though some populations seem to have decreased slightly in recent years (e.g., Washougal, Cowlitz, East Fork Lewis). Our best performing model seems to fit the data well with no major problems in the residuals, with the exception of cycling.\nWe found some evidence for 5 year cycles, though it did not lower the AIC relative to the spatial model. This makes sense since steelhead (relative to other salmonids) do not exhibit as much cycling. Even within these 9 runs, we see some runs (e.g. Kalama winter) show more cycling patterns than others (e.g. Upper Cowlitz winter) do. A reason why AIC does not support adding 5 year cycles to all runs is that not all runs need cycling and the addition of parameters for these runs is superfluous. Cycling did somewhat improve autocorrelation in our model residuals by reducing the number of statistically significant ACF lags.\nFuture improvements to our best performing spatial model would be to include cycling in only populations that strong seasonal patterns. This, however, involves “hand-baking” a series of upper C matrices and was outside the scope of this study.\nLiz worked on the model with 9 states, the spatial model, correlation model, model selection process, and cycling model. Terrance worked on the methods, matrix notations, simple model with 1 state, and run timing model. Eric worked on adding the cycling component and model selection of cycling period. All group members worked on the discussion and interpretation."
  },
  {
    "objectID": "Lab-2/Final_Write_ups/Lab-2-team-2_final.html#the-simplest-model",
    "href": "Lab-2/Final_Write_ups/Lab-2-team-2_final.html#the-simplest-model",
    "title": "9  Team 2 - Lab 2",
    "section": "The simplest model",
    "text": "The simplest model\nFitting the most simple model to help determine the need to group populations: One big population with different observations (populations).\n\n\nCode\nmod.list.0 &lt;- list(B = matrix(1), U = matrix(\"u\"), Q = matrix(\"q\"), \n    Z = matrix(1, 9, 1), A = \"scaling\", R = \"diagonal and equal\", \n    x0 = matrix(\"mu\"), tinitx = 0)\nfit_simple &lt;- MARSS(dat, model=mod.list.0, control=list(maxit=1000))\n\n\nSuccess! abstol and log-log tests passed at 38 iterations.\nAlert: conv.test.slope.tol is 0.5.\nTest with smaller values (&lt;0.1) to ensure convergence.\n\nMARSS fit is\nEstimation method: kem \nConvergence test: conv.test.slope.tol = 0.5, abstol = 0.001\nEstimation converged in 38 iterations. \nLog-likelihood: -247.9172 \nAIC: 519.8343   AICc: 521.1792   \n \n                                 Estimate\nA.east_fork_lewis_river_winter   -0.51303\nA.kalama_river_summer             0.58517\nA.kalama_river_winter             0.82974\nA.lower_cowlitz_river_winter      0.28048\nA.south_fork_toutle_river_winter  0.33119\nA.tilton_river_winter            -0.21650\nA.upper_cowlitz_river_winter      0.21896\nA.washougal_river_winter         -0.38030\nR.diag                            0.38503\nU.u                              -0.00853\nQ.q                               0.04702\nx0.mu                             5.81906\nInitial states (x0) defined at t=0\n\nStandard errors have not been calculated. \nUse MARSSparamCIs to compute CIs and bias estimates.\n\n\nCode\nplot(fit_simple, plot.type=\"fitted.ytT\")\n\n\n\n\n\nplot type =  fitted.ytT  Observations with fitted values\n\n\nWe see that the simple model is not the best at fitting the population estimates for many of the populations (e.g., Upper Cowlitz winter, East Fork Lewis winter). Many of the residuals do not appear to be stationary."
  },
  {
    "objectID": "Lab-2/Final_Write_ups/Lab-2-team-2_final.html#the-most-flexible-model",
    "href": "Lab-2/Final_Write_ups/Lab-2-team-2_final.html#the-most-flexible-model",
    "title": "9  Team 2 - Lab 2",
    "section": "The most flexible model",
    "text": "The most flexible model\nFitting the most flexible model to help determine spatial Z hypotheses: Individual populations with an unconstrained Q matrix and unequal U\n\n\nCode\nmod.list1 &lt;- list(\n  U = \"unequal\",\n  R = \"diagonal and equal\",\n  Q = \"unconstrained\"\n)\nfit1 &lt;- MARSS(dat, model=mod.list1, control=list(maxit=800))\n\n\nSuccess! abstol and log-log tests passed at 792 iterations.\nAlert: conv.test.slope.tol is 0.5.\nTest with smaller values (&lt;0.1) to ensure convergence.\n\nMARSS fit is\nEstimation method: kem \nConvergence test: conv.test.slope.tol = 0.5, abstol = 0.001\nEstimation converged in 792 iterations. \nLog-likelihood: -162.2543 \nAIC: 452.5085   AICc: 498.7308   \n \n                                    Estimate\nR.diag                               0.07004\nU.X.coweeman_river_winter            0.05643\nU.X.east_fork_lewis_river_winter     0.06603\nU.X.kalama_river_summer              0.05382\nU.X.kalama_river_winter              0.01357\nU.X.lower_cowlitz_river_winter       0.05480\nU.X.south_fork_toutle_river_winter   0.05081\nU.X.tilton_river_winter              0.03231\nU.X.upper_cowlitz_river_winter       0.10266\nU.X.washougal_river_winter           0.08353\nQ.(1,1)                              0.18254\nQ.(2,1)                              0.20888\nQ.(3,1)                             -0.06669\nQ.(4,1)                             -0.01073\nQ.(5,1)                              0.07385\nQ.(6,1)                              0.21461\nQ.(7,1)                              0.01004\nQ.(8,1)                             -0.00336\nQ.(9,1)                              0.20057\nQ.(2,2)                              0.30487\nQ.(3,2)                             -0.16277\nQ.(4,2)                             -0.03323\nQ.(5,2)                              0.18199\nQ.(6,2)                              0.23406\nQ.(7,2)                              0.13516\nQ.(8,2)                              0.10168\nQ.(9,2)                              0.23761\nQ.(3,3)                              0.21954\nQ.(4,3)                              0.11641\nQ.(5,3)                             -0.08252\nQ.(6,3)                             -0.01588\nQ.(7,3)                             -0.04973\nQ.(8,3)                              0.00917\nQ.(9,3)                             -0.04761\nQ.(4,4)                              0.09583\nQ.(5,4)                              0.04185\nQ.(6,4)                              0.04127\nQ.(7,4)                              0.08378\nQ.(8,4)                              0.11758\nQ.(9,4)                              0.02286\nQ.(5,5)                              0.28695\nQ.(6,5)                              0.13628\nQ.(7,5)                              0.36189\nQ.(8,5)                              0.24063\nQ.(9,5)                              0.11017\nQ.(6,6)                              0.29428\nQ.(7,6)                              0.09380\nQ.(8,6)                              0.04003\nQ.(9,6)                              0.24779\nQ.(7,7)                              0.50421\nQ.(8,7)                              0.34139\nQ.(9,7)                              0.05553\nQ.(8,8)                              0.47369\nQ.(9,8)                              0.08841\nQ.(9,9)                              0.24231\nx0.X.coweeman_river_winter           3.59695\nx0.X.east_fork_lewis_river_winter    2.23471\nx0.X.kalama_river_summer             6.15197\nx0.X.kalama_river_winter             6.56522\nx0.X.lower_cowlitz_river_winter      2.71630\nx0.X.south_fork_toutle_river_winter  3.85807\nx0.X.tilton_river_winter             2.83736\nx0.X.upper_cowlitz_river_winter      1.29622\nx0.X.washougal_river_winter          2.30745\nInitial states (x0) defined at t=0\n\nStandard errors have not been calculated. \nUse MARSSparamCIs to compute CIs and bias estimates.\n\n\n\n\nCode\nplot(fit1, plot.type=\"fitted.ytT\")\n\n\nMARSSresiduals.tT reported warnings. See msg element or attribute of returned residuals object.\n\n\n\n\n\nplot type =  fitted.ytT  Observations with fitted values\n\n\nCode\nlibrary(corrplot)\n\n\ncorrplot 0.92 loaded\n\n\nCode\nQ &lt;- coef(fit1, type=\"matrix\")$Q\ncorrmat &lt;- diag(1/sqrt(diag(Q))) %*% Q %*% diag(1/sqrt(diag(Q)))\ncorrplot(corrmat)\n\n\n\n\n\nSome of the populations are correlated. This implies it would be reasonable to test for equal variance covariance, along with some other population structures.\nWe opted to test this in a for loop to compare multiple spatial structures, u options, and two options for Q."
  },
  {
    "objectID": "Lab-2/Final_Write_ups/Lab-2-team-2_final.html#model-assumptions",
    "href": "Lab-2/Final_Write_ups/Lab-2-team-2_final.html#model-assumptions",
    "title": "9  Team 2 - Lab 2",
    "section": "Model Assumptions",
    "text": "Model Assumptions\nBelow we setting up population grouping hypotheses (Z matrices), correlation structures, drift or “bias” terms, and the fixed model list.\n\n\nCode\n# Here we evaluated the data support for the following hypotheses about Lower Columbia salmon river trends\n# Each Z model is a hypothesis\n\n## Simple run timing groupings\n# summer = kalama_river_summer\n# winter = remaining population\n\n## Simple spatial groupings\n# coweeman = coweeman and sf toutle\n# ef_lewis = east fork lewis\n# kalama = kalama summer and winter\n# cowlitz = lower cowlitz, tilton, and upper cowlitz\n# washougal = washougal\n\n## Correlation spatial groupings\n# coweeman = coweema, ef_lewis, sf toutle, washougal\n# kalama = kalama summer and winter\n# cowlitz = lower cowlitz, tilton, and upper cowlitz\n\nZ.models &lt;- list(\n  H1 = matrix(1,9,1), #one hidden population state\n  H2 = factor(c(\"coweeman\",\"ef_lewis\", \"kalama_sum\",\n                'kalama_win', \"low_cowlitz\", \"sf_toutle\",\n                \"tilton\", \"up_cowlitz\", \"washougal\")), #states are defined by individual population\n  H3 = factor(c(\"winter\",\"winter\", \"summer\",\n                'winter', \"winter\", \"winter\",\n                \"winter\", \"winter\", \"winter\")),# states defined by running timing grouping (n = 2)\n  H4 = factor(c(\"coweeman\",\"ef_lewis\", \"kalama\",\n                'kalama', \"cowlitz\", \"coweeman\",\n                \"cowlitz\", \"cowlitz\", \"washougal\")),# states defined by spatial grouping (n = 5)\n  H5 = factor(c(\"coweeman\",\"coweeman\", \"kalama\",\n                'kalama', \"cowlitz\", \"coweeman\",\n                \"cowlitz\", \"cowlitz\", \"coweeman\"))# states defined by correlation (n = 3)\n)\n\nnames(Z.models) &lt;- c(\"one_population\",\"indiv_population\",\"run_timing_groups\",'spatial_groups',\"corr_groups\")\n\n# Also testing different process error varcovar matrices\nQ.models2 &lt;- c(\"equalvarcov\",\"unconstrained\")\n\n# Bias terms\nu2 &lt;- c(\"unequal\", 'equal')\n\n# Setting fixed portion of mod list\nmod.list = list(\n  A = \"scaling\",\n  R = \"diagonal and equal\")"
  },
  {
    "objectID": "Lab-2/Final_Write_ups/Lab-2-team-2_final.html#marss-model-selection",
    "href": "Lab-2/Final_Write_ups/Lab-2-team-2_final.html#marss-model-selection",
    "title": "9  Team 2 - Lab 2",
    "section": "MARSS Model Selection",
    "text": "MARSS Model Selection\nRun MARSS models.\n\n\nCode\nout.tab &lt;- NULL\nfits &lt;- list()\nfor(i in 1:length(Z.models)){\n    for(Q.model in Q.models2){\n      for(U.model in u2){\n      fit.model = c(list(Z=Z.models[[i]], Q=Q.model, U=U.model), mod.list)\n      fit = MARSS(dat, model=fit.model,\n                silent=TRUE, control=list(maxit=3000))\n      out=data.frame(H=names(Z.models)[i],Q=Q.model,U=U.model,\n                   logLik=fit$logLik, AICc=fit$AICc, num.param=fit$num.params,\n                   m=length(unique(Z.models[[i]])),\n                   num.iter=fit$numIter, converged=!fit$convergence,\n                   stringsAsFactors = FALSE)\n      out.tab=rbind(out.tab,out)\n      fits=c(fits,list(fit))\n      } \n    }\n  }\n\nmin.AICc &lt;- order(out.tab$AICc)\nout.tab.1 &lt;- out.tab[min.AICc, ]\nout.tab.1 &lt;- cbind(out.tab.1, delta.AICc = out.tab.1$AICc - out.tab.1$AICc[1])\nout.tab.1 &lt;- cbind(out.tab.1, rel.like = exp(-1 * out.tab.1$delta.AICc/2))\nout.tab.1 &lt;- cbind(out.tab.1, AIC.weight = out.tab.1$rel.like/sum(out.tab.1$rel.like))\nout.tab.1\n\n\n                   H             Q       U    logLik     AICc num.param m\n16    spatial_groups unconstrained   equal -200.3077 459.0557        26 5\n15    spatial_groups unconstrained unequal -199.6277 467.9469        30 5\n14    spatial_groups   equalvarcov   equal -221.5804 470.7365        13 5\n6   indiv_population   equalvarcov   equal -223.3296 474.2350        13 9\n13    spatial_groups   equalvarcov unequal -221.2383 479.1726        17 5\n8   indiv_population unconstrained   equal -167.4589 480.8753        56 9\n5   indiv_population   equalvarcov unequal -221.2639 488.6713        21 9\n18       corr_groups   equalvarcov   equal -233.1729 493.9216        13 3\n20       corr_groups unconstrained   equal -229.2451 495.1862        17 3\n17       corr_groups   equalvarcov unequal -232.9357 497.9674        15 3\n7   indiv_population unconstrained unequal -162.2543 498.7308        64 9\n19       corr_groups unconstrained unequal -229.1000 499.5778        19 3\n10 run_timing_groups   equalvarcov   equal -244.9572 517.4901        13 2\n12 run_timing_groups unconstrained   equal -244.8224 519.4708        14 2\n9  run_timing_groups   equalvarcov unequal -244.8625 519.5512        14 2\n1     one_population   equalvarcov unequal -247.9172 521.1792        12 1\n2     one_population   equalvarcov   equal -247.9172 521.1792        12 1\n3     one_population unconstrained unequal -247.9172 521.1792        12 1\n4     one_population unconstrained   equal -247.9172 521.1792        12 1\n11 run_timing_groups unconstrained unequal -244.7254 521.5469        15 2\n   num.iter converged delta.AICc     rel.like   AIC.weight\n16      378      TRUE   0.000000 1.000000e+00 9.850231e-01\n15      374      TRUE   8.891254 1.172975e-02 1.155407e-02\n14       63      TRUE  11.680779 2.907709e-03 2.864161e-03\n6        77      TRUE  15.179270 5.056657e-04 4.980924e-04\n13       75      TRUE  20.116881 4.282276e-05 4.218141e-05\n8       797      TRUE  21.819604 1.827819e-05 1.800444e-05\n5       683      TRUE  29.615606 3.707258e-07 3.651735e-07\n18       69      TRUE  34.865945 2.685073e-08 2.644859e-08\n20       60      TRUE  36.130531 1.426773e-08 1.405405e-08\n17       87      TRUE  38.911736 3.551599e-09 3.498407e-09\n7       792      TRUE  39.675076 2.424749e-09 2.388433e-09\n19       60      TRUE  40.522114 1.587577e-09 1.563800e-09\n10       31      TRUE  58.434441 2.047021e-13 2.016363e-13\n12       57      TRUE  60.415106 7.603724e-14 7.489844e-14\n9        31      TRUE  60.495478 7.304222e-14 7.194827e-14\n1        38      TRUE  62.123467 3.236387e-14 3.187916e-14\n2        38      TRUE  62.123467 3.236387e-14 3.187916e-14\n3        38      TRUE  62.123467 3.236387e-14 3.187916e-14\n4        38      TRUE  62.123467 3.236387e-14 3.187916e-14\n11       57      TRUE  62.491240 2.692773e-14 2.652443e-14\n\n\nThe best model (as supported by AICc) includes 5 states (our “spatial populations” model) that are correlated with unique variance and covariance terms (unconstrained Q) with the same drift term (U)"
  },
  {
    "objectID": "Lab-2/Final_Write_ups/Lab-2-team-2_final.html#inspecting-the-best-model-spatial-group-unconstrained-q-equal-u",
    "href": "Lab-2/Final_Write_ups/Lab-2-team-2_final.html#inspecting-the-best-model-spatial-group-unconstrained-q-equal-u",
    "title": "9  Team 2 - Lab 2",
    "section": "Inspecting the best model (spatial group, unconstrained Q, equal U)",
    "text": "Inspecting the best model (spatial group, unconstrained Q, equal U)\n\n\nCode\nbest_mod &lt;- fits[[16]]\nbest_mod\n\n\n\nMARSS fit is\nEstimation method: kem \nConvergence test: conv.test.slope.tol = 0.5, abstol = 0.001\nEstimation converged in 378 iterations. \nLog-likelihood: -200.3077 \nAIC: 452.6153   AICc: 459.0557   \n \n                                 Estimate\nA.kalama_river_winter             0.24416\nA.south_fork_toutle_river_winter  0.38706\nA.tilton_river_winter            -0.75459\nA.upper_cowlitz_river_winter     -0.19777\nR.diag                            0.15851\nU.1                               0.03097\nQ.(1,1)                           0.22524\nQ.(2,1)                           0.17195\nQ.(3,1)                          -0.01570\nQ.(4,1)                           0.02272\nQ.(5,1)                           0.17217\nQ.(2,2)                           0.19999\nQ.(3,2)                          -0.07064\nQ.(4,2)                           0.12119\nQ.(5,2)                           0.16006\nQ.(3,3)                           0.09252\nQ.(4,3)                           0.00657\nQ.(5,3)                          -0.01488\nQ.(4,4)                           0.38669\nQ.(5,4)                           0.11117\nQ.(5,5)                           0.15486\nx0.coweeman                       3.81220\nx0.ef_lewis                       2.92567\nx0.kalama                         6.30723\nx0.cowlitz                        2.50039\nx0.washougal                      3.25935\nInitial states (x0) defined at t=0\n\nStandard errors have not been calculated. \nUse MARSSparamCIs to compute CIs and bias estimates.\n\n\nCode\nplot(best_mod, plot.type = \"fitted.ytT\")\n\n\nMARSSresiduals.tT reported warnings. See msg element or attribute of returned residuals object.\n\n\n\n\n\nplot type =  fitted.ytT  Observations with fitted values\n\n\nCode\nplot(best_mod, plot.type = \"acf.std.model.resids.ytt1\")\n\n\nMARSSresiduals.tt1 reported warnings. See msg element of returned residuals object.\n\n\n\n\n\nplot type = acf.std.model.resids.ytt1\n\n\nIn our best model, we do see some autocorrelation in our residuals. In the next section, we will try to include a covariate of season into our best model and see if this improves the model fit."
  },
  {
    "objectID": "Lab-2/Final_Write_ups/Lab-2-team-2_final.html#comparing-best-model-to-the-most-flexible-model",
    "href": "Lab-2/Final_Write_ups/Lab-2-team-2_final.html#comparing-best-model-to-the-most-flexible-model",
    "title": "9  Team 2 - Lab 2",
    "section": "Comparing best model to the most flexible model",
    "text": "Comparing best model to the most flexible model\n\n\nCode\nplot(fit1, plot.type=\"fitted.ytT\")#flexible\n\n\nMARSSresiduals.tT reported warnings. See msg element or attribute of returned residuals object.\n\n\n\n\n\nplot type =  fitted.ytT  Observations with fitted values\n\n\nCode\nplot(best_mod, plot.type=\"fitted.ytT\")#best\n\n\nMARSSresiduals.tT reported warnings. See msg element or attribute of returned residuals object.\n\n\n\n\n\nplot type =  fitted.ytT  Observations with fitted values\n\n\nDo our estimates differ depending on the assumptions of the structure of the data, i.e. our assumptions about the x’s, Q, and U?\nDefinitely! The more flexible model (individual states, unequal bias term) produces more variable forecasts (with some populations increasing or decreasing through time). Our spatial model (5 states, equal bias term) provides relatively stable forecasts across populations, likely due to the “equal” bias term."
  },
  {
    "objectID": "Lab-2/Final_Write_ups/Lab-2-team-2_final.html#initial-model-fitting",
    "href": "Lab-2/Final_Write_ups/Lab-2-team-2_final.html#initial-model-fitting",
    "title": "9  Team 2 - Lab 2",
    "section": "Initial model fitting",
    "text": "Initial model fitting\n\n\nCode\nZ.mat &lt;-  factor(c(\"coweeman\",\"ef_lewis\", \"kalama\",\n                'kalama', \"cowlitz\", \"coweeman\",\n                \"cowlitz\", \"cowlitz\", \"washougal\")) #Our best model Z matrix\n\n# Setting up 3-5 year cycles as a covariate\nTT &lt;- dim(dat)[2]\ncovariates &lt;- rbind(\n  forecast::fourier(ts(1:TT, freq=3), K=1) |&gt; t(),\n  forecast::fourier(ts(1:TT, freq=4), K=1) |&gt; t(),\n  forecast::fourier(ts(1:TT, freq=5), K=1) |&gt; t()\n)\n\nmod.list2 = list(\n  U = \"equal\",\n  Q = \"unconstrained\", \n  Z = Z.mat,\n  A = \"scaling\",\n  R = \"diagonal and equal\",\n  D = \"unconstrained\", # We include these in the D matrix because the age structure cycling of salmon typically affects our observations rather than the state\n  d = covariates)\n\nfit_season &lt;- MARSS(dat, model=mod.list2)\n\n\nSuccess! abstol and log-log tests passed at 393 iterations.\nAlert: conv.test.slope.tol is 0.5.\nTest with smaller values (&lt;0.1) to ensure convergence.\n\nMARSS fit is\nEstimation method: kem \nConvergence test: conv.test.slope.tol = 0.5, abstol = 0.001\nEstimation converged in 393 iterations. \nLog-likelihood: -171.8029 \nAIC: 503.6058   AICc: 582.6302   \n \n                                         Estimate\nA.kalama_river_winter                    0.252970\nA.south_fork_toutle_river_winter         0.343256\nA.tilton_river_winter                   -0.903094\nA.upper_cowlitz_river_winter            -0.320282\nR.diag                                   0.122966\nU.1                                      0.031019\nQ.(1,1)                                  0.151655\nQ.(2,1)                                  0.103304\nQ.(3,1)                                 -0.006630\nQ.(4,1)                                  0.048822\nQ.(5,1)                                  0.076574\nQ.(2,2)                                  0.137173\nQ.(3,2)                                 -0.063070\nQ.(4,2)                                  0.146876\nQ.(5,2)                                  0.073604\nQ.(3,3)                                  0.094141\nQ.(4,3)                                 -0.012518\nQ.(5,3)                                  0.003246\nQ.(4,4)                                  0.396928\nQ.(5,4)                                  0.114513\nQ.(5,5)                                  0.060789\nx0.coweeman                              4.260305\nx0.ef_lewis                              3.498555\nx0.kalama                                6.221230\nx0.cowlitz                               2.861678\nx0.washougal                             3.978254\nD.(coweeman_river_winter,S1-3)           0.186021\nD.(east_fork_lewis_river_winter,S1-3)    0.157392\nD.(kalama_river_summer,S1-3)            -0.072940\nD.(kalama_river_winter,S1-3)             0.022498\nD.(lower_cowlitz_river_winter,S1-3)     -0.184966\nD.(south_fork_toutle_river_winter,S1-3)  0.144443\nD.(tilton_river_winter,S1-3)            -0.052278\nD.(upper_cowlitz_river_winter,S1-3)     -0.160372\nD.(washougal_river_winter,S1-3)          0.197520\nD.(coweeman_river_winter,C1-3)          -0.044046\nD.(east_fork_lewis_river_winter,C1-3)    0.089743\nD.(kalama_river_summer,C1-3)            -0.000429\nD.(kalama_river_winter,C1-3)            -0.021383\nD.(lower_cowlitz_river_winter,C1-3)     -0.275540\nD.(south_fork_toutle_river_winter,C1-3)  0.127018\nD.(tilton_river_winter,C1-3)             0.088516\nD.(upper_cowlitz_river_winter,C1-3)      0.266990\nD.(washougal_river_winter,C1-3)          0.040757\nD.(coweeman_river_winter,S1-4)          -0.117197\nD.(east_fork_lewis_river_winter,S1-4)   -0.040715\nD.(kalama_river_summer,S1-4)            -0.022386\nD.(kalama_river_winter,S1-4)             0.071430\nD.(lower_cowlitz_river_winter,S1-4)     -0.451392\nD.(south_fork_toutle_river_winter,S1-4) -0.068067\nD.(tilton_river_winter,S1-4)             0.122578\nD.(upper_cowlitz_river_winter,S1-4)      0.059695\nD.(washougal_river_winter,S1-4)         -0.219913\nD.(coweeman_river_winter,C1-4)           0.124410\nD.(east_fork_lewis_river_winter,C1-4)    0.127488\nD.(kalama_river_summer,C1-4)            -0.066523\nD.(kalama_river_winter,C1-4)             0.155787\nD.(lower_cowlitz_river_winter,C1-4)     -0.246952\nD.(south_fork_toutle_river_winter,C1-4)  0.068655\nD.(tilton_river_winter,C1-4)             0.125492\nD.(upper_cowlitz_river_winter,C1-4)      0.103936\nD.(washougal_river_winter,C1-4)          0.195852\nD.(coweeman_river_winter,S1-5)          -0.163883\nD.(east_fork_lewis_river_winter,S1-5)   -0.082063\nD.(kalama_river_summer,S1-5)             0.128463\nD.(kalama_river_winter,S1-5)             0.068320\nD.(lower_cowlitz_river_winter,S1-5)      0.409315\nD.(south_fork_toutle_river_winter,S1-5) -0.009286\nD.(tilton_river_winter,S1-5)            -0.386147\nD.(upper_cowlitz_river_winter,S1-5)      0.087418\nD.(washougal_river_winter,S1-5)         -0.069609\nD.(coweeman_river_winter,C1-5)          -0.120105\nD.(east_fork_lewis_river_winter,C1-5)   -0.286216\nD.(kalama_river_summer,C1-5)             0.054608\nD.(kalama_river_winter,C1-5)             0.173239\nD.(lower_cowlitz_river_winter,C1-5)      0.255956\nD.(south_fork_toutle_river_winter,C1-5) -0.358093\nD.(tilton_river_winter,C1-5)            -0.154457\nD.(upper_cowlitz_river_winter,C1-5)     -0.001424\nD.(washougal_river_winter,C1-5)         -0.363120\nInitial states (x0) defined at t=0\n\nStandard errors have not been calculated. \nUse MARSSparamCIs to compute CIs and bias estimates."
  },
  {
    "objectID": "Lab-2/Final_Write_ups/Lab-2-team-2_final.html#evaluating-the-effect-of-different-cycles",
    "href": "Lab-2/Final_Write_ups/Lab-2-team-2_final.html#evaluating-the-effect-of-different-cycles",
    "title": "9  Team 2 - Lab 2",
    "section": "Evaluating the effect of different cycles",
    "text": "Evaluating the effect of different cycles\nWe can then plot the effects of each cycle estimate.\n\n\nCode\ndf &lt;- tidy(fit_season) %&gt;%\n  subset(stringr::str_sub(term,1,1)==\"D\")\ndf$lag &lt;- as.factor(rep(3:5, each=18))\ndf$river &lt;- as.factor(rep(rownames(dat),3))\ndf$sc &lt;- rep(rep(c(\"S\",\"C\"), each=9), 3)\ndf$type &lt;- paste0(df$sc,df$lag)\n\nggplot(df, aes(x=type, y=estimate, col=lag)) + \n  geom_point() +\n  geom_errorbar(aes(ymin=conf.low, ymax=conf.up), width=.2, position=position_dodge(.9)) +\n  geom_hline(yintercept = 0) +\n  facet_wrap(~river) +\n  ggtitle(\"The cycle estimates with CIs\")\n\n\n\n\n\nThese estimates suggest that there is some evidence of cycling at the 5 year interval in the East Fork Lewis, the South Fork Toutle, the Tilton, and the Washougal River steelhead populations.\nThis, however, increases our AICc quite a bit, from 459.0557 in our original best model to 582.6302. Now let’s try just including 5 year cycles and compare this AICc to our best model."
  },
  {
    "objectID": "Lab-2/Final_Write_ups/Lab-2-team-2_final.html#comparing-models-with-and-without-5-year-cycles",
    "href": "Lab-2/Final_Write_ups/Lab-2-team-2_final.html#comparing-models-with-and-without-5-year-cycles",
    "title": "9  Team 2 - Lab 2",
    "section": "Comparing models with and without 5 year cycles",
    "text": "Comparing models with and without 5 year cycles\n\n\nCode\nmod.list3 = list(\n  U = \"equal\",\n  Q = \"unconstrained\", \n  Z = Z.mat,\n  A = \"scaling\",\n  R = \"diagonal and equal\",\n  D = \"unconstrained\", # We include these in the D matrix because the age structure cycling of salmon typically affects our observations rather than the state\n  d = covariates[5:6,]) # Specifying just 5 year cycles \n\n\nfit_5season &lt;- MARSS(dat, model=mod.list3)\n\n\nSuccess! abstol and log-log tests passed at 386 iterations.\nAlert: conv.test.slope.tol is 0.5.\nTest with smaller values (&lt;0.1) to ensure convergence.\n\nMARSS fit is\nEstimation method: kem \nConvergence test: conv.test.slope.tol = 0.5, abstol = 0.001\nEstimation converged in 386 iterations. \nLog-likelihood: -187.2444 \nAIC: 462.4888   AICc: 482.2888   \n \n                                        Estimate\nA.kalama_river_winter                    0.24684\nA.south_fork_toutle_river_winter         0.36821\nA.tilton_river_winter                   -0.78743\nA.upper_cowlitz_river_winter            -0.19833\nR.diag                                   0.14171\nU.1                                      0.03266\nQ.(1,1)                                  0.18084\nQ.(2,1)                                  0.12142\nQ.(3,1)                                 -0.00192\nQ.(4,1)                                  0.00550\nQ.(5,1)                                  0.11653\nQ.(2,2)                                  0.14378\nQ.(3,2)                                 -0.05419\nQ.(4,2)                                  0.11406\nQ.(5,2)                                  0.10159\nQ.(3,3)                                  0.08860\nQ.(4,3)                                  0.00342\nQ.(5,3)                                  0.00379\nQ.(4,4)                                  0.41381\nQ.(5,4)                                  0.10054\nQ.(5,5)                                  0.09813\nx0.coweeman                              4.00994\nx0.ef_lewis                              3.25543\nx0.kalama                                6.23754\nx0.cowlitz                               2.83372\nx0.washougal                             3.65518\nD.(coweeman_river_winter,S1-5)          -0.12553\nD.(east_fork_lewis_river_winter,S1-5)   -0.01908\nD.(kalama_river_summer,S1-5)             0.12381\nD.(kalama_river_winter,S1-5)             0.06702\nD.(lower_cowlitz_river_winter,S1-5)      0.01015\nD.(south_fork_toutle_river_winter,S1-5)  0.02201\nD.(tilton_river_winter,S1-5)            -0.40277\nD.(upper_cowlitz_river_winter,S1-5)      0.07656\nD.(washougal_river_winter,S1-5)         -0.04601\nD.(coweeman_river_winter,C1-5)          -0.12431\nD.(east_fork_lewis_river_winter,C1-5)   -0.27756\nD.(kalama_river_summer,C1-5)             0.05680\nD.(kalama_river_winter,C1-5)             0.16503\nD.(lower_cowlitz_river_winter,C1-5)     -0.10268\nD.(south_fork_toutle_river_winter,C1-5) -0.34589\nD.(tilton_river_winter,C1-5)            -0.09048\nD.(upper_cowlitz_river_winter,C1-5)      0.06995\nD.(washougal_river_winter,C1-5)         -0.30581\nInitial states (x0) defined at t=0\n\nStandard errors have not been calculated. \nUse MARSSparamCIs to compute CIs and bias estimates.\n\n\nCode\n(mod_AICc &lt;- c(fit_5season$AICc, best_mod$AICc))\n\n\n[1] 482.2888 459.0557\n\n\nInteresting– This greatly improves our AICc, but the model without cycles still test as the best model.\nNext we compare the fits of the best spatial model and the spatial model with cycling.\n\n\nCode\nplot(best_mod, plot.type=\"fitted.ytT\")\n\n\nMARSSresiduals.tT reported warnings. See msg element or attribute of returned residuals object.\n\n\n\n\n\nplot type =  fitted.ytT  Observations with fitted values\n\n\nCode\nplot(fit_5season, plot.type=\"fitted.ytT\")\n\n\nMARSSresiduals.tT reported warnings. See msg element or attribute of returned residuals object.\n\n\n\n\n\nplot type =  fitted.ytT  Observations with fitted values\n\n\nAdding a 5 year cycling component does not have significant changes to the fit during years of data, but it does have a big impact on the hindcast and forecast fits.\nNext we compare the residuals of our best model and our model with 5 year cycles.\n\n\nCode\n# Residuals of best model\npar(mfrow = c(3, 3))\nresids &lt;- MARSSresiduals(best_mod, type = \"tt1\")\n\n\nMARSSresiduals.tt1 reported warnings. See msg element of returned residuals object.\n\n\nCode\nfor (i in 1:9) {\n    plot(resids$model.residuals[i, ], ylab = \"model residuals\", \n        xlab = \"\")\n    abline(h = 0)\n    title(rownames(dat)[i])\n}\n\n\n\n\n\nCode\n# Residuals of best model + cycling\npar(mfrow = c(3, 3))\nresids &lt;- MARSSresiduals(fit_5season, type = \"tt1\")\n\n\nMARSSresiduals.tt1 reported warnings. See msg element of returned residuals object.\n\n\nCode\nfor (i in 1:9) {\n    plot(resids$model.residuals[i, ], ylab = \"model residuals\", \n        xlab = \"\")\n    abline(h = 0)\n    title(rownames(dat)[i])\n}\n\n\n\n\n\nCode\n# ACF of residuals\nplot(best_mod, plot.type = \"acf.std.model.resids.ytt1\")\n\n\nMARSSresiduals.tt1 reported warnings. See msg element of returned residuals object.\n\n\n\n\n\nplot type = acf.std.model.resids.ytt1\n\n\nCode\nplot(fit_5season, plot.type = \"acf.std.model.resids.ytt1\")\n\n\nMARSSresiduals.tt1 reported warnings. See msg element of returned residuals object.\n\n\n\n\n\nplot type = acf.std.model.resids.ytt1\n\n\nWhen comparing the residual and ACF plots of the spatial model w/o cycling and the spatial model w/ cycling, we do see some of the residual and ACF plots improve. For example, around lag 10 in the Kalama River winter population, the autocorrelation reduces relative the spatial model w/o cycling. The residual plots also remove some of the cycling patterns in a few groups (e.g., Tilton River, South Fork Toutle). However, the cyclic covariates in the process does not completely remove the residuals’ cycling patterns; positive values tend to follow positive ones."
  },
  {
    "objectID": "Lab-2/Final_Write_ups/Lab-2-team-3_final.html",
    "href": "Lab-2/Final_Write_ups/Lab-2-team-3_final.html",
    "title": "10  Team 3 - Lab 2",
    "section": "",
    "text": "Data\nWe were assigned the Lower Columbia Coho data set. We selected two rivers from each Major Population Group (MPG) to test the performance of several models. The selected populations are:\nCascade MPG - Tilton and Sandy Rivers\nGorge MPG Upper and Lower Gorge Tributaries\nCoast MPG Clatskanie, and Grays/Chinook Rivers\nCode\nlibrary(tidyverse)\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\nlibrary(MARSS)\nlibrary(broom)\n\n# Load the data\nload(here::here(\"Lab-2\", \"Data_Images\", \"columbia-river.rda\"))\nCode\n#plot the data\nesu &lt;- unique(columbia.river$esu_dps)\nplotesu &lt;- function(esuname){\n  df &lt;- columbia.river %&gt;% subset(esu_dps %in% esuname)\nggplot(df, aes(x=spawningyear, y=log(value), color=majorpopgroup)) + \n  geom_point(size=0.2, na.rm = TRUE) + \n  theme(strip.text.x = element_text(size = 3)) +\n  theme(axis.text.x = element_text(size = 5, angle = 90)) +\n  facet_wrap(~esapopname) +\n  ggtitle(paste0(esuname, collapse=\"\\n\"))\n}\n\nplotesu(esu[4])\nWrangle the data.\nCode\n#format for visualization\n\nlibrary(dplyr)\nesuname &lt;- esu[4]\n\ndat &lt;- columbia.river %&gt;% \n  subset(esu_dps == esuname) %&gt;% # get only this ESU\n  mutate(log.spawner = log(value)) %&gt;% # create a column called log.spawner\n  select(esapopname, spawningyear, log.spawner) %&gt;% # get just the columns that I need\n  pivot_wider(names_from = \"esapopname\", values_from = \"log.spawner\") %&gt;% \n  column_to_rownames(var = \"spawningyear\") %&gt;% # make the years rownames\n  as.matrix() %&gt;% # turn into a matrix with year down the rows\n  t() # make time across the columns\n# MARSS complains if I don't do this\ndat[is.na(dat)] &lt;- NA\nClean up the row names\nCode\ntmp &lt;- rownames(dat)\ntmp &lt;- stringr::str_replace(tmp, \"Salmon, coho [(]Lower Columbia River ESU[)]\", \"\")\ntmp &lt;- stringr::str_trim(tmp)\nrownames(dat) &lt;- tmp\nSelect a subset of rivers to test\nCode\nmod_rivers &lt;- c(\"Sandy River - early and late\", \n           \"Grays and Chinook Rivers - late\", \n           \"Clatskanie River - late\", \n           \"Lower Gorge Tributaries - late\", \n           \"Tilton River - early and late\" , \n           \"Oregon Upper Gorge Tributaries and Hood River - early\")\n\nsub_dat &lt;- dat[rownames(dat) %in% mod_rivers, ]\nWe tested many models and a variety of assumptions, many of which varied by model. For all models we assumed that A was a scaling parameter.\nBelow we made a variety of assumptions and used them to generate five models to test which set of assumptions would produce the best fit to the data.\nCode\n# Model 1: all regions are behaving independently (x) but observations were collected similarly\n## each region has it's own drift where U = unequal \n## variance is diagonal and equal due to similar methods for collecting observations\n## we leave Q unconstrained here, this gives the most flexibility for each population to be unique, but may not be the best approach as we assume they should be at least somewhat related due to geographic proximity\nmod.list1 &lt;- list(\n  U = \"unequal\",\n  R = \"diagonal and equal\",\n  Q = \"unconstrained\"\n)\n\n# Model 2: all regions are reflecting 1 underlying state (x) with equal variance\n## 1 underlying state where U = equal\n## R is diagonal and equal due to similar methods for collecting observations\n## Q is again unconstrained but the U is equal so slighty less variation between populations than model 1\nmod.list2 &lt;- list(\n  U = \"equal\",\n  R = \"diagonal and equal\",\n  Q = \"unconstrained\"\n)\n\n# Model 3: flexible model with unequal observation variance and a matrix for drift and state variance and one underlying state\n## set scaling on B as 1\n## U is matrix of estimated values\n## variance Q is constrained so that all populations vary together\n## variance R is diagonal and unequal to account for potential differences in observation error, ie different methods between regions\n## A intercept can change as needed \n## Z matrix is based on our 6 selected populations and each is treated as different\nmod.list3 &lt;- list(B = matrix(1), \n                   U = matrix(\"u\"), \n                   Q = matrix(\"q\"), # 1 X\n                   Z = matrix(1, 6, 1), \n                   A = \"scaling\", \n                   R = \"diagonal and unequal\", # single column of 1s for Y\n                   x0 = matrix(\"mu\"), \n                   tinitx = 0)\n\n# Model 4: flexible model for independent regions\n## B and Z scale to size of matrix, all 1's\n## U = bias = independent matrix set to size of dataframe\n## Q eaual variance in state with equal covariances\n## R variance is diagonal and equal due to similar methods for collecting observations\n\nmod.list4 &lt;- list(B = diag(1,6), \n                  U = matrix(\"u\",6,1), \n                  Q = \"diagonal and unequal\", \n                  Z = diag(1,6), \n                  A = \"scaling\", \n                  R = \"diagonal and equal\", \n                  x0 = \"unequal\", \n                  tinitx = 0)\n\n# Model 5: keep it simple. Each region has an independent state, observation variance is the same, and one process variance with one covariance. \nmod.list5 &lt;- list(\n  U = \"unequal\",\n  R = \"diagonal and equal\",\n  Q = \"equalvarcov\"\n)\nHere we fit the model.\nCode\nlibrary(MARSS)\nfit1 &lt;- MARSS(sub_dat, model=mod.list1, method=\"BFGS\")\n\n\nSuccess! Converged in 665 iterations.\nFunction MARSSkfas used for likelihood calculation.\n\nMARSS fit is\nEstimation method: BFGS \nEstimation converged in 665 iterations. \nLog-likelihood: -132.2021 \nAIC: 332.4043   AICc: 360.0787   \n \n                                                           Estimate\nR.diag                                                      0.01438\nU.X.Sandy River - early and late                            0.04086\nU.X.Tilton River - early and late                           0.13791\nU.X.Clatskanie River - late                                 0.00863\nU.X.Grays and Chinook Rivers - late                         0.10476\nU.X.Lower Gorge Tributaries - late                         -0.00326\nU.X.Oregon Upper Gorge Tributaries and Hood River - early   0.07033\nQ.(1,1)                                                     0.96632\nQ.(2,1)                                                     0.23773\nQ.(3,1)                                                     0.86258\nQ.(4,1)                                                     0.61088\nQ.(5,1)                                                     0.92889\nQ.(6,1)                                                     0.23482\nQ.(2,2)                                                     0.32067\nQ.(3,2)                                                     0.01290\nQ.(4,2)                                                     0.01512\nQ.(5,2)                                                     0.09117\nQ.(6,2)                                                     0.01120\nQ.(3,3)                                                     0.99958\nQ.(4,3)                                                     0.81170\nQ.(5,3)                                                     1.18893\nQ.(6,3)                                                     0.49625\nQ.(4,4)                                                     0.79880\nQ.(5,4)                                                     1.19349\nQ.(6,4)                                                     0.70243\nQ.(5,5)                                                     1.81854\nQ.(6,5)                                                     1.23660\nQ.(6,6)                                                     2.31940\nx0.X.Sandy River - early and late                           6.26627\nx0.X.Tilton River - early and late                          4.87102\nx0.X.Clatskanie River - late                                6.37770\nx0.X.Grays and Chinook Rivers - late                        3.79437\nx0.X.Lower Gorge Tributaries - late                         7.22292\nx0.X.Oregon Upper Gorge Tributaries and Hood River - early  4.15493\nInitial states (x0) defined at t=0\n\nStandard errors have not been calculated. \nUse MARSSparamCIs to compute CIs and bias estimates.\n\n\nCode\nfit2 &lt;- MARSS(sub_dat, model=mod.list2, method=\"BFGS\")\n\n\nSuccess! Converged in 626 iterations.\nFunction MARSSkfas used for likelihood calculation.\n\nMARSS fit is\nEstimation method: BFGS \nEstimation converged in 626 iterations. \nLog-likelihood: -132.6153 \nAIC: 323.2306   AICc: 342.3515   \n \n                                                            Estimate\nR.diag                                                      0.014405\nU.1                                                         0.113374\nQ.(1,1)                                                     0.971613\nQ.(2,1)                                                     0.226563\nQ.(3,1)                                                     0.866885\nQ.(4,1)                                                     0.595561\nQ.(5,1)                                                     0.935713\nQ.(6,1)                                                     0.244217\nQ.(2,2)                                                     0.317706\nQ.(3,2)                                                     0.000202\nQ.(4,2)                                                     0.077537\nQ.(5,2)                                                     0.071455\nQ.(6,2)                                                    -0.014512\nQ.(3,3)                                                     1.004670\nQ.(4,3)                                                     0.747402\nQ.(5,3)                                                     1.197406\nQ.(6,3)                                                     0.499534\nQ.(4,4)                                                     0.750104\nQ.(5,4)                                                     1.156733\nQ.(6,4)                                                     0.663932\nQ.(5,5)                                                     1.831847\nQ.(6,5)                                                     1.249664\nQ.(6,6)                                                     2.315909\nx0.X.Sandy River - early and late                           6.192479\nx0.X.Tilton River - early and late                          5.770486\nx0.X.Clatskanie River - late                                5.362233\nx0.X.Grays and Chinook Rivers - late                        5.952552\nx0.X.Lower Gorge Tributaries - late                         5.970913\nx0.X.Oregon Upper Gorge Tributaries and Hood River - early  3.605473\nInitial states (x0) defined at t=0\n\nStandard errors have not been calculated. \nUse MARSSparamCIs to compute CIs and bias estimates.\n\n\nCode\nfit3 &lt;- MARSS(sub_dat, model=mod.list3)\n\n\nSuccess! abstol and log-log tests passed at 75 iterations.\nAlert: conv.test.slope.tol is 0.5.\nTest with smaller values (&lt;0.1) to ensure convergence.\n\nMARSS fit is\nEstimation method: kem \nConvergence test: conv.test.slope.tol = 0.5, abstol = 0.001\nEstimation converged in 75 iterations. \nLog-likelihood: -152.7093 \nAIC: 333.4185   AICc: 337.3808   \n \n                                                                                                                Estimate\nA.Tilton River - early and late                                                                                   1.8010\nA.Clatskanie River - late                                                                                        -0.6439\nA.Grays and Chinook Rivers - late                                                                                 0.2379\nA.Lower Gorge Tributaries - late                                                                                 -1.0716\nA.Oregon Upper Gorge Tributaries and Hood River - early                                                          -1.2511\nR.(Sandy River - early and late,Sandy River - early and late)                                                     0.2843\nR.(Tilton River - early and late,Tilton River - early and late)                                                   0.7014\nR.(Clatskanie River - late,Clatskanie River - late)                                                               0.2951\nR.(Grays and Chinook Rivers - late,Grays and Chinook Rivers - late)                                               0.0384\nR.(Lower Gorge Tributaries - late,Lower Gorge Tributaries - late)                                                 0.5659\nR.(Oregon Upper Gorge Tributaries and Hood River - early,Oregon Upper Gorge Tributaries and Hood River - early)   1.5916\nU.u                                                                                                               0.0326\nQ.q                                                                                                               0.3637\nx0.mu                                                                                                             6.2476\nInitial states (x0) defined at t=0\n\nStandard errors have not been calculated. \nUse MARSSparamCIs to compute CIs and bias estimates.\n\n\nCode\nfit4 &lt;- MARSS(sub_dat, model=mod.list4)\n\n\nWarning! Abstol convergence only. Maxit (=500) reached before log-log convergence.\n\nMARSS fit is\nEstimation method: kem \nConvergence test: conv.test.slope.tol = 0.5, abstol = 0.001\nWARNING: Abstol convergence only no log-log convergence.\n maxit (=500) reached before log-log convergence.\n The likelihood and params might not be at the ML values.\n Try setting control$maxit higher.\nLog-likelihood: -166.2868 \nAIC: 360.5736   AICc: 364.5358   \n \n                                                                                                                    Estimate\nR.diag                                                                                                              0.453112\nU.u                                                                                                                 0.055434\nQ.(X.Sandy River - early and late,X.Sandy River - early and late)                                                   0.092472\nQ.(X.Tilton River - early and late,X.Tilton River - early and late)                                                 0.105175\nQ.(X.Clatskanie River - late,X.Clatskanie River - late)                                                             0.081650\nQ.(X.Grays and Chinook Rivers - late,X.Grays and Chinook Rivers - late)                                             0.000648\nQ.(X.Lower Gorge Tributaries - late,X.Lower Gorge Tributaries - late)                                               0.231055\nQ.(X.Oregon Upper Gorge Tributaries and Hood River - early,X.Oregon Upper Gorge Tributaries and Hood River - early) 1.369032\nx0.X.Sandy River - early and late                                                                                   6.069829\nx0.X.Tilton River - early and late                                                                                  6.777505\nx0.X.Clatskanie River - late                                                                                        4.281262\nx0.X.Grays and Chinook Rivers - late                                                                                5.479334\nx0.X.Lower Gorge Tributaries - late                                                                                 4.620066\nx0.X.Oregon Upper Gorge Tributaries and Hood River - early                                                          4.422688\nInitial states (x0) defined at t=0\n\nStandard errors have not been calculated. \nUse MARSSparamCIs to compute CIs and bias estimates.\n\nConvergence warnings\n Warning: the  Q.(X.Grays and Chinook Rivers - late,X.Grays and Chinook Rivers - late)  parameter value has not converged.\n Type MARSSinfo(\"convergence\") for more info on this warning.\n\n\nCode\nfit5 &lt;- MARSS(sub_dat, model=mod.list5, control = list(maxit=1000))\n\n\nSuccess! abstol and log-log tests passed at 893 iterations.\nAlert: conv.test.slope.tol is 0.5.\nTest with smaller values (&lt;0.1) to ensure convergence.\n\nMARSS fit is\nEstimation method: kem \nConvergence test: conv.test.slope.tol = 0.5, abstol = 0.001\nEstimation converged in 893 iterations. \nLog-likelihood: -153.8425 \nAIC: 337.6851   AICc: 342.2565   \n \n                                                           Estimate\nR.diag                                                      0.46807\nU.X.Sandy River - early and late                            0.04176\nU.X.Tilton River - early and late                          -0.06150\nU.X.Clatskanie River - late                                 0.02970\nU.X.Grays and Chinook Rivers - late                         0.05641\nU.X.Lower Gorge Tributaries - late                         -0.05582\nU.X.Oregon Upper Gorge Tributaries and Hood River - early  -0.00703\nQ.diag                                                      0.33587\nQ.offdiag                                                   0.33577\nx0.X.Sandy River - early and late                           6.19170\nx0.X.Tilton River - early and late                         11.29497\nx0.X.Clatskanie River - late                                5.93388\nx0.X.Grays and Chinook Rivers - late                        5.70333\nx0.X.Lower Gorge Tributaries - late                         8.76133\nx0.X.Oregon Upper Gorge Tributaries and Hood River - early  6.74708\nInitial states (x0) defined at t=0\n\nStandard errors have not been calculated. \nUse MARSSparamCIs to compute CIs and bias estimates.\nHere we plot the fit of the models to visually check the model performance\nCode\nplot.mod1 &lt;- autoplot(fit1, plot.type=\"fitted.ytT\")\n\n\nMARSSresiduals.tT reported warnings. See msg element or attribute of returned residuals object.\n\n\n\n\n\nplot.type = fitted.ytT \n\n\n\n\n\nFinished plots.\n\n\nCode\nplot.mod2 &lt;- autoplot(fit2, plot.type=\"fitted.ytT\")\n\n\nMARSSresiduals.tT reported warnings. See msg element or attribute of returned residuals object.\n\n\n\n\n\nplot.type = fitted.ytT \n\n\n\n\n\nFinished plots.\n\n\nCode\nplot.mod3 &lt;- autoplot(fit3, plot.type=\"fitted.ytT\")\n\n\n\n\n\nplot.type = fitted.ytT \n\n\n\n\n\nFinished plots.\n\n\nCode\nplot.mod4 &lt;- autoplot(fit4, plot.type = \"fitted.ytT\")\n\n\n\n\n\nplot.type = fitted.ytT \n\n\n\n\n\nFinished plots.\n\n\nCode\nplot.mod5 &lt;- autoplot(fit5, plot.type=\"fitted.ytT\")\n\n\nMARSSresiduals.tT reported warnings. See msg element or attribute of returned residuals object.\n\n\n\n\n\nplot.type = fitted.ytT \n\n\n\n\n\nFinished plots.\nHere we further tested the model fit by examining the corrplot to see which rivers were most closely correlated to see if that fit with our assumptions.\nCode\n# change fit# to evaluate correlation between regions in different models \n\nlibrary(corrplot)\n\n\ncorrplot 0.92 loaded\n\n\nCode\nQ &lt;- coef(fit1, type=\"matrix\")$Q\ncorrmat &lt;- diag(1/sqrt(diag(Q))) %*% Q %*% diag(1/sqrt(diag(Q)))\ncorrplot(corrmat)\nCorrelation matrix of 6 test regions shows high correlation between Tilton River and Grays and Chinook Rivers, indicating the potential of these regions behaving as 1 sub-population. This will be tested in the next section.\n#diagnostics\nTesting for model performance using AICc\nCode\naic &lt;- c(fit1$AICc, fit2$AICc, fit3$AICc, fit4$AICc, fit5$AICc)\naic-min(aic) #delta AICc \n\n\n[1] 22.697887  4.970699  0.000000 27.155030  4.875695\nA comparison of delta AICc indicates that model 3 is the best fit for the data. There are no other models within delta AICc of 2.0 or less. There are two alternative models within delta AICc of 5.0, but no compelling reason to further those over the clearly top model. Model 3 was the best out of the five models tested, so we’ll use that one to estimate historical abundances. This is not to say that model 3 is the best model possible for this data, only that it’s the best model out of the 5 that we compared.\nWe then evaluated the fit of states by looking at plots and residuals\nCode\n#model 3\nfit3$states\n\n\n       [,1]     [,2]     [,3]     [,4]     [,5]     [,6]     [,7]     [,8]\nX1 6.280179 6.279389 6.088308 5.415753 5.901063 6.248499 7.035001 7.021632\n       [,9]    [,10]    [,11]    [,12]   [,13]    [,14]    [,15]    [,16]\nX1 7.161675 6.987405 7.291717 7.511783 7.57813 7.300468 7.287755 7.236499\n      [,17]    [,18]    [,19]    [,20]    [,21]    [,22]    [,23]    [,24]\nX1 6.607524 6.846007 6.494363 5.915379 6.171551 6.137207 5.578782 5.451146\n      [,25]    [,26]    [,27]    [,28]    [,29]    [,30]    [,31]    [,32]\nX1 5.725675 5.931041 6.646672 7.090928 6.878673 7.050644 7.079096 7.199707\n      [,33]    [,34]    [,35]    [,36]    [,37]    [,38]    [,39]    [,40]\nX1 7.000968 6.953619 7.077913 7.307096 7.500606 7.380459 7.058554 7.335456\n      [,41]    [,42]    [,43]    [,44]    [,45]    [,46]    [,47]    [,48]\nX1 8.107335 6.385602 6.807309 7.001013 5.961508 6.592824 7.454632 7.811492\n\n\nCode\ntsSmooth(fit3)\n\n\n   .rownames  t .estimate       .se\n1         X1  1  6.280179 0.3517725\n2         X1  2  6.279389 0.3715729\n3         X1  3  6.088308 0.3737970\n4         X1  4  5.415753 0.3740536\n5         X1  5  5.901063 0.3740832\n6         X1  6  6.248499 0.3740867\n7         X1  7  7.035001 0.3740871\n8         X1  8  7.021632 0.3740871\n9         X1  9  7.161675 0.3740871\n10        X1 10  6.987405 0.3740871\n11        X1 11  7.291717 0.3740871\n12        X1 12  7.511783 0.3740871\n13        X1 13  7.578130 0.3740871\n14        X1 14  7.300468 0.3740871\n15        X1 15  7.287755 0.3740871\n16        X1 16  7.236499 0.3740871\n17        X1 17  6.607524 0.3740871\n18        X1 18  6.846007 0.3740864\n19        X1 19  6.494363 0.3740811\n20        X1 20  5.915379 0.3740347\n21        X1 21  6.171551 0.3736335\n22        X1 22  6.137207 0.3701492\n23        X1 23  5.578782 0.3385563\n24        X1 24  5.451146 0.3358668\n25        X1 25  5.725675 0.3356453\n26        X1 26  5.931041 0.3355945\n27        X1 27  6.646672 0.3351848\n28        X1 28  7.090928 0.3301029\n29        X1 29  6.878673 0.2592910\n30        X1 30  7.050644 0.2797804\n31        X1 31  7.079096 0.2797264\n32        X1 32  7.199707 0.2578702\n33        X1 33  7.000968 0.2917856\n34        X1 34  6.953619 0.2571024\n35        X1 35  7.077913 0.2558983\n36        X1 36  7.307096 0.2534567\n37        X1 37  7.500606 0.1550014\n38        X1 38  7.380459 0.1544473\n39        X1 39  7.058554 0.1544449\n40        X1 40  7.335456 0.1544477\n41        X1 41  8.107335 0.1550942\n42        X1 42  6.385602 0.2664316\n43        X1 43  6.807309 0.2706957\n44        X1 44  7.001013 0.2968817\n45        X1 45  5.961508 0.2709719\n46        X1 46  6.592824 0.2737963\n47        X1 47  7.454632 0.3622036\n48        X1 48  7.811492 0.3265167\n\n\nCode\nautoplot(fit3, plot.type=\"fitted.ytT\")\n\n\n\n\n\nplot.type = fitted.ytT \n\n\n\n\n\nFinished plots.\n\n\nCode\nautoplot(fit3, plot.type=\"residuals\")\n\n\n\n\n\nplot.type = model.resids.ytt1 \n\n\n\n\n\nHit &lt;Return&gt; to see next plot (q to exit): \n\n\n\n\n\nplot.type = std.model.resids.ytT \n\n\n\n\n\nHit &lt;Return&gt; to see next plot (q to exit): \n\n\n\n\n\nplot.type = std.state.resids.xtT \n\n\n\n\n\nHit &lt;Return&gt; to see next plot (q to exit): \n\n\n\n\n\nplot.type = qqplot.std.model.resids.ytt1 \n\n\n\n\n\nHit &lt;Return&gt; to see next plot (q to exit): \n\n\n\n\n\nplot.type = qqplot.std.state.resids.xtT \n\n\n\n\n\nFinished plots.\n\n\n\n\n\nplot.type = acf.std.model.resids.ytt1 \n\n\n\n\n\nHit &lt;Return&gt; to see next plot (q to exit):\nWe also examined the potential for region to behave as sub-populations based on major population group, our initial correlation analysis, and some geographic assumptions about physical proximity and climate.\nComparing 3 sub-populations: cascade, coast, and gorge based on their designated MPG\nCode\nmod.list6 &lt;- list(#B = matrix(1), # B = \"identity\" 3x3 matrix\n                  # U = matrix(\"u\"), #needs 3 rows U = \"equal\" or \"unequal\" # default = unequal\n                   Q = \"unconstrained\", # 1 X\n                   Z = factor(c(\"cascade\", \"cascade\", \n                                \"coast\", \"coast\", \n                                \"gorge\", \"gorge\")), \n                   A = \"scaling\", \n                   R = \"diagonal and unequal\", # single column of 1s for Y\n                   #x0 = matrix(\"mu\"), # x0 = default \n                   tinitx = 0)\n\n\nfit6 &lt;- MARSS(sub_dat, model = mod.list6)\n\n\nWarning! Abstol convergence only. Maxit (=500) reached before log-log convergence.\n\nMARSS fit is\nEstimation method: kem \nConvergence test: conv.test.slope.tol = 0.5, abstol = 0.001\nWARNING: Abstol convergence only no log-log convergence.\n maxit (=500) reached before log-log convergence.\n The likelihood and params might not be at the ML values.\n Try setting control$maxit higher.\nLog-likelihood: -142.2401 \nAIC: 326.4802   AICc: 335.8136   \n \n                                                                                                                Estimate\nA.Tilton River - early and late                                                                                  1.84062\nA.Grays and Chinook Rivers - late                                                                                0.58750\nA.Oregon Upper Gorge Tributaries and Hood River - early                                                         -0.20634\nR.(Sandy River - early and late,Sandy River - early and late)                                                    0.33917\nR.(Tilton River - early and late,Tilton River - early and late)                                                  0.53829\nR.(Clatskanie River - late,Clatskanie River - late)                                                              0.11986\nR.(Grays and Chinook Rivers - late,Grays and Chinook Rivers - late)                                              0.00168\nR.(Lower Gorge Tributaries - late,Lower Gorge Tributaries - late)                                                0.00386\nR.(Oregon Upper Gorge Tributaries and Hood River - early,Oregon Upper Gorge Tributaries and Hood River - early)  1.25596\nU.cascade                                                                                                        0.03298\nU.coast                                                                                                          0.05520\nU.gorge                                                                                                          0.02279\nQ.(1,1)                                                                                                          0.19674\nQ.(2,1)                                                                                                          0.38386\nQ.(3,1)                                                                                                          0.59328\nQ.(2,2)                                                                                                          0.87190\nQ.(3,2)                                                                                                          1.20480\nQ.(3,3)                                                                                                          1.80778\nx0.cascade                                                                                                       6.19074\nx0.coast                                                                                                         4.31126\nx0.gorge                                                                                                         6.07799\nInitial states (x0) defined at t=0\n\nStandard errors have not been calculated. \nUse MARSSparamCIs to compute CIs and bias estimates.\n\nConvergence warnings\n Warning: the  R.(Grays and Chinook Rivers - late,Grays and Chinook Rivers - late)  parameter value has not converged.\n Warning: the  R.(Lower Gorge Tributaries - late,Lower Gorge Tributaries - late)  parameter value has not converged.\n Type MARSSinfo(\"convergence\") for more info on this warning.\n\n\nCode\nautoplot(fit6, plot.type=\"fitted.ytT\")\n\n\n\n\n\nplot.type = fitted.ytT \n\n\n\n\n\nFinished plots.\nBased on the correlation plot, the grays and chinook rivers and the lower gorge tributaries are highly correlated. We want to evaluate a model with these regions as a sub-population.\nComparing 2 sub-populations: grays/chinook rivers and lower gorge “GCL” and all other test regions “STCU”\nCode\nmod.list7 &lt;- list(Q = \"unconstrained\", # 1 X\n                  Z = factor(c(\"STCU\", \"STCU\", \n                                \"STCU\", \"GCL\", \n                                \"GCL\", \"STCU\")), \n                   A = \"scaling\", \n                   R = \"diagonal and unequal\", # single column of 1s for Y\n                   tinitx = 0)\n\n\nfit7 &lt;- MARSS(sub_dat, model = mod.list7)\n\n\nSuccess! abstol and log-log tests passed at 452 iterations.\nAlert: conv.test.slope.tol is 0.5.\nTest with smaller values (&lt;0.1) to ensure convergence.\n\nMARSS fit is\nEstimation method: kem \nConvergence test: conv.test.slope.tol = 0.5, abstol = 0.001\nEstimation converged in 452 iterations. \nLog-likelihood: -144.5939 \nAIC: 323.1877   AICc: 329.1295   \n \n                                                                                                                Estimate\nA.Tilton River - early and late                                                                                  1.79368\nA.Clatskanie River - late                                                                                       -0.66291\nA.Lower Gorge Tributaries - late                                                                                -1.21399\nA.Oregon Upper Gorge Tributaries and Hood River - early                                                         -1.26072\nR.(Sandy River - early and late,Sandy River - early and late)                                                    0.32024\nR.(Tilton River - early and late,Tilton River - early and late)                                                  0.61981\nR.(Clatskanie River - late,Clatskanie River - late)                                                              0.38990\nR.(Grays and Chinook Rivers - late,Grays and Chinook Rivers - late)                                              0.01470\nR.(Lower Gorge Tributaries - late,Lower Gorge Tributaries - late)                                                0.00834\nR.(Oregon Upper Gorge Tributaries and Hood River - early,Oregon Upper Gorge Tributaries and Hood River - early)  1.36820\nU.STCU                                                                                                           0.03351\nU.GCL                                                                                                            0.03955\nQ.(1,1)                                                                                                          0.28112\nQ.(2,1)                                                                                                          0.67064\nQ.(2,2)                                                                                                          1.60038\nx0.STCU                                                                                                          6.22159\nx0.GCL                                                                                                           6.74437\nInitial states (x0) defined at t=0\n\nStandard errors have not been calculated. \nUse MARSSparamCIs to compute CIs and bias estimates.\n\n\nCode\nautoplot(fit7, plot.type=\"fitted.ytT\")\n\n\nMARSSresiduals.tT reported warnings. See msg element or attribute of returned residuals object.\n\n\n\n\n\nplot.type = fitted.ytT \n\n\n\n\n\nFinished plots.\nWhile the description “cascades” only describes a couple regions in our test set, we decided to test a model separating the general cascades from the 2 coast regions (Clatskaine and Gray/Chinook) because geographically there is a large separation.\nComparing 2 sub-populations: coast “coast” and all other test regions “casgor”\nCode\nmod.list8 &lt;- list(Q = \"unconstrained\", # 1 X\n                  Z = factor(c(\"casgor\", \"casgor\", \n                                \"coast\", \"coast\", \n                                \"casgor\", \"casgor\")), \n                   A = \"scaling\", \n                   R = \"diagonal and unequal\", # single column of 1s for Y\n                   tinitx = 0)\n\n\nfit8 &lt;- MARSS(sub_dat, model = mod.list8)\n\n\nWarning! Abstol convergence only. Maxit (=500) reached before log-log convergence.\n\nMARSS fit is\nEstimation method: kem \nConvergence test: conv.test.slope.tol = 0.5, abstol = 0.001\nWARNING: Abstol convergence only no log-log convergence.\n maxit (=500) reached before log-log convergence.\n The likelihood and params might not be at the ML values.\n Try setting control$maxit higher.\nLog-likelihood: -151.9059 \nAIC: 337.8118   AICc: 343.7536   \n \n                                                                                                                Estimate\nA.Tilton River - early and late                                                                                   1.7936\nA.Grays and Chinook Rivers - late                                                                                 0.5657\nA.Lower Gorge Tributaries - late                                                                                 -1.0682\nA.Oregon Upper Gorge Tributaries and Hood River - early                                                          -1.2280\nR.(Sandy River - early and late,Sandy River - early and late)                                                     0.3191\nR.(Tilton River - early and late,Tilton River - early and late)                                                   0.6853\nR.(Clatskanie River - late,Clatskanie River - late)                                                               0.1025\nR.(Grays and Chinook Rivers - late,Grays and Chinook Rivers - late)                                               0.0144\nR.(Lower Gorge Tributaries - late,Lower Gorge Tributaries - late)                                                 0.6027\nR.(Oregon Upper Gorge Tributaries and Hood River - early,Oregon Upper Gorge Tributaries and Hood River - early)   1.6470\nU.casgor                                                                                                          0.0263\nU.coast                                                                                                           0.0617\nQ.(1,1)                                                                                                           0.2611\nQ.(2,1)                                                                                                           0.4195\nQ.(2,2)                                                                                                           0.7069\nx0.casgor                                                                                                         6.2288\nx0.coast                                                                                                          4.0332\nInitial states (x0) defined at t=0\n\nStandard errors have not been calculated. \nUse MARSSparamCIs to compute CIs and bias estimates.\n\nConvergence warnings\n Warning: the  R.(Grays and Chinook Rivers - late,Grays and Chinook Rivers - late)  parameter value has not converged.\n Type MARSSinfo(\"convergence\") for more info on this warning.\n\n\nCode\nautoplot(fit8, plot.type=\"fitted.ytT\")\n\n\n\n\n\nplot.type = fitted.ytT \n\n\n\n\n\nFinished plots.\nCode\npar(mfrow=c(2,2))\nfor(i in 1:4){\n  acf(sub_dat[i,], na.action=na.pass, main=rownames(sub_dat)[i])\n}\nBased on the acf plots and the pattern in the Tilton with significant autocorrelation at 5 years with a possible cyclic pattern, we decided to test for cycling with frequency 5 or 10 years.\nCode\nTT &lt;- dim(sub_dat)[2] #number of time steps\ncovariates &lt;- rbind(\n  forecast::fourier(ts(1:TT, freq=5), K=1) |&gt; t(),\n  forecast::fourier(ts(1:TT, freq=10), K=1) |&gt; t()\n)\n\n\nRegistered S3 method overwritten by 'quantmod':\n  method            from\n  as.zoo.data.frame zoo \n\n\nCode\nstr(TT)\n\n\n int 48\nCode\nggplot(df, aes(x=type, y=estimate, col=lag)) + \n  geom_point() +\n  geom_errorbar(aes(ymin=conf.low, ymax=conf.up), width=.2, position=position_dodge(.9)) +\n  geom_hline(yintercept = 0) +\n  facet_wrap(~river) +\n  ggtitle(\"The cycle estimates for Model 9\")\nThe cosine estimates, particularly for the Upper Gorge Tributaries and Hood River, indicate the potential for a seasonal cycle that peaks every 10 years. We encountered a Hessian error in our code that prevented us from plotting confidence intervals for this data, likely due to many years of missing data.\nHere we’re looking at Model 10.\nCode\ndf &lt;- tidy(fit10) %&gt;% #confidence estimates\n  subset(stringr::str_sub(term,1,1)==\"D\") #only D parameters\n\n\nWarning in MARSShessian(MLEobj, method = hessian.fun): MARSShessian: Hessian could not be inverted to compute the parameter var-cov matrix. parSigma set to NULL.  See MARSSinfo(\"HessianNA\").\n\n\nWarning in MARSSparamCIs(x, alpha = alpha, ...): MARSSparamCIs: No parSigma\nelement returned by Hessian function.  See marssMLE object errors\n(MLEobj$errors)\n\n\nCode\ndf$lag &lt;- as.factor(rep(c(5,10), each=12)) #label lags\ndf$river &lt;- as.factor(rep(rownames(sub_dat),4)) #rownames on repeat\ndf$sc &lt;- rep(rep(c(\"S\", \"C\"), each=6), 2) #each sin cos 6 times, 2 test freq\ndf$type &lt;- paste0(df$sc,df$lag)\nCode\nggplot(df, aes(x=type, y=estimate, col=lag)) + \n  geom_point() +\n  geom_errorbar(aes(ymin=conf.low, ymax=conf.up), width=.2, position=position_dodge(.9)) +\n  geom_hline(yintercept = 0) +\n  facet_wrap(~river) +\n  ggtitle(\"The cycle estimates for Model 10\")\nThe same analysis but with an equal variance covariance matrix estimated for Q still highlights the potential for a 10 year cycle, this time with the Tilton River.\nEvaluate AICc for seasonality against our current best model 3.\nCode\naic &lt;- c(fit3$AICc, fit9$AICc, fit10$AICc )\naic-min(aic) #delta AICc \n\n\n[1]   0.00000 133.75497  58.85194\nThe equal variance covariance matrix for Q was better, but still not as good as our current best model. Now we’ll try building a model with just the 10 year cycle as that best explains the potential seasonality in the data, using the same code from above.\nCode\nTT &lt;- dim(sub_dat)[2] #number of time steps\ncovariates_10 &lt;- rbind(\n  forecast::fourier(ts(1:TT, freq=10), K=1) |&gt; t()\n)\nstr(TT)\n\n\n int 48\n\n\nCode\nmod.list11 &lt;- list(\n  Q = \"equalvarcov\",\n  U = \"unequal\",\n  R = \"diagonal and equal\",\n  D = \"unconstrained\",\n  d = covariates_10\n)\n\nfit11 &lt;- MARSS(sub_dat, model=mod.list11, control = list(maxit=1000) )\n\n\nSuccess! abstol and log-log tests passed at 907 iterations.\nAlert: conv.test.slope.tol is 0.5.\nTest with smaller values (&lt;0.1) to ensure convergence.\n\nMARSS fit is\nEstimation method: kem \nConvergence test: conv.test.slope.tol = 0.5, abstol = 0.001\nEstimation converged in 907 iterations. \nLog-likelihood: -145.4365 \nAIC: 344.873   AICc: 361.131   \n \n                                                                Estimate\nR.diag                                                            0.4547\nU.X.Sandy River - early and late                                  0.0343\nU.X.Tilton River - early and late                                -0.0889\nU.X.Clatskanie River - late                                       0.0164\nU.X.Grays and Chinook Rivers - late                               0.0582\nU.X.Lower Gorge Tributaries - late                               -0.0604\nU.X.Oregon Upper Gorge Tributaries and Hood River - early        -0.0155\nQ.diag                                                            0.1793\nQ.offdiag                                                         0.1792\nx0.X.Sandy River - early and late                                 6.1640\nx0.X.Tilton River - early and late                               11.8954\nx0.X.Clatskanie River - late                                      6.1301\nx0.X.Grays and Chinook Rivers - late                              6.1545\nx0.X.Lower Gorge Tributaries - late                               8.5981\nx0.X.Oregon Upper Gorge Tributaries and Hood River - early        6.7473\nD.(Sandy River - early and late,S1-10)                           -0.1603\nD.(Tilton River - early and late,S1-10)                          -0.4925\nD.(Clatskanie River - late,S1-10)                                -0.2217\nD.(Grays and Chinook Rivers - late,S1-10)                         0.6871\nD.(Lower Gorge Tributaries - late,S1-10)                         -0.0580\nD.(Oregon Upper Gorge Tributaries and Hood River - early,S1-10)  -0.5855\nD.(Sandy River - early and late,C1-10)                            0.3330\nD.(Tilton River - early and late,C1-10)                           0.8098\nD.(Clatskanie River - late,C1-10)                                 0.2120\nD.(Grays and Chinook Rivers - late,C1-10)                        -0.4796\nD.(Lower Gorge Tributaries - late,C1-10)                          0.4661\nD.(Oregon Upper Gorge Tributaries and Hood River - early,C1-10)   0.7174\nInitial states (x0) defined at t=0\n\nStandard errors have not been calculated. \nUse MARSSparamCIs to compute CIs and bias estimates.\nCode\naic &lt;- c(fit3$AICc, fit11$AICc )\naic-min(aic) #delta AICc \n\n\n[1]  0.00000 23.75023\nNarrowing down to just a 10 year cycle improved the model, but the seasonality still doesn’t help the model as a covariate.\nUltimately, the best model for predicting historical data for Coho salmon is Model 3 which treats all populations idependently.\nHere we predict historical data for all regions using our best model from the initial analysis. One caveat to this approach is that our correlation analysis was performed on a test set, with model 3 specifying Z based on this data. This yields the best model, but is more difficult to fit to historical data based on the information available to us now.\nFuture directions should include evaluating the correlation between all the regions to evaluate if other regions would fit into the same sub-group as the grays/chinook and lower gorge. Because there isn’t an obvious indicator variable that separates these regions from other regions in our test set, more analysis is needed to identify what is driving this separation of states.\nWe tested numerous models as shown above and model three was found to be the best. Model three assumed that all populations followed the same underlying state rather than separate groups have different underlying states. It also assumed a simple Q matrix since we had little biological reason or data to support indepenent variances and covariances between populations.\nWe also tested for cyclic patterns in the data. ACF plots showed a possible correlation in the Tilton River with significant autocorrelation at 5 years. Further tests using Fourier cycles revealed a possible significant cyclic pattern at ten years, although we were unable to generate confidence intervals due to a large number of missing years in the data. Despite this possible result, models including cycling did not significantly outperform model 3.\nBased on our best model there has been no significant decline in abundance across this ESU since 1970.\nWe did not find significant support for our initial hypothesis that populations withing MPG’s would be more closely correlated than populations from other MPG’s. While we found some support for the idea that some populations are correlated, it was limited to the Grays/Chinook Rivers and Lower Gorge Tributaries in model 7. Since these populations are in different habitat types, Coastal vs. Cascade, and would be expected to covary with other more similar regions we did not see a biological reason to group these tributaries. However, additional information may present a valid rationale for why these groups would be correlated.\nOur weak evidence of ten year cycles could be related to the Pacific Decadal Oscillation (PDO) which occurs on ten year cycles. The relationship between PDO and salmon abundance began breaking down after large climatic shifts occured in the 1990’s and NPGO has emerged as a better predictor of ocean effects on salmon. It is possible this ten year cycle was present but weak if it were stronger in the earlier data but less so in more recent data. Further work to examine if this relationship is present in the data could improve historical estimates when PDO was a better predictor of abundance.\nWhile we did not find evidence of a decline in abundance for the period of record, most populations had little to no early data to draw upon and the model was based heavily on the Sandy River as one of only two populations in the ESU that had a long time series of data. Since we used a model that assumed a single underlying state it hindcast a very similar pattern for each population. This model could be improved significantly if additional population specific data were found as the model may no longer depend so heavily on a single watershed."
  },
  {
    "objectID": "Lab-2/Final_Write_ups/Lab-2-team-3_final.html#compare-the-new-models-using-aicc",
    "href": "Lab-2/Final_Write_ups/Lab-2-team-3_final.html#compare-the-new-models-using-aicc",
    "title": "10  Team 3 - Lab 2",
    "section": "compare the new models using AICc",
    "text": "compare the new models using AICc\n\n\nCode\naic &lt;- c(fit3$AICc, fit6$AICc, fit7$AICc, fit8$AICc )\naic-min(aic) #delta AICc \n\n\n[1]  8.251333  6.684090  0.000000 14.624087\n\n\nOur new analysis of grouped populations indicates that some of the regions do behave as sub populations. The new best model builds off of the predictions from the correlation analysis, with the Grays/Chinook Rivers and the Lower Gorge Tributaries behaving as 1 sub-population. Additionally, the model treating major populaton groups as sub-populations performed better than our original model providing some possible evidence that grouping by MPG can improve the model fit to the data. However, the AICc value was only 1.56 better than our model without the grouping by MPG so it is not significantly better.\n\nIncluding cycling - using our coho data, full time series\nBecause we know that coho abundance can be influenced by broad patterns in climate and ocean conditions we tested for underlying seasonality by looking for cycling in the data set and evaluated whether this might generate a better fitting model.To accomplish this, we incorporated seasonality as a covariate in a new model below. We tested 5 and 10 year cycles after looking back at our data, specifically of the Sandy River which has good the fewest missing values of the time series data."
  },
  {
    "objectID": "Lab-2/Final_Write_ups/Lab-2-team-3_final.html#note-renaming-model",
    "href": "Lab-2/Final_Write_ups/Lab-2-team-3_final.html#note-renaming-model",
    "title": "10  Team 3 - Lab 2",
    "section": "note renaming model",
    "text": "note renaming model\nNow let’s fit a model with these covariates. Let’s analyze the populations separately, so Q is diagonal.\n\n\nCode\nmod.list9 &lt;- list(\n  Q = \"unconstrained\", # different varcov\n  U = \"unequal\",\n  R = \"diagonal and equal\",\n  D = \"unconstrained\",\n  d = covariates\n)\n\nmod.list10 &lt;- list(\n  Q = \"equalvarcov\",\n  U = \"unequal\",\n  R = \"diagonal and equal\",\n  D = \"unconstrained\",\n  d = covariates\n)\n\n\n\n\nCode\nfit9 &lt;- MARSS(sub_dat, model=mod.list9)\n\n\nWarning! Reached maxit before parameters converged. Maxit was 500.\n neither abstol nor log-log convergence tests were passed.\n\nMARSS fit is\nEstimation method: kem \nConvergence test: conv.test.slope.tol = 0.5, abstol = 0.001\nWARNING: maxit reached at  500  iter before convergence.\n Neither abstol nor log-log convergence test were passed.\n The likelihood and params are not at the ML values.\n Try setting control$maxit higher.\nLog-likelihood: -122.3743 \nAIC: 360.7487   AICc: 471.1358   \n \n                                                                Estimate\nR.diag                                                            0.0594\nU.X.Sandy River - early and late                                  0.0347\nU.X.Tilton River - early and late                                 0.0848\nU.X.Clatskanie River - late                                       0.0229\nU.X.Grays and Chinook Rivers - late                               0.1188\nU.X.Lower Gorge Tributaries - late                               -0.0249\nU.X.Oregon Upper Gorge Tributaries and Hood River - early         0.0690\nQ.(1,1)                                                           0.6612\nQ.(2,1)                                                           0.1770\nQ.(3,1)                                                           0.7712\nQ.(4,1)                                                           0.2301\nQ.(5,1)                                                           0.7257\nQ.(6,1)                                                           0.1805\nQ.(2,2)                                                           0.1865\nQ.(3,2)                                                           0.0882\nQ.(4,2)                                                           0.0534\nQ.(5,2)                                                           0.1055\nQ.(6,2)                                                          -0.0901\nQ.(3,3)                                                           1.0143\nQ.(4,3)                                                           0.2799\nQ.(5,3)                                                           0.9850\nQ.(6,3)                                                           0.4850\nQ.(4,4)                                                           0.0821\nQ.(5,4)                                                           0.2776\nQ.(6,4)                                                           0.1202\nQ.(5,5)                                                           1.1312\nQ.(6,5)                                                           0.9784\nQ.(6,6)                                                           1.9099\nx0.X.Sandy River - early and late                                 6.1413\nx0.X.Tilton River - early and late                                6.5152\nx0.X.Clatskanie River - late                                      5.4488\nx0.X.Grays and Chinook Rivers - late                              3.2187\nx0.X.Lower Gorge Tributaries - late                               7.2336\nx0.X.Oregon Upper Gorge Tributaries and Hood River - early        3.3965\nD.(Sandy River - early and late,S1-5)                             0.0963\nD.(Tilton River - early and late,S1-5)                            0.1123\nD.(Clatskanie River - late,S1-5)                                  0.1341\nD.(Grays and Chinook Rivers - late,S1-5)                          0.3636\nD.(Lower Gorge Tributaries - late,S1-5)                           0.2403\nD.(Oregon Upper Gorge Tributaries and Hood River - early,S1-5)   -0.2980\nD.(Sandy River - early and late,C1-5)                            -0.2310\nD.(Tilton River - early and late,C1-5)                           -0.1013\nD.(Clatskanie River - late,C1-5)                                 -0.3284\nD.(Grays and Chinook Rivers - late,C1-5)                          0.0548\nD.(Lower Gorge Tributaries - late,C1-5)                          -0.4294\nD.(Oregon Upper Gorge Tributaries and Hood River - early,C1-5)   -0.1410\nD.(Sandy River - early and late,S1-10)                           -0.2140\nD.(Tilton River - early and late,S1-10)                          -0.2920\nD.(Clatskanie River - late,S1-10)                                 0.0129\nD.(Grays and Chinook Rivers - late,S1-10)                        -0.0589\nD.(Lower Gorge Tributaries - late,S1-10)                          0.0943\nD.(Oregon Upper Gorge Tributaries and Hood River - early,S1-10)  -0.3012\nD.(Sandy River - early and late,C1-10)                            0.3017\nD.(Tilton River - early and late,C1-10)                           0.3438\nD.(Clatskanie River - late,C1-10)                                 0.3315\nD.(Grays and Chinook Rivers - late,C1-10)                        -0.2001\nD.(Lower Gorge Tributaries - late,C1-10)                          0.5987\nD.(Oregon Upper Gorge Tributaries and Hood River - early,C1-10)   0.9464\nInitial states (x0) defined at t=0\n\nStandard errors have not been calculated. \nUse MARSSparamCIs to compute CIs and bias estimates.\n\nConvergence warnings\n Warning: the  logLik  parameter value has not converged.\n Type MARSSinfo(\"convergence\") for more info on this warning.\n\n\nCode\nfit10 &lt;- MARSS(sub_dat, model=mod.list10)\n\n\nWarning! Reached maxit before parameters converged. Maxit was 500.\n neither abstol nor log-log convergence tests were passed.\n\nMARSS fit is\nEstimation method: kem \nConvergence test: conv.test.slope.tol = 0.5, abstol = 0.001\nWARNING: maxit reached at  500  iter before convergence.\n Neither abstol nor log-log convergence test were passed.\n The likelihood and params are not at the ML values.\n Try setting control$maxit higher.\nLog-likelihood: -139.8571 \nAIC: 357.7142   AICc: 396.2327   \n \n                                                                Estimate\nR.diag                                                           0.40252\nU.X.Sandy River - early and late                                 0.03120\nU.X.Tilton River - early and late                               -0.09783\nU.X.Clatskanie River - late                                      0.00798\nU.X.Grays and Chinook Rivers - late                              0.04185\nU.X.Lower Gorge Tributaries - late                              -0.07209\nU.X.Oregon Upper Gorge Tributaries and Hood River - early       -0.00911\nQ.diag                                                           0.18717\nQ.offdiag                                                        0.18693\nx0.X.Sandy River - early and late                                6.12719\nx0.X.Tilton River - early and late                              12.03196\nx0.X.Clatskanie River - late                                     6.29538\nx0.X.Grays and Chinook Rivers - late                             6.22823\nx0.X.Lower Gorge Tributaries - late                              8.87295\nx0.X.Oregon Upper Gorge Tributaries and Hood River - early       6.30541\nD.(Sandy River - early and late,S1-5)                            0.06481\nD.(Tilton River - early and late,S1-5)                           0.20617\nD.(Clatskanie River - late,S1-5)                                 0.12357\nD.(Grays and Chinook Rivers - late,S1-5)                         0.21613\nD.(Lower Gorge Tributaries - late,S1-5)                          0.29918\nD.(Oregon Upper Gorge Tributaries and Hood River - early,S1-5)  -0.42741\nD.(Sandy River - early and late,C1-5)                           -0.24312\nD.(Tilton River - early and late,C1-5)                           0.05516\nD.(Clatskanie River - late,C1-5)                                -0.24633\nD.(Grays and Chinook Rivers - late,C1-5)                        -0.26776\nD.(Lower Gorge Tributaries - late,C1-5)                         -0.38084\nD.(Oregon Upper Gorge Tributaries and Hood River - early,C1-5)  -0.39089\nD.(Sandy River - early and late,S1-10)                          -0.16402\nD.(Tilton River - early and late,S1-10)                         -0.50357\nD.(Clatskanie River - late,S1-10)                               -0.24140\nD.(Grays and Chinook Rivers - late,S1-10)                        0.37730\nD.(Lower Gorge Tributaries - late,S1-10)                        -0.12532\nD.(Oregon Upper Gorge Tributaries and Hood River - early,S1-10) -0.60109\nD.(Sandy River - early and late,C1-10)                           0.30372\nD.(Tilton River - early and late,C1-10)                          0.78227\nD.(Clatskanie River - late,C1-10)                                0.18489\nD.(Grays and Chinook Rivers - late,C1-10)                       -0.01834\nD.(Lower Gorge Tributaries - late,C1-10)                         0.42664\nD.(Oregon Upper Gorge Tributaries and Hood River - early,C1-10)  0.56162\nInitial states (x0) defined at t=0\n\nStandard errors have not been calculated. \nUse MARSSparamCIs to compute CIs and bias estimates.\n\nConvergence warnings\n Warning: the  logLik  parameter value has not converged.\n Type MARSSinfo(\"convergence\") for more info on this warning.\n\n\nCode\nplot.mod9 &lt;- autoplot(fit9, plot.type=\"fitted.ytT\")\n\n\nMARSSresiduals.tT reported warnings. See msg element or attribute of returned residuals object.\n\n\n\n\n\nplot.type = fitted.ytT \n\n\n\n\n\nFinished plots.\n\n\nCode\nplot.mod10 &lt;- autoplot(fit10, plot.type=\"fitted.ytT\")\n\n\nMARSSresiduals.tT reported warnings. See msg element or attribute of returned residuals object.\n\n\n\n\n\nplot.type = fitted.ytT \n\n\n\n\n\nFinished plots.\n\n\nHere we look at Model 9.\n\n\nCode\nlibrary(broom)\ndf &lt;- tidy(fit9) %&gt;% #confidence estimates\n  subset(stringr::str_sub(term,1,1)==\"D\") #only D parameters\n\n\nWarning in MARSShessian(MLEobj, method = hessian.fun): MARSShessian: Hessian could not be inverted to compute the parameter var-cov matrix. parSigma set to NULL.  See MARSSinfo(\"HessianNA\").\n\n\nWarning in MARSSparamCIs(x, alpha = alpha, ...): MARSSparamCIs: No parSigma\nelement returned by Hessian function.  See marssMLE object errors\n(MLEobj$errors)\n\n\nCode\ndf$lag &lt;- as.factor(rep(c(5,10), each=12)) #label lags\ndf$river &lt;- as.factor(rep(rownames(sub_dat),4)) #rownames on repeat\ndf$sc &lt;- rep(rep(c(\"S\", \"C\"), each=6), 2) #each sin cos 6 times, 2 test freq\ndf$type &lt;- paste0(df$sc,df$lag)"
  },
  {
    "objectID": "Lab-2/Final_Write_ups/Lab-2-team-3_final.html#fitting-the-best-model-to-the-full-data-set",
    "href": "Lab-2/Final_Write_ups/Lab-2-team-3_final.html#fitting-the-best-model-to-the-full-data-set",
    "title": "10  Team 3 - Lab 2",
    "section": "Fitting the best model to the full data set",
    "text": "Fitting the best model to the full data set\n\n\nCode\nmod.list.full &lt;- list(B = matrix(1), \n                   U = matrix(\"u\"), \n                   Q = matrix(\"q\"), # 1 X\n                   Z = matrix(1, 23, 1), \n                   A = \"scaling\", \n                   R = \"diagonal and unequal\", # single column of 1s for Y\n                   x0 = matrix(\"mu\"), \n                   tinitx = 0)\n\nfit_full &lt;- MARSS(dat, model = mod.list.full, control = list(maxit=1000))\n\n\nWarning! Abstol convergence only. Maxit (=1000) reached before log-log convergence.\nAlert: Numerical warnings were generated. Print the $errors element of output to see the warnings.\n\nMARSS fit is\nEstimation method: kem \nConvergence test: conv.test.slope.tol = 0.5, abstol = 0.001\nWARNING: Abstol convergence only no log-log convergence.\n maxit (=1000) reached before log-log convergence.\n The likelihood and params might not be at the ML values.\n Try setting control$maxit higher.\nLog-likelihood: -243.3955 \nAIC: 582.7909   AICc: 602.4729   \n \n                                                                                                                                       Estimate\nA.Coweeman River - late                                                                                                                7.20e-01\nA.East Fork Lewis River - early and late                                                                                               2.50e-01\nA.Kalama River - late                                                                                                                 -1.60e+00\nA.Lower Cowlitz River - late                                                                                                           1.39e+00\nA.North Fork Lewis River - early and late                                                                                              8.20e-01\nA.North Fork Toutle River - early and late                                                                                             2.36e-01\nA.Salmon Creek - late                                                                                                                  9.31e-02\nA.Sandy River - early and late                                                                                                        -9.15e-01\nA.South Fork Toutle River - early and late                                                                                             3.68e-01\nA.Tilton River - early and late                                                                                                        1.04e+00\nA.Upper Cowlitz River - early and late                                                                                                 2.08e+00\nA.Washougal River - late                                                                                                              -8.84e-01\nA.Big Creek - late                                                                                                                    -1.47e+00\nA.Clatskanie River - late                                                                                                             -1.31e+00\nA.Elochoman River - late                                                                                                              -1.91e-01\nA.Grays and Chinook Rivers - late                                                                                                     -5.09e-03\nA.Mill, Abernathy, and Germany Creeks - late                                                                                          -8.34e-01\nA.Scappoose Creek - late                                                                                                              -1.45e+00\nA.Youngs Bay - late                                                                                                                   -1.91e+00\nA.Lower Gorge Tributaries - late                                                                                                      -1.72e+00\nA.Oregon Upper Gorge Tributaries and Hood River - early                                                                               -1.90e+00\nA.Washington Upper Gorge Tributaries and White Salmon River - late                                                                    -3.43e+00\nR.(Clackamas River - early and late,Clackamas River - early and late)                                                                  7.43e-01\nR.(Coweeman River - late,Coweeman River - late)                                                                                        1.56e-02\nR.(East Fork Lewis River - early and late,East Fork Lewis River - early and late)                                                      8.51e-02\nR.(Kalama River - late,Kalama River - late)                                                                                            8.88e-06\nR.(Lower Cowlitz River - late,Lower Cowlitz River - late)                                                                              2.98e-02\nR.(North Fork Lewis River - early and late,North Fork Lewis River - early and late)                                                    2.86e-01\nR.(North Fork Toutle River - early and late,North Fork Toutle River - early and late)                                                  9.75e-02\nR.(Salmon Creek - late,Salmon Creek - late)                                                                                            1.38e-03\nR.(Sandy River - early and late,Sandy River - early and late)                                                                          4.19e-01\nR.(South Fork Toutle River - early and late,South Fork Toutle River - early and late)                                                  1.96e-01\nR.(Tilton River - early and late,Tilton River - early and late)                                                                        3.31e-01\nR.(Upper Cowlitz River - early and late,Upper Cowlitz River - early and late)                                                          3.32e-01\nR.(Washougal River - late,Washougal River - late)                                                                                      6.48e-05\nR.(Big Creek - late,Big Creek - late)                                                                                                  2.08e-01\nR.(Clatskanie River - late,Clatskanie River - late)                                                                                    5.81e-01\nR.(Elochoman River - late,Elochoman River - late)                                                                                      3.10e-02\nR.(Grays and Chinook Rivers - late,Grays and Chinook Rivers - late)                                                                    2.28e-03\nR.(Mill, Abernathy, and Germany Creeks - late,Mill, Abernathy, and Germany Creeks - late)                                              3.85e-03\nR.(Scappoose Creek - late,Scappoose Creek - late)                                                                                      2.54e-01\nR.(Youngs Bay - late,Youngs Bay - late)                                                                                                9.75e-01\nR.(Lower Gorge Tributaries - late,Lower Gorge Tributaries - late)                                                                      7.95e-01\nR.(Oregon Upper Gorge Tributaries and Hood River - early,Oregon Upper Gorge Tributaries and Hood River - early)                        1.89e+00\nR.(Washington Upper Gorge Tributaries and White Salmon River - late,Washington Upper Gorge Tributaries and White Salmon River - late)  2.92e-01\nU.u                                                                                                                                    2.49e-02\nQ.q                                                                                                                                    2.67e-01\nx0.mu                                                                                                                                  7.32e+00\nInitial states (x0) defined at t=0\n\nStandard errors have not been calculated. \nUse MARSSparamCIs to compute CIs and bias estimates.\n\nConvergence warnings\n1763 warnings. First 10 shown.  Type cat(object$errors) to see the full list.\n Warning: the  A.Grays and Chinook Rivers - late  parameter value has not converged.\n Warning: the  R.(Kalama River - late,Kalama River - late)  parameter value has not converged.\n Type MARSSinfo(\"convergence\") for more info on this warning.\n \nMARSSkem warnings. Type MARSSinfo() for help.\n iter=122 Setting element of R to 0, blocked.  See MARSSinfo(\"R0blocked\"). The error is due to the following MARSSkemcheck errors.\n  MARSSkemcheck error: t=1: For method=kem (EM), if an element of the diagonal of R is 0, the corresponding row of both A and D must be fixed. See MARSSinfo('AZR0').\n iter=122 Setting element of R to 0, blocked.  See MARSSinfo(\"R0blocked\"). The error is due to the following MARSSkemcheck errors.\n  MARSSkemcheck error: t=1: For method=kem (EM), if an element of the diagonal of R is 0, the corresponding row of both A and D must be fixed. See MARSSinfo('AZR0').\n iter=123 Setting element of R to 0, blocked.  See MARSSinfo(\"R0blocked\"). The error is due to the following MARSSkemcheck errors.\n  MARSSkemcheck error: t=1: For method=kem (EM), if an element of the diagonal of R is 0, the corresponding row of both A and D must be fixed. See MARSSinfo('AZR0').\n iter=123 Setting element of R to 0, blocked.  See MARSSinfo(\"R0blocked\"). The error is due to the following MARSSkemcheck errors.\n  MARSSkemcheck error: t=1: For method=kem (EM), if an element of the diagonal of R is 0, the corresponding row of both A and D must be fixed. See MARSSinfo('AZR0').\n iter=124 Setting element of R to 0, blocked.  See MARSSinfo(\"R0blocked\"). The error is due to the following MARSSkemcheck errors.\n  MARSSkemcheck error: t=1: For method=kem (EM), if an element of the diagonal of R is 0, the corresponding row of both A and D must be fixed. See MARSSinfo('AZR0').\n iter=124 Setting element of R to 0, blocked.  See MARSSinfo(\"R0blocked\"). The error is due to the following MARSSkemcheck errors.\n  MARSSkemcheck error: t=1: For method=kem (EM), if an element of the diagonal of R is 0, the corresponding row of both A and D must be fixed. See MARSSinfo('AZR0').\n\n\n#Estimate historical abundance back to 1970\n\n\nCode\nautoplot(fit_full, plot.type=\"fitted.ytT\")\n\n\n\n\n\nplot.type = fitted.ytT \n\n\n\n\n\nFinished plots."
  },
  {
    "objectID": "Lab-2/Final_Write_ups/Lab-2-team-3_final.html#contributions---add-your-contributions",
    "href": "Lab-2/Final_Write_ups/Lab-2-team-3_final.html#contributions---add-your-contributions",
    "title": "10  Team 3 - Lab 2",
    "section": "Contributions - add your contributions!",
    "text": "Contributions - add your contributions!\nWe tackled this lab by having multiple group meetings to brainstorm strategies, test code, and plan progress. Miranda adapted code from the Lab2-MARSS document to the Coho data, acted as scribe for testing code during group meetings, contributed ideas for selecting models to test, and annotated many of the models for report generation. Nick and Karl helped with group coding and Nick pulled the group code documents into one final doc and drafted model assumptions, results and discussion sections with help from the other team members."
  },
  {
    "objectID": "Lab-2/Final_Write_ups/Lab-2-team-4_final.html",
    "href": "Lab-2/Final_Write_ups/Lab-2-team-4_final.html",
    "title": "11  Team 4 - Lab 2",
    "section": "",
    "text": "Data\nWe are examining the sockeye population within the Middle Columbia River System. Within this system there are four major population groups. The Cascades, John Day, Walla Walla, and Yakima. The John Day group has the longest running dataset with records reaching back to 1959. The other major population groups generally start their datasets in the 1980’s. A noteable exception is the Umatilla River within the Walla Walla group which also has data beginning in the 1960s. In general all of the salmon running times occur in the summer in the Middle Columbia River System.\nCode\nlibrary(tidyr)\nlibrary(ggplot2)\nlibrary(tidyverse)\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ lubridate 1.9.2     ✔ tibble    3.2.1\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\nlibrary(dplyr)\nlibrary(forecast)\n\n\nRegistered S3 method overwritten by 'quantmod':\n  method            from\n  as.zoo.data.frame zoo \n\n\nCode\nlibrary(MARSS)\nlibrary(corrplot)\n\n\ncorrplot 0.92 loaded\n\n\nCode\nlibrary(knitr)\nload(here::here(\"Lab-2\", \"Data_Images\", \"columbia-river.rda\"))\nWe are only interested in the rivers in the Middle Columbia River Unit\nCode\n#plot the unique Rivers in Middle Columbia\ndat &lt;- columbia.river\nesuname &lt;- unique(dat$esu_dps)\nyears&lt;-length(unique(dat$spawningyear))\nplotesu &lt;- function(esuname){\n  df &lt;- dat %&gt;% subset(esu_dps %in% esuname)\n  ggplot(df, aes(x=spawningyear, y=log(value), color=majorpopgroup)) + \n    geom_point(size=1, na.rm = TRUE) + \n    theme(strip.text.x = element_text(size = 8)) +\n    theme(axis.text.x = element_text(size = 8, angle = 90)) +\n    facet_wrap(~esapopname) +\n    ggtitle(paste0(esuname, collapse=\"\\n\"))\n}\n#plot the unique Rivers in Middle Columbia\nplotesu(esuname[1])\nNext, the data are arranged so the columns are the years and rows are unique rivers\nCode\nesuname &lt;- esuname[1]\ndat &lt;- columbia.river %&gt;% \n  subset(esu_dps == esuname) %&gt;% # get only this ESU\n  mutate(log.spawner = log(value)) %&gt;% # create a column called log.spawner\n  dplyr::select(esapopname, spawningyear, log.spawner) %&gt;% # get just the columns that I need\n  pivot_wider(names_from = \"esapopname\", values_from = \"log.spawner\") %&gt;% \n  column_to_rownames(var = \"spawningyear\") %&gt;% # make the years rownames\n  as.matrix() %&gt;% # turn into a matrix with year down the rows\n  t() # make time across the columns\n# MARSS complains if I don't do this\ndat[is.na(dat)] &lt;- NA\nany(is.null(dat))\n\n\n[1] FALSE\n\n\nCode\nany(is.infinite(dat))\n\n\n[1] TRUE\n\n\nCode\ndat[is.infinite(dat)] &lt;- NA\nLet’s take a look at the Middle Columbia River area and formulate some hypotheses:\nCode\nhere::here(\"Lab-2\", \"Team-4\", \"Middle Columbia River sockeye.png\") |&gt;\n  knitr::include_graphics()\nEach group has the same general tasks, but you will adapt them as you work on the data.\nAddress the following in your methods\nUltimately the most informative model for streams with missing data was the model tested in hypothesis 2.4, which assumed four underlying states, one for each of the main distinct population centers (DPC), the Cascades, John Day, Walla Walla, and Yakima tributaries, where the Q matrix was unconstrained allowing for correlation in the process errors.\nBased on initial results, cycling only worsened fits, but only one method and two periods, 4 and 9 were tests, so perhaps with more exploraiton cycling considerations would have improved model fits.\nUltimately, the model that assumed four states performed the best, and from this we can interpret that while salmon generally return to their native streams, there is correlation in the systems, and allowing the models to explore that correlation in process error freely resulting in the best model fits and lowest confidence intervals.\nDylan: Hypothesis conceptualization, code for hypothesis 2 and 4, matrix display code, and AICc comparison methods. Madison: Hypothesis 1 and 3, cycling code, and Rmarkdown formatting.\nBoth Dylan and Madi helped to write the report."
  },
  {
    "objectID": "Lab-2/Final_Write_ups/Lab-2-team-4_final.html#data-notes",
    "href": "Lab-2/Final_Write_ups/Lab-2-team-4_final.html#data-notes",
    "title": "11  Team 4 - Lab 2",
    "section": "Data Notes",
    "text": "Data Notes\nMake some assumptions about underlying population structure. This can help you fill in missing data areas.\nAdult run timing (when they’re coming into fresh water, look at run timing–any correlation?)\nJohn Day Data set spans the entire time period, and we will look at the appropriatness of drawing inference from these data to fill in other missing values."
  },
  {
    "objectID": "Lab-2/Final_Write_ups/Lab-2-team-4_final.html#hypotheses",
    "href": "Lab-2/Final_Write_ups/Lab-2-team-4_final.html#hypotheses",
    "title": "11  Team 4 - Lab 2",
    "section": "Hypotheses",
    "text": "Hypotheses\nThere were four main hypotheses explored in this modeling exercise.\n\nHypothesis 1: All underlying states are the same and one underlying population.\nHypothesis 2: There are four underlying states, each associated with one of the main distinct population centers (DPC), the Cascades, John Day, Walla Walla, and Yakima tributaries.\nHypothesis 3: There are two underlying states, one representing the northern area (Walla Walla and Yakima) and on representing the southern area (John Day and Cascades).\nHypothesis 4: There are two underlying states, Yakama and the rest of the areas. Salmon swim eastward to a bend in the river where salmon can choose to go north to the Yakama DPC, or south to other DPCs.\n\nFor Hypothesis 1, only one model was tested that assumed the Q matrix was diagonal and equal. We only tested this as a baseline for simplicity and time sake, as it is the model we had the least amount of confidence in (and was primarily used for conceptualization and initial MARSS model testing). For Hypotheses 2-4 four sub-hypotheses based on the Q matrix were tested.\nHypotheses:\n\nX.1 = Diagonal and Equal\nX.2 = Diagonal and Unequal\nX.3 = Equal variance and covariance\nX.4 = Unconstrained\n\nThis allowed us to get a better idea of the impacts of changing the amount of correlation in the process errors for each of these systems.\n\nOther Assumptions\nYou can assume that R=\"diagonal and equal\" and A=\"scaling\". Assume that “historical” means the earliest years available for your group.\nStates\nYour abundance estimate is the “x” or “state” estimates."
  },
  {
    "objectID": "Lab-2/Final_Write_ups/Lab-2-team-4_final.html#pick-best-hypothesis",
    "href": "Lab-2/Final_Write_ups/Lab-2-team-4_final.html#pick-best-hypothesis",
    "title": "11  Team 4 - Lab 2",
    "section": "Pick best Hypothesis",
    "text": "Pick best Hypothesis\nWe will compare AICs, all models should be comparable."
  },
  {
    "objectID": "Lab-2/Final_Write_ups/Lab-2-team-4_final.html#evidence-of-cycling",
    "href": "Lab-2/Final_Write_ups/Lab-2-team-4_final.html#evidence-of-cycling",
    "title": "11  Team 4 - Lab 2",
    "section": "Evidence of cycling",
    "text": "Evidence of cycling\nWe will see which hypothesis performs the best, and then explore cycling assumptions with a simple cycling model, and some variant on periodicity with our best performing model to see if we can improve fits and AICc.\n\nTips\nAssumptions\nor\ntsSmooth(fit)\nwhere fit is from fit &lt;- MARSS()\nplotting\nEstimate of the mean of the spawner counts based on your x model.\nautoplot(fit, plot.type=\"fitted.ytT\")\ndiagnostics\nautoplot(fit, plot.type=\"residuals\")"
  },
  {
    "objectID": "Lab-2/Final_Write_ups/Lab-2-team-4_final.html#hypothesis-1",
    "href": "Lab-2/Final_Write_ups/Lab-2-team-4_final.html#hypothesis-1",
    "title": "11  Team 4 - Lab 2",
    "section": "Hypothesis 1",
    "text": "Hypothesis 1\nHypothesis 1 assumes that there is a single hidden state (X) for each stream (n=15) in the time series. The Q matrix for the variance of process errors is “diagonal and equal” meaning each state (x) model has the same variance but they are not correlated to each other.\n\\[\n\\text{Hypothesis One}:\n\\begin{bmatrix}\ny_1\\\\\ny_2\\\\\ny_3\\\\\ny_4\\\\\ny_5\\\\\ny_6\\\\\ny_7\\\\\ny_8\\\\\ny_9\\\\\ny_{10}\\\\\ny_{11}\\\\\ny_{12}\\\\\ny_{13}\\\\\ny_{14}\\\\\ny_{15}\\\\\n\\end{bmatrix}_t=\n\\begin{bmatrix}\n1 \\\\\n1 \\\\\n1 \\\\\n1 \\\\\n1 \\\\\n1 \\\\\n1 \\\\\n1 \\\\\n1 \\\\\n1 \\\\\n1 \\\\\n1 \\\\\n1 \\\\\n1 \\\\\n1 \\\\\n\\end{bmatrix}*\n\\begin{bmatrix}\nx_1\\\\\n\\end{bmatrix}_t+\n\\begin{bmatrix}\na_1\\\\\na_2\\\\\na_3\\\\\na_4\\\\\na_5\\\\\na_6\\\\\na_7\\\\\na_8\\\\\na_9\\\\\na_{10}\\\\\na_{11}\\\\\na_{12}\\\\\na_{13}\\\\\na_{14}\\\\\na_{15}\\\\\n\\end{bmatrix}+\n\\begin{bmatrix}\nw_1\\\\\nw_2\\\\\nw_3\\\\\nw_4\\\\\nw_5\\\\\nw_6\\\\\nw_7\\\\\nw_8\\\\\nw_9\\\\\nw_{10}\\\\\nw_{11}\\\\\nw_{12}\\\\\nw_{13}\\\\\nw_{14}\\\\\nw_{15}\\\\\n\\end{bmatrix}_t\n\\] \\[\n\\text{Where }w \\sim MVN\n\\begin{pmatrix}\n\\text{0,}\\begin{bmatrix}\nR\n\\end{bmatrix}\n\\end{pmatrix}\n\\]\n\n\nCode\nmod.list1 &lt;- list(\n  U = \"unequal\", #each of the rivers are estimated separately (different U)\n  R = \"diagonal and equal\", #Process errors are all assumed to be the same \n  Q = \"diagonal and equal\" #Observation error \n)\n\nm1 &lt;- MARSS(dat, model=mod.list1, method=\"BFGS\")\n\n\nSuccess! Converged in 136 iterations.\nFunction MARSSkfas used for likelihood calculation.\n\nMARSS fit is\nEstimation method: BFGS \nEstimation converged in 136 iterations. \nLog-likelihood: -603.7266 \nAIC: 1271.453   AICc: 1274.985   \n \n                                                                                              Estimate\nR.diag                                                                                         0.18209\nU.X.Steelhead (Middle Columbia River DPS) Deschutes River Eastside - summer                   -0.05594\nU.X.Steelhead (Middle Columbia River DPS) Deschutes River Westside - summer                   -0.01546\nU.X.Steelhead (Middle Columbia River DPS) Fifteenmile Creek - winter                          -0.02689\nU.X.Steelhead (Middle Columbia River DPS) John Day River Lower Mainstem Tributaries - summer  -0.01958\nU.X.Steelhead (Middle Columbia River DPS) John Day River Upper Mainstem - summer              -0.01838\nU.X.Steelhead (Middle Columbia River DPS) Middle Fork John Day River - summer                 -0.01218\nU.X.Steelhead (Middle Columbia River DPS) North Fork John Day River - summer                  -0.03634\nU.X.Steelhead (Middle Columbia River DPS) South Fork John Day River - summer                  -0.00526\nU.X.Steelhead (Middle Columbia River DPS) Touchet River - summer                              -0.03313\nU.X.Steelhead (Middle Columbia River DPS) Umatilla River - summer                              0.00777\nU.X.Steelhead (Middle Columbia River DPS) Walla Walla River - summer                          -0.03239\nU.X.Steelhead (Middle Columbia River DPS) Naches River - summer                                0.03833\nU.X.Steelhead (Middle Columbia River DPS) Satus Creek - summer                                 0.02195\nU.X.Steelhead (Middle Columbia River DPS) Toppenish Creek - summer                             0.02892\nU.X.Steelhead (Middle Columbia River DPS) Yakima River Upper Mainstem - summer                 0.05429\nQ.diag                                                                                         0.10296\nx0.X.Steelhead (Middle Columbia River DPS) Deschutes River Eastside - summer                   8.74764\nx0.X.Steelhead (Middle Columbia River DPS) Deschutes River Westside - summer                   6.59490\nx0.X.Steelhead (Middle Columbia River DPS) Fifteenmile Creek - winter                          7.21538\nx0.X.Steelhead (Middle Columbia River DPS) John Day River Lower Mainstem Tributaries - summer  8.27871\nx0.X.Steelhead (Middle Columbia River DPS) John Day River Upper Mainstem - summer              7.06973\nx0.X.Steelhead (Middle Columbia River DPS) Middle Fork John Day River - summer                 7.83286\nx0.X.Steelhead (Middle Columbia River DPS) North Fork John Day River - summer                  8.59051\nx0.X.Steelhead (Middle Columbia River DPS) South Fork John Day River - summer                  6.73248\nx0.X.Steelhead (Middle Columbia River DPS) Touchet River - summer                              7.34999\nx0.X.Steelhead (Middle Columbia River DPS) Umatilla River - summer                             7.16269\nx0.X.Steelhead (Middle Columbia River DPS) Walla Walla River - summer                          8.00358\nx0.X.Steelhead (Middle Columbia River DPS) Naches River - summer                               5.16366\nx0.X.Steelhead (Middle Columbia River DPS) Satus Creek - summer                                5.81032\nx0.X.Steelhead (Middle Columbia River DPS) Toppenish Creek - summer                            4.27677\nx0.X.Steelhead (Middle Columbia River DPS) Yakima River Upper Mainstem - summer                3.12784\nInitial states (x0) defined at t=0\n\nStandard errors have not been calculated. \nUse MARSSparamCIs to compute CIs and bias estimates.\n\n\nThe model converged! Let’s take a look at the plots:\n\n\nCode\nautoplot(m1)\n\n\n\n\n\nplot.type = xtT \n\n\n\n\n\nHit &lt;Return&gt; to see next plot (q to exit): \n\n\n\n\n\nplot.type = fitted.ytT \n\n\n\n\n\nHit &lt;Return&gt; to see next plot (q to exit): \n\n\n\n\n\nplot.type = model.resids.ytt1 \n\n\n\n\n\nHit &lt;Return&gt; to see next plot (q to exit): \n\n\n\n\n\nplot.type = std.model.resids.ytT \n\n\n\n\n\nHit &lt;Return&gt; to see next plot (q to exit): \n\n\n\n\n\nplot.type = std.state.resids.xtT \n\n\n\n\n\nHit &lt;Return&gt; to see next plot (q to exit): \n\n\n\n\n\nplot.type = qqplot.std.model.resids.ytt1 \n\n\n\n\n\nHit &lt;Return&gt; to see next plot (q to exit): \n\n\n\n\n\nplot.type = qqplot.std.state.resids.xtT \n\n\n\n\n\nFinished plots.\n\n\n\n\n\nplot.type = acf.std.model.resids.ytt1 \n\n\n\n\n\nHit &lt;Return&gt; to see next plot (q to exit): \n\n\nThis model doesn’t perform very well in areas that lack data, and, related, some of the QQ plots don’t hold assumptions of normality. This makes sense, given that stream missing data have nothing to inform them. In the states plots, the areas with missing data are characterized by confidence intervals that balloon out. Let’s look at the abundance estimates for this model.\n\n\nCode\nprint(fit1_smooth&lt;-tsSmooth(m1))\n\n\n                                                                                     .rownames\n1                    X.Steelhead (Middle Columbia River DPS) Deschutes River Eastside - summer\n2                    X.Steelhead (Middle Columbia River DPS) Deschutes River Eastside - summer\n3                    X.Steelhead (Middle Columbia River DPS) Deschutes River Eastside - summer\n4                    X.Steelhead (Middle Columbia River DPS) Deschutes River Eastside - summer\n5                    X.Steelhead (Middle Columbia River DPS) Deschutes River Eastside - summer\n6                    X.Steelhead (Middle Columbia River DPS) Deschutes River Eastside - summer\n7                    X.Steelhead (Middle Columbia River DPS) Deschutes River Eastside - summer\n8                    X.Steelhead (Middle Columbia River DPS) Deschutes River Eastside - summer\n9                    X.Steelhead (Middle Columbia River DPS) Deschutes River Eastside - summer\n10                   X.Steelhead (Middle Columbia River DPS) Deschutes River Eastside - summer\n11                   X.Steelhead (Middle Columbia River DPS) Deschutes River Eastside - summer\n12                   X.Steelhead (Middle Columbia River DPS) Deschutes River Eastside - summer\n13                   X.Steelhead (Middle Columbia River DPS) Deschutes River Eastside - summer\n14                   X.Steelhead (Middle Columbia River DPS) Deschutes River Eastside - summer\n15                   X.Steelhead (Middle Columbia River DPS) Deschutes River Eastside - summer\n16                   X.Steelhead (Middle Columbia River DPS) Deschutes River Eastside - summer\n17                   X.Steelhead (Middle Columbia River DPS) Deschutes River Eastside - summer\n18                   X.Steelhead (Middle Columbia River DPS) Deschutes River Eastside - summer\n19                   X.Steelhead (Middle Columbia River DPS) Deschutes River Eastside - summer\n20                   X.Steelhead (Middle Columbia River DPS) Deschutes River Eastside - summer\n21                   X.Steelhead (Middle Columbia River DPS) Deschutes River Eastside - summer\n22                   X.Steelhead (Middle Columbia River DPS) Deschutes River Eastside - summer\n23                   X.Steelhead (Middle Columbia River DPS) Deschutes River Eastside - summer\n24                   X.Steelhead (Middle Columbia River DPS) Deschutes River Eastside - summer\n25                   X.Steelhead (Middle Columbia River DPS) Deschutes River Eastside - summer\n26                   X.Steelhead (Middle Columbia River DPS) Deschutes River Eastside - summer\n27                   X.Steelhead (Middle Columbia River DPS) Deschutes River Eastside - summer\n28                   X.Steelhead (Middle Columbia River DPS) Deschutes River Eastside - summer\n29                   X.Steelhead (Middle Columbia River DPS) Deschutes River Eastside - summer\n30                   X.Steelhead (Middle Columbia River DPS) Deschutes River Eastside - summer\n31                   X.Steelhead (Middle Columbia River DPS) Deschutes River Eastside - summer\n32                   X.Steelhead (Middle Columbia River DPS) Deschutes River Eastside - summer\n33                   X.Steelhead (Middle Columbia River DPS) Deschutes River Eastside - summer\n34                   X.Steelhead (Middle Columbia River DPS) Deschutes River Eastside - summer\n35                   X.Steelhead (Middle Columbia River DPS) Deschutes River Eastside - summer\n36                   X.Steelhead (Middle Columbia River DPS) Deschutes River Eastside - summer\n37                   X.Steelhead (Middle Columbia River DPS) Deschutes River Eastside - summer\n38                   X.Steelhead (Middle Columbia River DPS) Deschutes River Eastside - summer\n39                   X.Steelhead (Middle Columbia River DPS) Deschutes River Eastside - summer\n40                   X.Steelhead (Middle Columbia River DPS) Deschutes River Eastside - summer\n41                   X.Steelhead (Middle Columbia River DPS) Deschutes River Eastside - summer\n42                   X.Steelhead (Middle Columbia River DPS) Deschutes River Eastside - summer\n43                   X.Steelhead (Middle Columbia River DPS) Deschutes River Eastside - summer\n44                   X.Steelhead (Middle Columbia River DPS) Deschutes River Eastside - summer\n45                   X.Steelhead (Middle Columbia River DPS) Deschutes River Eastside - summer\n46                   X.Steelhead (Middle Columbia River DPS) Deschutes River Eastside - summer\n47                   X.Steelhead (Middle Columbia River DPS) Deschutes River Eastside - summer\n48                   X.Steelhead (Middle Columbia River DPS) Deschutes River Eastside - summer\n49                   X.Steelhead (Middle Columbia River DPS) Deschutes River Eastside - summer\n50                   X.Steelhead (Middle Columbia River DPS) Deschutes River Eastside - summer\n51                   X.Steelhead (Middle Columbia River DPS) Deschutes River Eastside - summer\n52                   X.Steelhead (Middle Columbia River DPS) Deschutes River Eastside - summer\n53                   X.Steelhead (Middle Columbia River DPS) Deschutes River Eastside - summer\n54                   X.Steelhead (Middle Columbia River DPS) Deschutes River Eastside - summer\n55                   X.Steelhead (Middle Columbia River DPS) Deschutes River Eastside - summer\n56                   X.Steelhead (Middle Columbia River DPS) Deschutes River Eastside - summer\n57                   X.Steelhead (Middle Columbia River DPS) Deschutes River Eastside - summer\n58                   X.Steelhead (Middle Columbia River DPS) Deschutes River Eastside - summer\n59                   X.Steelhead (Middle Columbia River DPS) Deschutes River Eastside - summer\n60                   X.Steelhead (Middle Columbia River DPS) Deschutes River Eastside - summer\n61                   X.Steelhead (Middle Columbia River DPS) Deschutes River Eastside - summer\n62                   X.Steelhead (Middle Columbia River DPS) Deschutes River Eastside - summer\n63                   X.Steelhead (Middle Columbia River DPS) Deschutes River Eastside - summer\n64                   X.Steelhead (Middle Columbia River DPS) Deschutes River Eastside - summer\n65                   X.Steelhead (Middle Columbia River DPS) Deschutes River Westside - summer\n66                   X.Steelhead (Middle Columbia River DPS) Deschutes River Westside - summer\n67                   X.Steelhead (Middle Columbia River DPS) Deschutes River Westside - summer\n68                   X.Steelhead (Middle Columbia River DPS) Deschutes River Westside - summer\n69                   X.Steelhead (Middle Columbia River DPS) Deschutes River Westside - summer\n70                   X.Steelhead (Middle Columbia River DPS) Deschutes River Westside - summer\n71                   X.Steelhead (Middle Columbia River DPS) Deschutes River Westside - summer\n72                   X.Steelhead (Middle Columbia River DPS) Deschutes River Westside - summer\n73                   X.Steelhead (Middle Columbia River DPS) Deschutes River Westside - summer\n74                   X.Steelhead (Middle Columbia River DPS) Deschutes River Westside - summer\n75                   X.Steelhead (Middle Columbia River DPS) Deschutes River Westside - summer\n76                   X.Steelhead (Middle Columbia River DPS) Deschutes River Westside - summer\n77                   X.Steelhead (Middle Columbia River DPS) Deschutes River Westside - summer\n78                   X.Steelhead (Middle Columbia River DPS) Deschutes River Westside - summer\n79                   X.Steelhead (Middle Columbia River DPS) Deschutes River Westside - summer\n80                   X.Steelhead (Middle Columbia River DPS) Deschutes River Westside - summer\n81                   X.Steelhead (Middle Columbia River DPS) Deschutes River Westside - summer\n82                   X.Steelhead (Middle Columbia River DPS) Deschutes River Westside - summer\n83                   X.Steelhead (Middle Columbia River DPS) Deschutes River Westside - summer\n84                   X.Steelhead (Middle Columbia River DPS) Deschutes River Westside - summer\n85                   X.Steelhead (Middle Columbia River DPS) Deschutes River Westside - summer\n86                   X.Steelhead (Middle Columbia River DPS) Deschutes River Westside - summer\n87                   X.Steelhead (Middle Columbia River DPS) Deschutes River Westside - summer\n88                   X.Steelhead (Middle Columbia River DPS) Deschutes River Westside - summer\n89                   X.Steelhead (Middle Columbia River DPS) Deschutes River Westside - summer\n90                   X.Steelhead (Middle Columbia River DPS) Deschutes River Westside - summer\n91                   X.Steelhead (Middle Columbia River DPS) Deschutes River Westside - summer\n92                   X.Steelhead (Middle Columbia River DPS) Deschutes River Westside - summer\n93                   X.Steelhead (Middle Columbia River DPS) Deschutes River Westside - summer\n94                   X.Steelhead (Middle Columbia River DPS) Deschutes River Westside - summer\n95                   X.Steelhead (Middle Columbia River DPS) Deschutes River Westside - summer\n96                   X.Steelhead (Middle Columbia River DPS) Deschutes River Westside - summer\n97                   X.Steelhead (Middle Columbia River DPS) Deschutes River Westside - summer\n98                   X.Steelhead (Middle Columbia River DPS) Deschutes River Westside - summer\n99                   X.Steelhead (Middle Columbia River DPS) Deschutes River Westside - summer\n100                  X.Steelhead (Middle Columbia River DPS) Deschutes River Westside - summer\n101                  X.Steelhead (Middle Columbia River DPS) Deschutes River Westside - summer\n102                  X.Steelhead (Middle Columbia River DPS) Deschutes River Westside - summer\n103                  X.Steelhead (Middle Columbia River DPS) Deschutes River Westside - summer\n104                  X.Steelhead (Middle Columbia River DPS) Deschutes River Westside - summer\n105                  X.Steelhead (Middle Columbia River DPS) Deschutes River Westside - summer\n106                  X.Steelhead (Middle Columbia River DPS) Deschutes River Westside - summer\n107                  X.Steelhead (Middle Columbia River DPS) Deschutes River Westside - summer\n108                  X.Steelhead (Middle Columbia River DPS) Deschutes River Westside - summer\n109                  X.Steelhead (Middle Columbia River DPS) Deschutes River Westside - summer\n110                  X.Steelhead (Middle Columbia River DPS) Deschutes River Westside - summer\n111                  X.Steelhead (Middle Columbia River DPS) Deschutes River Westside - summer\n112                  X.Steelhead (Middle Columbia River DPS) Deschutes River Westside - summer\n113                  X.Steelhead (Middle Columbia River DPS) Deschutes River Westside - summer\n114                  X.Steelhead (Middle Columbia River DPS) Deschutes River Westside - summer\n115                  X.Steelhead (Middle Columbia River DPS) Deschutes River Westside - summer\n116                  X.Steelhead (Middle Columbia River DPS) Deschutes River Westside - summer\n117                  X.Steelhead (Middle Columbia River DPS) Deschutes River Westside - summer\n118                  X.Steelhead (Middle Columbia River DPS) Deschutes River Westside - summer\n119                  X.Steelhead (Middle Columbia River DPS) Deschutes River Westside - summer\n120                  X.Steelhead (Middle Columbia River DPS) Deschutes River Westside - summer\n121                  X.Steelhead (Middle Columbia River DPS) Deschutes River Westside - summer\n122                  X.Steelhead (Middle Columbia River DPS) Deschutes River Westside - summer\n123                  X.Steelhead (Middle Columbia River DPS) Deschutes River Westside - summer\n124                  X.Steelhead (Middle Columbia River DPS) Deschutes River Westside - summer\n125                  X.Steelhead (Middle Columbia River DPS) Deschutes River Westside - summer\n126                  X.Steelhead (Middle Columbia River DPS) Deschutes River Westside - summer\n127                  X.Steelhead (Middle Columbia River DPS) Deschutes River Westside - summer\n128                  X.Steelhead (Middle Columbia River DPS) Deschutes River Westside - summer\n129                         X.Steelhead (Middle Columbia River DPS) Fifteenmile Creek - winter\n130                         X.Steelhead (Middle Columbia River DPS) Fifteenmile Creek - winter\n131                         X.Steelhead (Middle Columbia River DPS) Fifteenmile Creek - winter\n132                         X.Steelhead (Middle Columbia River DPS) Fifteenmile Creek - winter\n133                         X.Steelhead (Middle Columbia River DPS) Fifteenmile Creek - winter\n134                         X.Steelhead (Middle Columbia River DPS) Fifteenmile Creek - winter\n135                         X.Steelhead (Middle Columbia River DPS) Fifteenmile Creek - winter\n136                         X.Steelhead (Middle Columbia River DPS) Fifteenmile Creek - winter\n137                         X.Steelhead (Middle Columbia River DPS) Fifteenmile Creek - winter\n138                         X.Steelhead (Middle Columbia River DPS) Fifteenmile Creek - winter\n139                         X.Steelhead (Middle Columbia River DPS) Fifteenmile Creek - winter\n140                         X.Steelhead (Middle Columbia River DPS) Fifteenmile Creek - winter\n141                         X.Steelhead (Middle Columbia River DPS) Fifteenmile Creek - winter\n142                         X.Steelhead (Middle Columbia River DPS) Fifteenmile Creek - winter\n143                         X.Steelhead (Middle Columbia River DPS) Fifteenmile Creek - winter\n144                         X.Steelhead (Middle Columbia River DPS) Fifteenmile Creek - winter\n145                         X.Steelhead (Middle Columbia River DPS) Fifteenmile Creek - winter\n146                         X.Steelhead (Middle Columbia River DPS) Fifteenmile Creek - winter\n147                         X.Steelhead (Middle Columbia River DPS) Fifteenmile Creek - winter\n148                         X.Steelhead (Middle Columbia River DPS) Fifteenmile Creek - winter\n149                         X.Steelhead (Middle Columbia River DPS) Fifteenmile Creek - winter\n150                         X.Steelhead (Middle Columbia River DPS) Fifteenmile Creek - winter\n151                         X.Steelhead (Middle Columbia River DPS) Fifteenmile Creek - winter\n152                         X.Steelhead (Middle Columbia River DPS) Fifteenmile Creek - winter\n153                         X.Steelhead (Middle Columbia River DPS) Fifteenmile Creek - winter\n154                         X.Steelhead (Middle Columbia River DPS) Fifteenmile Creek - winter\n155                         X.Steelhead (Middle Columbia River DPS) Fifteenmile Creek - winter\n156                         X.Steelhead (Middle Columbia River DPS) Fifteenmile Creek - winter\n157                         X.Steelhead (Middle Columbia River DPS) Fifteenmile Creek - winter\n158                         X.Steelhead (Middle Columbia River DPS) Fifteenmile Creek - winter\n159                         X.Steelhead (Middle Columbia River DPS) Fifteenmile Creek - winter\n160                         X.Steelhead (Middle Columbia River DPS) Fifteenmile Creek - winter\n161                         X.Steelhead (Middle Columbia River DPS) Fifteenmile Creek - winter\n162                         X.Steelhead (Middle Columbia River DPS) Fifteenmile Creek - winter\n163                         X.Steelhead (Middle Columbia River DPS) Fifteenmile Creek - winter\n164                         X.Steelhead (Middle Columbia River DPS) Fifteenmile Creek - winter\n165                         X.Steelhead (Middle Columbia River DPS) Fifteenmile Creek - winter\n166                         X.Steelhead (Middle Columbia River DPS) Fifteenmile Creek - winter\n167                         X.Steelhead (Middle Columbia River DPS) Fifteenmile Creek - winter\n168                         X.Steelhead (Middle Columbia River DPS) Fifteenmile Creek - winter\n169                         X.Steelhead (Middle Columbia River DPS) Fifteenmile Creek - winter\n170                         X.Steelhead (Middle Columbia River DPS) Fifteenmile Creek - winter\n171                         X.Steelhead (Middle Columbia River DPS) Fifteenmile Creek - winter\n172                         X.Steelhead (Middle Columbia River DPS) Fifteenmile Creek - winter\n173                         X.Steelhead (Middle Columbia River DPS) Fifteenmile Creek - winter\n174                         X.Steelhead (Middle Columbia River DPS) Fifteenmile Creek - winter\n175                         X.Steelhead (Middle Columbia River DPS) Fifteenmile Creek - winter\n176                         X.Steelhead (Middle Columbia River DPS) Fifteenmile Creek - winter\n177                         X.Steelhead (Middle Columbia River DPS) Fifteenmile Creek - winter\n178                         X.Steelhead (Middle Columbia River DPS) Fifteenmile Creek - winter\n179                         X.Steelhead (Middle Columbia River DPS) Fifteenmile Creek - winter\n180                         X.Steelhead (Middle Columbia River DPS) Fifteenmile Creek - winter\n181                         X.Steelhead (Middle Columbia River DPS) Fifteenmile Creek - winter\n182                         X.Steelhead (Middle Columbia River DPS) Fifteenmile Creek - winter\n183                         X.Steelhead (Middle Columbia River DPS) Fifteenmile Creek - winter\n184                         X.Steelhead (Middle Columbia River DPS) Fifteenmile Creek - winter\n185                         X.Steelhead (Middle Columbia River DPS) Fifteenmile Creek - winter\n186                         X.Steelhead (Middle Columbia River DPS) Fifteenmile Creek - winter\n187                         X.Steelhead (Middle Columbia River DPS) Fifteenmile Creek - winter\n188                         X.Steelhead (Middle Columbia River DPS) Fifteenmile Creek - winter\n189                         X.Steelhead (Middle Columbia River DPS) Fifteenmile Creek - winter\n190                         X.Steelhead (Middle Columbia River DPS) Fifteenmile Creek - winter\n191                         X.Steelhead (Middle Columbia River DPS) Fifteenmile Creek - winter\n192                         X.Steelhead (Middle Columbia River DPS) Fifteenmile Creek - winter\n193 X.Steelhead (Middle Columbia River DPS) John Day River Lower Mainstem Tributaries - summer\n194 X.Steelhead (Middle Columbia River DPS) John Day River Lower Mainstem Tributaries - summer\n195 X.Steelhead (Middle Columbia River DPS) John Day River Lower Mainstem Tributaries - summer\n196 X.Steelhead (Middle Columbia River DPS) John Day River Lower Mainstem Tributaries - summer\n197 X.Steelhead (Middle Columbia River DPS) John Day River Lower Mainstem Tributaries - summer\n198 X.Steelhead (Middle Columbia River DPS) John Day River Lower Mainstem Tributaries - summer\n199 X.Steelhead (Middle Columbia River DPS) John Day River Lower Mainstem Tributaries - summer\n200 X.Steelhead (Middle Columbia River DPS) John Day River Lower Mainstem Tributaries - summer\n201 X.Steelhead (Middle Columbia River DPS) John Day River Lower Mainstem Tributaries - summer\n202 X.Steelhead (Middle Columbia River DPS) John Day River Lower Mainstem Tributaries - summer\n203 X.Steelhead (Middle Columbia River DPS) John Day River Lower Mainstem Tributaries - summer\n204 X.Steelhead (Middle Columbia River DPS) John Day River Lower Mainstem Tributaries - summer\n205 X.Steelhead (Middle Columbia River DPS) John Day River Lower Mainstem Tributaries - summer\n206 X.Steelhead (Middle Columbia River DPS) John Day River Lower Mainstem Tributaries - summer\n207 X.Steelhead (Middle Columbia River DPS) John Day River Lower Mainstem Tributaries - summer\n208 X.Steelhead (Middle Columbia River DPS) John Day River Lower Mainstem Tributaries - summer\n209 X.Steelhead (Middle Columbia River DPS) John Day River Lower Mainstem Tributaries - summer\n210 X.Steelhead (Middle Columbia River DPS) John Day River Lower Mainstem Tributaries - summer\n211 X.Steelhead (Middle Columbia River DPS) John Day River Lower Mainstem Tributaries - summer\n212 X.Steelhead (Middle Columbia River DPS) John Day River Lower Mainstem Tributaries - summer\n213 X.Steelhead (Middle Columbia River DPS) John Day River Lower Mainstem Tributaries - summer\n214 X.Steelhead (Middle Columbia River DPS) John Day River Lower Mainstem Tributaries - summer\n215 X.Steelhead (Middle Columbia River DPS) John Day River Lower Mainstem Tributaries - summer\n216 X.Steelhead (Middle Columbia River DPS) John Day River Lower Mainstem Tributaries - summer\n217 X.Steelhead (Middle Columbia River DPS) John Day River Lower Mainstem Tributaries - summer\n218 X.Steelhead (Middle Columbia River DPS) John Day River Lower Mainstem Tributaries - summer\n219 X.Steelhead (Middle Columbia River DPS) John Day River Lower Mainstem Tributaries - summer\n220 X.Steelhead (Middle Columbia River DPS) John Day River Lower Mainstem Tributaries - summer\n221 X.Steelhead (Middle Columbia River DPS) John Day River Lower Mainstem Tributaries - summer\n222 X.Steelhead (Middle Columbia River DPS) John Day River Lower Mainstem Tributaries - summer\n223 X.Steelhead (Middle Columbia River DPS) John Day River Lower Mainstem Tributaries - summer\n224 X.Steelhead (Middle Columbia River DPS) John Day River Lower Mainstem Tributaries - summer\n225 X.Steelhead (Middle Columbia River DPS) John Day River Lower Mainstem Tributaries - summer\n226 X.Steelhead (Middle Columbia River DPS) John Day River Lower Mainstem Tributaries - summer\n227 X.Steelhead (Middle Columbia River DPS) John Day River Lower Mainstem Tributaries - summer\n228 X.Steelhead (Middle Columbia River DPS) John Day River Lower Mainstem Tributaries - summer\n229 X.Steelhead (Middle Columbia River DPS) John Day River Lower Mainstem Tributaries - summer\n230 X.Steelhead (Middle Columbia River DPS) John Day River Lower Mainstem Tributaries - summer\n231 X.Steelhead (Middle Columbia River DPS) John Day River Lower Mainstem Tributaries - summer\n232 X.Steelhead (Middle Columbia River DPS) John Day River Lower Mainstem Tributaries - summer\n233 X.Steelhead (Middle Columbia River DPS) John Day River Lower Mainstem Tributaries - summer\n234 X.Steelhead (Middle Columbia River DPS) John Day River Lower Mainstem Tributaries - summer\n235 X.Steelhead (Middle Columbia River DPS) John Day River Lower Mainstem Tributaries - summer\n236 X.Steelhead (Middle Columbia River DPS) John Day River Lower Mainstem Tributaries - summer\n237 X.Steelhead (Middle Columbia River DPS) John Day River Lower Mainstem Tributaries - summer\n238 X.Steelhead (Middle Columbia River DPS) John Day River Lower Mainstem Tributaries - summer\n239 X.Steelhead (Middle Columbia River DPS) John Day River Lower Mainstem Tributaries - summer\n240 X.Steelhead (Middle Columbia River DPS) John Day River Lower Mainstem Tributaries - summer\n241 X.Steelhead (Middle Columbia River DPS) John Day River Lower Mainstem Tributaries - summer\n242 X.Steelhead (Middle Columbia River DPS) John Day River Lower Mainstem Tributaries - summer\n243 X.Steelhead (Middle Columbia River DPS) John Day River Lower Mainstem Tributaries - summer\n244 X.Steelhead (Middle Columbia River DPS) John Day River Lower Mainstem Tributaries - summer\n245 X.Steelhead (Middle Columbia River DPS) John Day River Lower Mainstem Tributaries - summer\n246 X.Steelhead (Middle Columbia River DPS) John Day River Lower Mainstem Tributaries - summer\n247 X.Steelhead (Middle Columbia River DPS) John Day River Lower Mainstem Tributaries - summer\n248 X.Steelhead (Middle Columbia River DPS) John Day River Lower Mainstem Tributaries - summer\n249 X.Steelhead (Middle Columbia River DPS) John Day River Lower Mainstem Tributaries - summer\n250 X.Steelhead (Middle Columbia River DPS) John Day River Lower Mainstem Tributaries - summer\n251 X.Steelhead (Middle Columbia River DPS) John Day River Lower Mainstem Tributaries - summer\n252 X.Steelhead (Middle Columbia River DPS) John Day River Lower Mainstem Tributaries - summer\n253 X.Steelhead (Middle Columbia River DPS) John Day River Lower Mainstem Tributaries - summer\n254 X.Steelhead (Middle Columbia River DPS) John Day River Lower Mainstem Tributaries - summer\n255 X.Steelhead (Middle Columbia River DPS) John Day River Lower Mainstem Tributaries - summer\n256 X.Steelhead (Middle Columbia River DPS) John Day River Lower Mainstem Tributaries - summer\n257             X.Steelhead (Middle Columbia River DPS) John Day River Upper Mainstem - summer\n258             X.Steelhead (Middle Columbia River DPS) John Day River Upper Mainstem - summer\n259             X.Steelhead (Middle Columbia River DPS) John Day River Upper Mainstem - summer\n260             X.Steelhead (Middle Columbia River DPS) John Day River Upper Mainstem - summer\n261             X.Steelhead (Middle Columbia River DPS) John Day River Upper Mainstem - summer\n262             X.Steelhead (Middle Columbia River DPS) John Day River Upper Mainstem - summer\n263             X.Steelhead (Middle Columbia River DPS) John Day River Upper Mainstem - summer\n264             X.Steelhead (Middle Columbia River DPS) John Day River Upper Mainstem - summer\n265             X.Steelhead (Middle Columbia River DPS) John Day River Upper Mainstem - summer\n266             X.Steelhead (Middle Columbia River DPS) John Day River Upper Mainstem - summer\n267             X.Steelhead (Middle Columbia River DPS) John Day River Upper Mainstem - summer\n268             X.Steelhead (Middle Columbia River DPS) John Day River Upper Mainstem - summer\n269             X.Steelhead (Middle Columbia River DPS) John Day River Upper Mainstem - summer\n270             X.Steelhead (Middle Columbia River DPS) John Day River Upper Mainstem - summer\n271             X.Steelhead (Middle Columbia River DPS) John Day River Upper Mainstem - summer\n272             X.Steelhead (Middle Columbia River DPS) John Day River Upper Mainstem - summer\n273             X.Steelhead (Middle Columbia River DPS) John Day River Upper Mainstem - summer\n274             X.Steelhead (Middle Columbia River DPS) John Day River Upper Mainstem - summer\n275             X.Steelhead (Middle Columbia River DPS) John Day River Upper Mainstem - summer\n276             X.Steelhead (Middle Columbia River DPS) John Day River Upper Mainstem - summer\n277             X.Steelhead (Middle Columbia River DPS) John Day River Upper Mainstem - summer\n278             X.Steelhead (Middle Columbia River DPS) John Day River Upper Mainstem - summer\n279             X.Steelhead (Middle Columbia River DPS) John Day River Upper Mainstem - summer\n280             X.Steelhead (Middle Columbia River DPS) John Day River Upper Mainstem - summer\n281             X.Steelhead (Middle Columbia River DPS) John Day River Upper Mainstem - summer\n282             X.Steelhead (Middle Columbia River DPS) John Day River Upper Mainstem - summer\n283             X.Steelhead (Middle Columbia River DPS) John Day River Upper Mainstem - summer\n284             X.Steelhead (Middle Columbia River DPS) John Day River Upper Mainstem - summer\n285             X.Steelhead (Middle Columbia River DPS) John Day River Upper Mainstem - summer\n286             X.Steelhead (Middle Columbia River DPS) John Day River Upper Mainstem - summer\n287             X.Steelhead (Middle Columbia River DPS) John Day River Upper Mainstem - summer\n288             X.Steelhead (Middle Columbia River DPS) John Day River Upper Mainstem - summer\n289             X.Steelhead (Middle Columbia River DPS) John Day River Upper Mainstem - summer\n290             X.Steelhead (Middle Columbia River DPS) John Day River Upper Mainstem - summer\n291             X.Steelhead (Middle Columbia River DPS) John Day River Upper Mainstem - summer\n292             X.Steelhead (Middle Columbia River DPS) John Day River Upper Mainstem - summer\n293             X.Steelhead (Middle Columbia River DPS) John Day River Upper Mainstem - summer\n294             X.Steelhead (Middle Columbia River DPS) John Day River Upper Mainstem - summer\n295             X.Steelhead (Middle Columbia River DPS) John Day River Upper Mainstem - summer\n296             X.Steelhead (Middle Columbia River DPS) John Day River Upper Mainstem - summer\n297             X.Steelhead (Middle Columbia River DPS) John Day River Upper Mainstem - summer\n298             X.Steelhead (Middle Columbia River DPS) John Day River Upper Mainstem - summer\n299             X.Steelhead (Middle Columbia River DPS) John Day River Upper Mainstem - summer\n300             X.Steelhead (Middle Columbia River DPS) John Day River Upper Mainstem - summer\n301             X.Steelhead (Middle Columbia River DPS) John Day River Upper Mainstem - summer\n302             X.Steelhead (Middle Columbia River DPS) John Day River Upper Mainstem - summer\n303             X.Steelhead (Middle Columbia River DPS) John Day River Upper Mainstem - summer\n304             X.Steelhead (Middle Columbia River DPS) John Day River Upper Mainstem - summer\n305             X.Steelhead (Middle Columbia River DPS) John Day River Upper Mainstem - summer\n306             X.Steelhead (Middle Columbia River DPS) John Day River Upper Mainstem - summer\n307             X.Steelhead (Middle Columbia River DPS) John Day River Upper Mainstem - summer\n308             X.Steelhead (Middle Columbia River DPS) John Day River Upper Mainstem - summer\n309             X.Steelhead (Middle Columbia River DPS) John Day River Upper Mainstem - summer\n310             X.Steelhead (Middle Columbia River DPS) John Day River Upper Mainstem - summer\n311             X.Steelhead (Middle Columbia River DPS) John Day River Upper Mainstem - summer\n312             X.Steelhead (Middle Columbia River DPS) John Day River Upper Mainstem - summer\n313             X.Steelhead (Middle Columbia River DPS) John Day River Upper Mainstem - summer\n314             X.Steelhead (Middle Columbia River DPS) John Day River Upper Mainstem - summer\n315             X.Steelhead (Middle Columbia River DPS) John Day River Upper Mainstem - summer\n316             X.Steelhead (Middle Columbia River DPS) John Day River Upper Mainstem - summer\n317             X.Steelhead (Middle Columbia River DPS) John Day River Upper Mainstem - summer\n318             X.Steelhead (Middle Columbia River DPS) John Day River Upper Mainstem - summer\n319             X.Steelhead (Middle Columbia River DPS) John Day River Upper Mainstem - summer\n320             X.Steelhead (Middle Columbia River DPS) John Day River Upper Mainstem - summer\n321                X.Steelhead (Middle Columbia River DPS) Middle Fork John Day River - summer\n322                X.Steelhead (Middle Columbia River DPS) Middle Fork John Day River - summer\n323                X.Steelhead (Middle Columbia River DPS) Middle Fork John Day River - summer\n324                X.Steelhead (Middle Columbia River DPS) Middle Fork John Day River - summer\n325                X.Steelhead (Middle Columbia River DPS) Middle Fork John Day River - summer\n326                X.Steelhead (Middle Columbia River DPS) Middle Fork John Day River - summer\n327                X.Steelhead (Middle Columbia River DPS) Middle Fork John Day River - summer\n328                X.Steelhead (Middle Columbia River DPS) Middle Fork John Day River - summer\n329                X.Steelhead (Middle Columbia River DPS) Middle Fork John Day River - summer\n330                X.Steelhead (Middle Columbia River DPS) Middle Fork John Day River - summer\n331                X.Steelhead (Middle Columbia River DPS) Middle Fork John Day River - summer\n332                X.Steelhead (Middle Columbia River DPS) Middle Fork John Day River - summer\n333                X.Steelhead (Middle Columbia River DPS) Middle Fork John Day River - summer\n334                X.Steelhead (Middle Columbia River DPS) Middle Fork John Day River - summer\n335                X.Steelhead (Middle Columbia River DPS) Middle Fork John Day River - summer\n336                X.Steelhead (Middle Columbia River DPS) Middle Fork John Day River - summer\n337                X.Steelhead (Middle Columbia River DPS) Middle Fork John Day River - summer\n338                X.Steelhead (Middle Columbia River DPS) Middle Fork John Day River - summer\n339                X.Steelhead (Middle Columbia River DPS) Middle Fork John Day River - summer\n340                X.Steelhead (Middle Columbia River DPS) Middle Fork John Day River - summer\n341                X.Steelhead (Middle Columbia River DPS) Middle Fork John Day River - summer\n342                X.Steelhead (Middle Columbia River DPS) Middle Fork John Day River - summer\n343                X.Steelhead (Middle Columbia River DPS) Middle Fork John Day River - summer\n344                X.Steelhead (Middle Columbia River DPS) Middle Fork John Day River - summer\n345                X.Steelhead (Middle Columbia River DPS) Middle Fork John Day River - summer\n346                X.Steelhead (Middle Columbia River DPS) Middle Fork John Day River - summer\n347                X.Steelhead (Middle Columbia River DPS) Middle Fork John Day River - summer\n348                X.Steelhead (Middle Columbia River DPS) Middle Fork John Day River - summer\n349                X.Steelhead (Middle Columbia River DPS) Middle Fork John Day River - summer\n350                X.Steelhead (Middle Columbia River DPS) Middle Fork John Day River - summer\n351                X.Steelhead (Middle Columbia River DPS) Middle Fork John Day River - summer\n352                X.Steelhead (Middle Columbia River DPS) Middle Fork John Day River - summer\n353                X.Steelhead (Middle Columbia River DPS) Middle Fork John Day River - summer\n354                X.Steelhead (Middle Columbia River DPS) Middle Fork John Day River - summer\n355                X.Steelhead (Middle Columbia River DPS) Middle Fork John Day River - summer\n356                X.Steelhead (Middle Columbia River DPS) Middle Fork John Day River - summer\n357                X.Steelhead (Middle Columbia River DPS) Middle Fork John Day River - summer\n358                X.Steelhead (Middle Columbia River DPS) Middle Fork John Day River - summer\n359                X.Steelhead (Middle Columbia River DPS) Middle Fork John Day River - summer\n360                X.Steelhead (Middle Columbia River DPS) Middle Fork John Day River - summer\n361                X.Steelhead (Middle Columbia River DPS) Middle Fork John Day River - summer\n362                X.Steelhead (Middle Columbia River DPS) Middle Fork John Day River - summer\n363                X.Steelhead (Middle Columbia River DPS) Middle Fork John Day River - summer\n364                X.Steelhead (Middle Columbia River DPS) Middle Fork John Day River - summer\n365                X.Steelhead (Middle Columbia River DPS) Middle Fork John Day River - summer\n366                X.Steelhead (Middle Columbia River DPS) Middle Fork John Day River - summer\n367                X.Steelhead (Middle Columbia River DPS) Middle Fork John Day River - summer\n368                X.Steelhead (Middle Columbia River DPS) Middle Fork John Day River - summer\n369                X.Steelhead (Middle Columbia River DPS) Middle Fork John Day River - summer\n370                X.Steelhead (Middle Columbia River DPS) Middle Fork John Day River - summer\n371                X.Steelhead (Middle Columbia River DPS) Middle Fork John Day River - summer\n372                X.Steelhead (Middle Columbia River DPS) Middle Fork John Day River - summer\n373                X.Steelhead (Middle Columbia River DPS) Middle Fork John Day River - summer\n374                X.Steelhead (Middle Columbia River DPS) Middle Fork John Day River - summer\n375                X.Steelhead (Middle Columbia River DPS) Middle Fork John Day River - summer\n376                X.Steelhead (Middle Columbia River DPS) Middle Fork John Day River - summer\n377                X.Steelhead (Middle Columbia River DPS) Middle Fork John Day River - summer\n378                X.Steelhead (Middle Columbia River DPS) Middle Fork John Day River - summer\n379                X.Steelhead (Middle Columbia River DPS) Middle Fork John Day River - summer\n380                X.Steelhead (Middle Columbia River DPS) Middle Fork John Day River - summer\n381                X.Steelhead (Middle Columbia River DPS) Middle Fork John Day River - summer\n382                X.Steelhead (Middle Columbia River DPS) Middle Fork John Day River - summer\n383                X.Steelhead (Middle Columbia River DPS) Middle Fork John Day River - summer\n384                X.Steelhead (Middle Columbia River DPS) Middle Fork John Day River - summer\n385                 X.Steelhead (Middle Columbia River DPS) North Fork John Day River - summer\n386                 X.Steelhead (Middle Columbia River DPS) North Fork John Day River - summer\n387                 X.Steelhead (Middle Columbia River DPS) North Fork John Day River - summer\n388                 X.Steelhead (Middle Columbia River DPS) North Fork John Day River - summer\n389                 X.Steelhead (Middle Columbia River DPS) North Fork John Day River - summer\n390                 X.Steelhead (Middle Columbia River DPS) North Fork John Day River - summer\n391                 X.Steelhead (Middle Columbia River DPS) North Fork John Day River - summer\n392                 X.Steelhead (Middle Columbia River DPS) North Fork John Day River - summer\n393                 X.Steelhead (Middle Columbia River DPS) North Fork John Day River - summer\n394                 X.Steelhead (Middle Columbia River DPS) North Fork John Day River - summer\n395                 X.Steelhead (Middle Columbia River DPS) North Fork John Day River - summer\n396                 X.Steelhead (Middle Columbia River DPS) North Fork John Day River - summer\n397                 X.Steelhead (Middle Columbia River DPS) North Fork John Day River - summer\n398                 X.Steelhead (Middle Columbia River DPS) North Fork John Day River - summer\n399                 X.Steelhead (Middle Columbia River DPS) North Fork John Day River - summer\n400                 X.Steelhead (Middle Columbia River DPS) North Fork John Day River - summer\n401                 X.Steelhead (Middle Columbia River DPS) North Fork John Day River - summer\n402                 X.Steelhead (Middle Columbia River DPS) North Fork John Day River - summer\n403                 X.Steelhead (Middle Columbia River DPS) North Fork John Day River - summer\n404                 X.Steelhead (Middle Columbia River DPS) North Fork John Day River - summer\n405                 X.Steelhead (Middle Columbia River DPS) North Fork John Day River - summer\n406                 X.Steelhead (Middle Columbia River DPS) North Fork John Day River - summer\n407                 X.Steelhead (Middle Columbia River DPS) North Fork John Day River - summer\n408                 X.Steelhead (Middle Columbia River DPS) North Fork John Day River - summer\n409                 X.Steelhead (Middle Columbia River DPS) North Fork John Day River - summer\n410                 X.Steelhead (Middle Columbia River DPS) North Fork John Day River - summer\n411                 X.Steelhead (Middle Columbia River DPS) North Fork John Day River - summer\n412                 X.Steelhead (Middle Columbia River DPS) North Fork John Day River - summer\n413                 X.Steelhead (Middle Columbia River DPS) North Fork John Day River - summer\n414                 X.Steelhead (Middle Columbia River DPS) North Fork John Day River - summer\n415                 X.Steelhead (Middle Columbia River DPS) North Fork John Day River - summer\n416                 X.Steelhead (Middle Columbia River DPS) North Fork John Day River - summer\n417                 X.Steelhead (Middle Columbia River DPS) North Fork John Day River - summer\n418                 X.Steelhead (Middle Columbia River DPS) North Fork John Day River - summer\n419                 X.Steelhead (Middle Columbia River DPS) North Fork John Day River - summer\n420                 X.Steelhead (Middle Columbia River DPS) North Fork John Day River - summer\n421                 X.Steelhead (Middle Columbia River DPS) North Fork John Day River - summer\n422                 X.Steelhead (Middle Columbia River DPS) North Fork John Day River - summer\n423                 X.Steelhead (Middle Columbia River DPS) North Fork John Day River - summer\n424                 X.Steelhead (Middle Columbia River DPS) North Fork John Day River - summer\n425                 X.Steelhead (Middle Columbia River DPS) North Fork John Day River - summer\n426                 X.Steelhead (Middle Columbia River DPS) North Fork John Day River - summer\n427                 X.Steelhead (Middle Columbia River DPS) North Fork John Day River - summer\n428                 X.Steelhead (Middle Columbia River DPS) North Fork John Day River - summer\n429                 X.Steelhead (Middle Columbia River DPS) North Fork John Day River - summer\n430                 X.Steelhead (Middle Columbia River DPS) North Fork John Day River - summer\n431                 X.Steelhead (Middle Columbia River DPS) North Fork John Day River - summer\n432                 X.Steelhead (Middle Columbia River DPS) North Fork John Day River - summer\n433                 X.Steelhead (Middle Columbia River DPS) North Fork John Day River - summer\n434                 X.Steelhead (Middle Columbia River DPS) North Fork John Day River - summer\n435                 X.Steelhead (Middle Columbia River DPS) North Fork John Day River - summer\n436                 X.Steelhead (Middle Columbia River DPS) North Fork John Day River - summer\n437                 X.Steelhead (Middle Columbia River DPS) North Fork John Day River - summer\n438                 X.Steelhead (Middle Columbia River DPS) North Fork John Day River - summer\n439                 X.Steelhead (Middle Columbia River DPS) North Fork John Day River - summer\n440                 X.Steelhead (Middle Columbia River DPS) North Fork John Day River - summer\n441                 X.Steelhead (Middle Columbia River DPS) North Fork John Day River - summer\n442                 X.Steelhead (Middle Columbia River DPS) North Fork John Day River - summer\n443                 X.Steelhead (Middle Columbia River DPS) North Fork John Day River - summer\n444                 X.Steelhead (Middle Columbia River DPS) North Fork John Day River - summer\n445                 X.Steelhead (Middle Columbia River DPS) North Fork John Day River - summer\n446                 X.Steelhead (Middle Columbia River DPS) North Fork John Day River - summer\n447                 X.Steelhead (Middle Columbia River DPS) North Fork John Day River - summer\n448                 X.Steelhead (Middle Columbia River DPS) North Fork John Day River - summer\n449                 X.Steelhead (Middle Columbia River DPS) South Fork John Day River - summer\n450                 X.Steelhead (Middle Columbia River DPS) South Fork John Day River - summer\n451                 X.Steelhead (Middle Columbia River DPS) South Fork John Day River - summer\n452                 X.Steelhead (Middle Columbia River DPS) South Fork John Day River - summer\n453                 X.Steelhead (Middle Columbia River DPS) South Fork John Day River - summer\n454                 X.Steelhead (Middle Columbia River DPS) South Fork John Day River - summer\n455                 X.Steelhead (Middle Columbia River DPS) South Fork John Day River - summer\n456                 X.Steelhead (Middle Columbia River DPS) South Fork John Day River - summer\n457                 X.Steelhead (Middle Columbia River DPS) South Fork John Day River - summer\n458                 X.Steelhead (Middle Columbia River DPS) South Fork John Day River - summer\n459                 X.Steelhead (Middle Columbia River DPS) South Fork John Day River - summer\n460                 X.Steelhead (Middle Columbia River DPS) South Fork John Day River - summer\n461                 X.Steelhead (Middle Columbia River DPS) South Fork John Day River - summer\n462                 X.Steelhead (Middle Columbia River DPS) South Fork John Day River - summer\n463                 X.Steelhead (Middle Columbia River DPS) South Fork John Day River - summer\n464                 X.Steelhead (Middle Columbia River DPS) South Fork John Day River - summer\n465                 X.Steelhead (Middle Columbia River DPS) South Fork John Day River - summer\n466                 X.Steelhead (Middle Columbia River DPS) South Fork John Day River - summer\n467                 X.Steelhead (Middle Columbia River DPS) South Fork John Day River - summer\n468                 X.Steelhead (Middle Columbia River DPS) South Fork John Day River - summer\n469                 X.Steelhead (Middle Columbia River DPS) South Fork John Day River - summer\n470                 X.Steelhead (Middle Columbia River DPS) South Fork John Day River - summer\n471                 X.Steelhead (Middle Columbia River DPS) South Fork John Day River - summer\n472                 X.Steelhead (Middle Columbia River DPS) South Fork John Day River - summer\n473                 X.Steelhead (Middle Columbia River DPS) South Fork John Day River - summer\n474                 X.Steelhead (Middle Columbia River DPS) South Fork John Day River - summer\n475                 X.Steelhead (Middle Columbia River DPS) South Fork John Day River - summer\n476                 X.Steelhead (Middle Columbia River DPS) South Fork John Day River - summer\n477                 X.Steelhead (Middle Columbia River DPS) South Fork John Day River - summer\n478                 X.Steelhead (Middle Columbia River DPS) South Fork John Day River - summer\n479                 X.Steelhead (Middle Columbia River DPS) South Fork John Day River - summer\n480                 X.Steelhead (Middle Columbia River DPS) South Fork John Day River - summer\n481                 X.Steelhead (Middle Columbia River DPS) South Fork John Day River - summer\n482                 X.Steelhead (Middle Columbia River DPS) South Fork John Day River - summer\n483                 X.Steelhead (Middle Columbia River DPS) South Fork John Day River - summer\n484                 X.Steelhead (Middle Columbia River DPS) South Fork John Day River - summer\n485                 X.Steelhead (Middle Columbia River DPS) South Fork John Day River - summer\n486                 X.Steelhead (Middle Columbia River DPS) South Fork John Day River - summer\n487                 X.Steelhead (Middle Columbia River DPS) South Fork John Day River - summer\n488                 X.Steelhead (Middle Columbia River DPS) South Fork John Day River - summer\n489                 X.Steelhead (Middle Columbia River DPS) South Fork John Day River - summer\n490                 X.Steelhead (Middle Columbia River DPS) South Fork John Day River - summer\n491                 X.Steelhead (Middle Columbia River DPS) South Fork John Day River - summer\n492                 X.Steelhead (Middle Columbia River DPS) South Fork John Day River - summer\n493                 X.Steelhead (Middle Columbia River DPS) South Fork John Day River - summer\n494                 X.Steelhead (Middle Columbia River DPS) South Fork John Day River - summer\n495                 X.Steelhead (Middle Columbia River DPS) South Fork John Day River - summer\n496                 X.Steelhead (Middle Columbia River DPS) South Fork John Day River - summer\n497                 X.Steelhead (Middle Columbia River DPS) South Fork John Day River - summer\n498                 X.Steelhead (Middle Columbia River DPS) South Fork John Day River - summer\n499                 X.Steelhead (Middle Columbia River DPS) South Fork John Day River - summer\n500                 X.Steelhead (Middle Columbia River DPS) South Fork John Day River - summer\n501                 X.Steelhead (Middle Columbia River DPS) South Fork John Day River - summer\n502                 X.Steelhead (Middle Columbia River DPS) South Fork John Day River - summer\n503                 X.Steelhead (Middle Columbia River DPS) South Fork John Day River - summer\n504                 X.Steelhead (Middle Columbia River DPS) South Fork John Day River - summer\n505                 X.Steelhead (Middle Columbia River DPS) South Fork John Day River - summer\n506                 X.Steelhead (Middle Columbia River DPS) South Fork John Day River - summer\n507                 X.Steelhead (Middle Columbia River DPS) South Fork John Day River - summer\n508                 X.Steelhead (Middle Columbia River DPS) South Fork John Day River - summer\n509                 X.Steelhead (Middle Columbia River DPS) South Fork John Day River - summer\n510                 X.Steelhead (Middle Columbia River DPS) South Fork John Day River - summer\n511                 X.Steelhead (Middle Columbia River DPS) South Fork John Day River - summer\n512                 X.Steelhead (Middle Columbia River DPS) South Fork John Day River - summer\n513                             X.Steelhead (Middle Columbia River DPS) Touchet River - summer\n514                             X.Steelhead (Middle Columbia River DPS) Touchet River - summer\n515                             X.Steelhead (Middle Columbia River DPS) Touchet River - summer\n516                             X.Steelhead (Middle Columbia River DPS) Touchet River - summer\n517                             X.Steelhead (Middle Columbia River DPS) Touchet River - summer\n518                             X.Steelhead (Middle Columbia River DPS) Touchet River - summer\n519                             X.Steelhead (Middle Columbia River DPS) Touchet River - summer\n520                             X.Steelhead (Middle Columbia River DPS) Touchet River - summer\n521                             X.Steelhead (Middle Columbia River DPS) Touchet River - summer\n522                             X.Steelhead (Middle Columbia River DPS) Touchet River - summer\n523                             X.Steelhead (Middle Columbia River DPS) Touchet River - summer\n524                             X.Steelhead (Middle Columbia River DPS) Touchet River - summer\n525                             X.Steelhead (Middle Columbia River DPS) Touchet River - summer\n526                             X.Steelhead (Middle Columbia River DPS) Touchet River - summer\n527                             X.Steelhead (Middle Columbia River DPS) Touchet River - summer\n528                             X.Steelhead (Middle Columbia River DPS) Touchet River - summer\n529                             X.Steelhead (Middle Columbia River DPS) Touchet River - summer\n530                             X.Steelhead (Middle Columbia River DPS) Touchet River - summer\n531                             X.Steelhead (Middle Columbia River DPS) Touchet River - summer\n532                             X.Steelhead (Middle Columbia River DPS) Touchet River - summer\n533                             X.Steelhead (Middle Columbia River DPS) Touchet River - summer\n534                             X.Steelhead (Middle Columbia River DPS) Touchet River - summer\n535                             X.Steelhead (Middle Columbia River DPS) Touchet River - summer\n536                             X.Steelhead (Middle Columbia River DPS) Touchet River - summer\n537                             X.Steelhead (Middle Columbia River DPS) Touchet River - summer\n538                             X.Steelhead (Middle Columbia River DPS) Touchet River - summer\n539                             X.Steelhead (Middle Columbia River DPS) Touchet River - summer\n540                             X.Steelhead (Middle Columbia River DPS) Touchet River - summer\n541                             X.Steelhead (Middle Columbia River DPS) Touchet River - summer\n542                             X.Steelhead (Middle Columbia River DPS) Touchet River - summer\n543                             X.Steelhead (Middle Columbia River DPS) Touchet River - summer\n544                             X.Steelhead (Middle Columbia River DPS) Touchet River - summer\n545                             X.Steelhead (Middle Columbia River DPS) Touchet River - summer\n546                             X.Steelhead (Middle Columbia River DPS) Touchet River - summer\n547                             X.Steelhead (Middle Columbia River DPS) Touchet River - summer\n548                             X.Steelhead (Middle Columbia River DPS) Touchet River - summer\n549                             X.Steelhead (Middle Columbia River DPS) Touchet River - summer\n550                             X.Steelhead (Middle Columbia River DPS) Touchet River - summer\n551                             X.Steelhead (Middle Columbia River DPS) Touchet River - summer\n552                             X.Steelhead (Middle Columbia River DPS) Touchet River - summer\n553                             X.Steelhead (Middle Columbia River DPS) Touchet River - summer\n554                             X.Steelhead (Middle Columbia River DPS) Touchet River - summer\n555                             X.Steelhead (Middle Columbia River DPS) Touchet River - summer\n556                             X.Steelhead (Middle Columbia River DPS) Touchet River - summer\n557                             X.Steelhead (Middle Columbia River DPS) Touchet River - summer\n558                             X.Steelhead (Middle Columbia River DPS) Touchet River - summer\n559                             X.Steelhead (Middle Columbia River DPS) Touchet River - summer\n560                             X.Steelhead (Middle Columbia River DPS) Touchet River - summer\n561                             X.Steelhead (Middle Columbia River DPS) Touchet River - summer\n562                             X.Steelhead (Middle Columbia River DPS) Touchet River - summer\n563                             X.Steelhead (Middle Columbia River DPS) Touchet River - summer\n564                             X.Steelhead (Middle Columbia River DPS) Touchet River - summer\n565                             X.Steelhead (Middle Columbia River DPS) Touchet River - summer\n566                             X.Steelhead (Middle Columbia River DPS) Touchet River - summer\n567                             X.Steelhead (Middle Columbia River DPS) Touchet River - summer\n568                             X.Steelhead (Middle Columbia River DPS) Touchet River - summer\n569                             X.Steelhead (Middle Columbia River DPS) Touchet River - summer\n570                             X.Steelhead (Middle Columbia River DPS) Touchet River - summer\n571                             X.Steelhead (Middle Columbia River DPS) Touchet River - summer\n572                             X.Steelhead (Middle Columbia River DPS) Touchet River - summer\n573                             X.Steelhead (Middle Columbia River DPS) Touchet River - summer\n574                             X.Steelhead (Middle Columbia River DPS) Touchet River - summer\n575                             X.Steelhead (Middle Columbia River DPS) Touchet River - summer\n576                             X.Steelhead (Middle Columbia River DPS) Touchet River - summer\n577                            X.Steelhead (Middle Columbia River DPS) Umatilla River - summer\n578                            X.Steelhead (Middle Columbia River DPS) Umatilla River - summer\n579                            X.Steelhead (Middle Columbia River DPS) Umatilla River - summer\n580                            X.Steelhead (Middle Columbia River DPS) Umatilla River - summer\n581                            X.Steelhead (Middle Columbia River DPS) Umatilla River - summer\n582                            X.Steelhead (Middle Columbia River DPS) Umatilla River - summer\n583                            X.Steelhead (Middle Columbia River DPS) Umatilla River - summer\n584                            X.Steelhead (Middle Columbia River DPS) Umatilla River - summer\n585                            X.Steelhead (Middle Columbia River DPS) Umatilla River - summer\n586                            X.Steelhead (Middle Columbia River DPS) Umatilla River - summer\n587                            X.Steelhead (Middle Columbia River DPS) Umatilla River - summer\n588                            X.Steelhead (Middle Columbia River DPS) Umatilla River - summer\n589                            X.Steelhead (Middle Columbia River DPS) Umatilla River - summer\n590                            X.Steelhead (Middle Columbia River DPS) Umatilla River - summer\n591                            X.Steelhead (Middle Columbia River DPS) Umatilla River - summer\n592                            X.Steelhead (Middle Columbia River DPS) Umatilla River - summer\n593                            X.Steelhead (Middle Columbia River DPS) Umatilla River - summer\n594                            X.Steelhead (Middle Columbia River DPS) Umatilla River - summer\n595                            X.Steelhead (Middle Columbia River DPS) Umatilla River - summer\n596                            X.Steelhead (Middle Columbia River DPS) Umatilla River - summer\n597                            X.Steelhead (Middle Columbia River DPS) Umatilla River - summer\n598                            X.Steelhead (Middle Columbia River DPS) Umatilla River - summer\n599                            X.Steelhead (Middle Columbia River DPS) Umatilla River - summer\n600                            X.Steelhead (Middle Columbia River DPS) Umatilla River - summer\n601                            X.Steelhead (Middle Columbia River DPS) Umatilla River - summer\n602                            X.Steelhead (Middle Columbia River DPS) Umatilla River - summer\n603                            X.Steelhead (Middle Columbia River DPS) Umatilla River - summer\n604                            X.Steelhead (Middle Columbia River DPS) Umatilla River - summer\n605                            X.Steelhead (Middle Columbia River DPS) Umatilla River - summer\n606                            X.Steelhead (Middle Columbia River DPS) Umatilla River - summer\n607                            X.Steelhead (Middle Columbia River DPS) Umatilla River - summer\n608                            X.Steelhead (Middle Columbia River DPS) Umatilla River - summer\n609                            X.Steelhead (Middle Columbia River DPS) Umatilla River - summer\n610                            X.Steelhead (Middle Columbia River DPS) Umatilla River - summer\n611                            X.Steelhead (Middle Columbia River DPS) Umatilla River - summer\n612                            X.Steelhead (Middle Columbia River DPS) Umatilla River - summer\n613                            X.Steelhead (Middle Columbia River DPS) Umatilla River - summer\n614                            X.Steelhead (Middle Columbia River DPS) Umatilla River - summer\n615                            X.Steelhead (Middle Columbia River DPS) Umatilla River - summer\n616                            X.Steelhead (Middle Columbia River DPS) Umatilla River - summer\n617                            X.Steelhead (Middle Columbia River DPS) Umatilla River - summer\n618                            X.Steelhead (Middle Columbia River DPS) Umatilla River - summer\n619                            X.Steelhead (Middle Columbia River DPS) Umatilla River - summer\n620                            X.Steelhead (Middle Columbia River DPS) Umatilla River - summer\n621                            X.Steelhead (Middle Columbia River DPS) Umatilla River - summer\n622                            X.Steelhead (Middle Columbia River DPS) Umatilla River - summer\n623                            X.Steelhead (Middle Columbia River DPS) Umatilla River - summer\n624                            X.Steelhead (Middle Columbia River DPS) Umatilla River - summer\n625                            X.Steelhead (Middle Columbia River DPS) Umatilla River - summer\n626                            X.Steelhead (Middle Columbia River DPS) Umatilla River - summer\n627                            X.Steelhead (Middle Columbia River DPS) Umatilla River - summer\n628                            X.Steelhead (Middle Columbia River DPS) Umatilla River - summer\n629                            X.Steelhead (Middle Columbia River DPS) Umatilla River - summer\n630                            X.Steelhead (Middle Columbia River DPS) Umatilla River - summer\n631                            X.Steelhead (Middle Columbia River DPS) Umatilla River - summer\n632                            X.Steelhead (Middle Columbia River DPS) Umatilla River - summer\n633                            X.Steelhead (Middle Columbia River DPS) Umatilla River - summer\n634                            X.Steelhead (Middle Columbia River DPS) Umatilla River - summer\n635                            X.Steelhead (Middle Columbia River DPS) Umatilla River - summer\n636                            X.Steelhead (Middle Columbia River DPS) Umatilla River - summer\n637                            X.Steelhead (Middle Columbia River DPS) Umatilla River - summer\n638                            X.Steelhead (Middle Columbia River DPS) Umatilla River - summer\n639                            X.Steelhead (Middle Columbia River DPS) Umatilla River - summer\n640                            X.Steelhead (Middle Columbia River DPS) Umatilla River - summer\n641                         X.Steelhead (Middle Columbia River DPS) Walla Walla River - summer\n642                         X.Steelhead (Middle Columbia River DPS) Walla Walla River - summer\n643                         X.Steelhead (Middle Columbia River DPS) Walla Walla River - summer\n644                         X.Steelhead (Middle Columbia River DPS) Walla Walla River - summer\n645                         X.Steelhead (Middle Columbia River DPS) Walla Walla River - summer\n646                         X.Steelhead (Middle Columbia River DPS) Walla Walla River - summer\n647                         X.Steelhead (Middle Columbia River DPS) Walla Walla River - summer\n648                         X.Steelhead (Middle Columbia River DPS) Walla Walla River - summer\n649                         X.Steelhead (Middle Columbia River DPS) Walla Walla River - summer\n650                         X.Steelhead (Middle Columbia River DPS) Walla Walla River - summer\n651                         X.Steelhead (Middle Columbia River DPS) Walla Walla River - summer\n652                         X.Steelhead (Middle Columbia River DPS) Walla Walla River - summer\n653                         X.Steelhead (Middle Columbia River DPS) Walla Walla River - summer\n654                         X.Steelhead (Middle Columbia River DPS) Walla Walla River - summer\n655                         X.Steelhead (Middle Columbia River DPS) Walla Walla River - summer\n656                         X.Steelhead (Middle Columbia River DPS) Walla Walla River - summer\n657                         X.Steelhead (Middle Columbia River DPS) Walla Walla River - summer\n658                         X.Steelhead (Middle Columbia River DPS) Walla Walla River - summer\n659                         X.Steelhead (Middle Columbia River DPS) Walla Walla River - summer\n660                         X.Steelhead (Middle Columbia River DPS) Walla Walla River - summer\n661                         X.Steelhead (Middle Columbia River DPS) Walla Walla River - summer\n662                         X.Steelhead (Middle Columbia River DPS) Walla Walla River - summer\n663                         X.Steelhead (Middle Columbia River DPS) Walla Walla River - summer\n664                         X.Steelhead (Middle Columbia River DPS) Walla Walla River - summer\n665                         X.Steelhead (Middle Columbia River DPS) Walla Walla River - summer\n666                         X.Steelhead (Middle Columbia River DPS) Walla Walla River - summer\n667                         X.Steelhead (Middle Columbia River DPS) Walla Walla River - summer\n668                         X.Steelhead (Middle Columbia River DPS) Walla Walla River - summer\n669                         X.Steelhead (Middle Columbia River DPS) Walla Walla River - summer\n670                         X.Steelhead (Middle Columbia River DPS) Walla Walla River - summer\n671                         X.Steelhead (Middle Columbia River DPS) Walla Walla River - summer\n672                         X.Steelhead (Middle Columbia River DPS) Walla Walla River - summer\n673                         X.Steelhead (Middle Columbia River DPS) Walla Walla River - summer\n674                         X.Steelhead (Middle Columbia River DPS) Walla Walla River - summer\n675                         X.Steelhead (Middle Columbia River DPS) Walla Walla River - summer\n676                         X.Steelhead (Middle Columbia River DPS) Walla Walla River - summer\n677                         X.Steelhead (Middle Columbia River DPS) Walla Walla River - summer\n678                         X.Steelhead (Middle Columbia River DPS) Walla Walla River - summer\n679                         X.Steelhead (Middle Columbia River DPS) Walla Walla River - summer\n680                         X.Steelhead (Middle Columbia River DPS) Walla Walla River - summer\n681                         X.Steelhead (Middle Columbia River DPS) Walla Walla River - summer\n682                         X.Steelhead (Middle Columbia River DPS) Walla Walla River - summer\n683                         X.Steelhead (Middle Columbia River DPS) Walla Walla River - summer\n684                         X.Steelhead (Middle Columbia River DPS) Walla Walla River - summer\n685                         X.Steelhead (Middle Columbia River DPS) Walla Walla River - summer\n686                         X.Steelhead (Middle Columbia River DPS) Walla Walla River - summer\n687                         X.Steelhead (Middle Columbia River DPS) Walla Walla River - summer\n688                         X.Steelhead (Middle Columbia River DPS) Walla Walla River - summer\n689                         X.Steelhead (Middle Columbia River DPS) Walla Walla River - summer\n690                         X.Steelhead (Middle Columbia River DPS) Walla Walla River - summer\n691                         X.Steelhead (Middle Columbia River DPS) Walla Walla River - summer\n692                         X.Steelhead (Middle Columbia River DPS) Walla Walla River - summer\n693                         X.Steelhead (Middle Columbia River DPS) Walla Walla River - summer\n694                         X.Steelhead (Middle Columbia River DPS) Walla Walla River - summer\n695                         X.Steelhead (Middle Columbia River DPS) Walla Walla River - summer\n696                         X.Steelhead (Middle Columbia River DPS) Walla Walla River - summer\n697                         X.Steelhead (Middle Columbia River DPS) Walla Walla River - summer\n698                         X.Steelhead (Middle Columbia River DPS) Walla Walla River - summer\n699                         X.Steelhead (Middle Columbia River DPS) Walla Walla River - summer\n700                         X.Steelhead (Middle Columbia River DPS) Walla Walla River - summer\n701                         X.Steelhead (Middle Columbia River DPS) Walla Walla River - summer\n702                         X.Steelhead (Middle Columbia River DPS) Walla Walla River - summer\n703                         X.Steelhead (Middle Columbia River DPS) Walla Walla River - summer\n704                         X.Steelhead (Middle Columbia River DPS) Walla Walla River - summer\n705                              X.Steelhead (Middle Columbia River DPS) Naches River - summer\n706                              X.Steelhead (Middle Columbia River DPS) Naches River - summer\n707                              X.Steelhead (Middle Columbia River DPS) Naches River - summer\n708                              X.Steelhead (Middle Columbia River DPS) Naches River - summer\n709                              X.Steelhead (Middle Columbia River DPS) Naches River - summer\n710                              X.Steelhead (Middle Columbia River DPS) Naches River - summer\n711                              X.Steelhead (Middle Columbia River DPS) Naches River - summer\n712                              X.Steelhead (Middle Columbia River DPS) Naches River - summer\n713                              X.Steelhead (Middle Columbia River DPS) Naches River - summer\n714                              X.Steelhead (Middle Columbia River DPS) Naches River - summer\n715                              X.Steelhead (Middle Columbia River DPS) Naches River - summer\n716                              X.Steelhead (Middle Columbia River DPS) Naches River - summer\n717                              X.Steelhead (Middle Columbia River DPS) Naches River - summer\n718                              X.Steelhead (Middle Columbia River DPS) Naches River - summer\n719                              X.Steelhead (Middle Columbia River DPS) Naches River - summer\n720                              X.Steelhead (Middle Columbia River DPS) Naches River - summer\n721                              X.Steelhead (Middle Columbia River DPS) Naches River - summer\n722                              X.Steelhead (Middle Columbia River DPS) Naches River - summer\n723                              X.Steelhead (Middle Columbia River DPS) Naches River - summer\n724                              X.Steelhead (Middle Columbia River DPS) Naches River - summer\n725                              X.Steelhead (Middle Columbia River DPS) Naches River - summer\n726                              X.Steelhead (Middle Columbia River DPS) Naches River - summer\n727                              X.Steelhead (Middle Columbia River DPS) Naches River - summer\n728                              X.Steelhead (Middle Columbia River DPS) Naches River - summer\n729                              X.Steelhead (Middle Columbia River DPS) Naches River - summer\n730                              X.Steelhead (Middle Columbia River DPS) Naches River - summer\n731                              X.Steelhead (Middle Columbia River DPS) Naches River - summer\n732                              X.Steelhead (Middle Columbia River DPS) Naches River - summer\n733                              X.Steelhead (Middle Columbia River DPS) Naches River - summer\n734                              X.Steelhead (Middle Columbia River DPS) Naches River - summer\n735                              X.Steelhead (Middle Columbia River DPS) Naches River - summer\n736                              X.Steelhead (Middle Columbia River DPS) Naches River - summer\n737                              X.Steelhead (Middle Columbia River DPS) Naches River - summer\n738                              X.Steelhead (Middle Columbia River DPS) Naches River - summer\n739                              X.Steelhead (Middle Columbia River DPS) Naches River - summer\n740                              X.Steelhead (Middle Columbia River DPS) Naches River - summer\n741                              X.Steelhead (Middle Columbia River DPS) Naches River - summer\n742                              X.Steelhead (Middle Columbia River DPS) Naches River - summer\n743                              X.Steelhead (Middle Columbia River DPS) Naches River - summer\n744                              X.Steelhead (Middle Columbia River DPS) Naches River - summer\n745                              X.Steelhead (Middle Columbia River DPS) Naches River - summer\n746                              X.Steelhead (Middle Columbia River DPS) Naches River - summer\n747                              X.Steelhead (Middle Columbia River DPS) Naches River - summer\n748                              X.Steelhead (Middle Columbia River DPS) Naches River - summer\n749                              X.Steelhead (Middle Columbia River DPS) Naches River - summer\n750                              X.Steelhead (Middle Columbia River DPS) Naches River - summer\n751                              X.Steelhead (Middle Columbia River DPS) Naches River - summer\n752                              X.Steelhead (Middle Columbia River DPS) Naches River - summer\n753                              X.Steelhead (Middle Columbia River DPS) Naches River - summer\n754                              X.Steelhead (Middle Columbia River DPS) Naches River - summer\n755                              X.Steelhead (Middle Columbia River DPS) Naches River - summer\n756                              X.Steelhead (Middle Columbia River DPS) Naches River - summer\n757                              X.Steelhead (Middle Columbia River DPS) Naches River - summer\n758                              X.Steelhead (Middle Columbia River DPS) Naches River - summer\n759                              X.Steelhead (Middle Columbia River DPS) Naches River - summer\n760                              X.Steelhead (Middle Columbia River DPS) Naches River - summer\n761                              X.Steelhead (Middle Columbia River DPS) Naches River - summer\n762                              X.Steelhead (Middle Columbia River DPS) Naches River - summer\n763                              X.Steelhead (Middle Columbia River DPS) Naches River - summer\n764                              X.Steelhead (Middle Columbia River DPS) Naches River - summer\n765                              X.Steelhead (Middle Columbia River DPS) Naches River - summer\n766                              X.Steelhead (Middle Columbia River DPS) Naches River - summer\n767                              X.Steelhead (Middle Columbia River DPS) Naches River - summer\n768                              X.Steelhead (Middle Columbia River DPS) Naches River - summer\n769                               X.Steelhead (Middle Columbia River DPS) Satus Creek - summer\n770                               X.Steelhead (Middle Columbia River DPS) Satus Creek - summer\n771                               X.Steelhead (Middle Columbia River DPS) Satus Creek - summer\n772                               X.Steelhead (Middle Columbia River DPS) Satus Creek - summer\n773                               X.Steelhead (Middle Columbia River DPS) Satus Creek - summer\n774                               X.Steelhead (Middle Columbia River DPS) Satus Creek - summer\n775                               X.Steelhead (Middle Columbia River DPS) Satus Creek - summer\n776                               X.Steelhead (Middle Columbia River DPS) Satus Creek - summer\n777                               X.Steelhead (Middle Columbia River DPS) Satus Creek - summer\n778                               X.Steelhead (Middle Columbia River DPS) Satus Creek - summer\n779                               X.Steelhead (Middle Columbia River DPS) Satus Creek - summer\n780                               X.Steelhead (Middle Columbia River DPS) Satus Creek - summer\n781                               X.Steelhead (Middle Columbia River DPS) Satus Creek - summer\n782                               X.Steelhead (Middle Columbia River DPS) Satus Creek - summer\n783                               X.Steelhead (Middle Columbia River DPS) Satus Creek - summer\n784                               X.Steelhead (Middle Columbia River DPS) Satus Creek - summer\n785                               X.Steelhead (Middle Columbia River DPS) Satus Creek - summer\n786                               X.Steelhead (Middle Columbia River DPS) Satus Creek - summer\n787                               X.Steelhead (Middle Columbia River DPS) Satus Creek - summer\n788                               X.Steelhead (Middle Columbia River DPS) Satus Creek - summer\n789                               X.Steelhead (Middle Columbia River DPS) Satus Creek - summer\n790                               X.Steelhead (Middle Columbia River DPS) Satus Creek - summer\n791                               X.Steelhead (Middle Columbia River DPS) Satus Creek - summer\n792                               X.Steelhead (Middle Columbia River DPS) Satus Creek - summer\n793                               X.Steelhead (Middle Columbia River DPS) Satus Creek - summer\n794                               X.Steelhead (Middle Columbia River DPS) Satus Creek - summer\n795                               X.Steelhead (Middle Columbia River DPS) Satus Creek - summer\n796                               X.Steelhead (Middle Columbia River DPS) Satus Creek - summer\n797                               X.Steelhead (Middle Columbia River DPS) Satus Creek - summer\n798                               X.Steelhead (Middle Columbia River DPS) Satus Creek - summer\n799                               X.Steelhead (Middle Columbia River DPS) Satus Creek - summer\n800                               X.Steelhead (Middle Columbia River DPS) Satus Creek - summer\n801                               X.Steelhead (Middle Columbia River DPS) Satus Creek - summer\n802                               X.Steelhead (Middle Columbia River DPS) Satus Creek - summer\n803                               X.Steelhead (Middle Columbia River DPS) Satus Creek - summer\n804                               X.Steelhead (Middle Columbia River DPS) Satus Creek - summer\n805                               X.Steelhead (Middle Columbia River DPS) Satus Creek - summer\n806                               X.Steelhead (Middle Columbia River DPS) Satus Creek - summer\n807                               X.Steelhead (Middle Columbia River DPS) Satus Creek - summer\n808                               X.Steelhead (Middle Columbia River DPS) Satus Creek - summer\n809                               X.Steelhead (Middle Columbia River DPS) Satus Creek - summer\n810                               X.Steelhead (Middle Columbia River DPS) Satus Creek - summer\n811                               X.Steelhead (Middle Columbia River DPS) Satus Creek - summer\n812                               X.Steelhead (Middle Columbia River DPS) Satus Creek - summer\n813                               X.Steelhead (Middle Columbia River DPS) Satus Creek - summer\n814                               X.Steelhead (Middle Columbia River DPS) Satus Creek - summer\n815                               X.Steelhead (Middle Columbia River DPS) Satus Creek - summer\n816                               X.Steelhead (Middle Columbia River DPS) Satus Creek - summer\n817                               X.Steelhead (Middle Columbia River DPS) Satus Creek - summer\n818                               X.Steelhead (Middle Columbia River DPS) Satus Creek - summer\n819                               X.Steelhead (Middle Columbia River DPS) Satus Creek - summer\n820                               X.Steelhead (Middle Columbia River DPS) Satus Creek - summer\n821                               X.Steelhead (Middle Columbia River DPS) Satus Creek - summer\n822                               X.Steelhead (Middle Columbia River DPS) Satus Creek - summer\n823                               X.Steelhead (Middle Columbia River DPS) Satus Creek - summer\n824                               X.Steelhead (Middle Columbia River DPS) Satus Creek - summer\n825                               X.Steelhead (Middle Columbia River DPS) Satus Creek - summer\n826                               X.Steelhead (Middle Columbia River DPS) Satus Creek - summer\n827                               X.Steelhead (Middle Columbia River DPS) Satus Creek - summer\n828                               X.Steelhead (Middle Columbia River DPS) Satus Creek - summer\n829                               X.Steelhead (Middle Columbia River DPS) Satus Creek - summer\n830                               X.Steelhead (Middle Columbia River DPS) Satus Creek - summer\n831                               X.Steelhead (Middle Columbia River DPS) Satus Creek - summer\n832                               X.Steelhead (Middle Columbia River DPS) Satus Creek - summer\n833                           X.Steelhead (Middle Columbia River DPS) Toppenish Creek - summer\n834                           X.Steelhead (Middle Columbia River DPS) Toppenish Creek - summer\n835                           X.Steelhead (Middle Columbia River DPS) Toppenish Creek - summer\n836                           X.Steelhead (Middle Columbia River DPS) Toppenish Creek - summer\n837                           X.Steelhead (Middle Columbia River DPS) Toppenish Creek - summer\n838                           X.Steelhead (Middle Columbia River DPS) Toppenish Creek - summer\n839                           X.Steelhead (Middle Columbia River DPS) Toppenish Creek - summer\n840                           X.Steelhead (Middle Columbia River DPS) Toppenish Creek - summer\n841                           X.Steelhead (Middle Columbia River DPS) Toppenish Creek - summer\n842                           X.Steelhead (Middle Columbia River DPS) Toppenish Creek - summer\n843                           X.Steelhead (Middle Columbia River DPS) Toppenish Creek - summer\n844                           X.Steelhead (Middle Columbia River DPS) Toppenish Creek - summer\n845                           X.Steelhead (Middle Columbia River DPS) Toppenish Creek - summer\n846                           X.Steelhead (Middle Columbia River DPS) Toppenish Creek - summer\n847                           X.Steelhead (Middle Columbia River DPS) Toppenish Creek - summer\n848                           X.Steelhead (Middle Columbia River DPS) Toppenish Creek - summer\n849                           X.Steelhead (Middle Columbia River DPS) Toppenish Creek - summer\n850                           X.Steelhead (Middle Columbia River DPS) Toppenish Creek - summer\n851                           X.Steelhead (Middle Columbia River DPS) Toppenish Creek - summer\n852                           X.Steelhead (Middle Columbia River DPS) Toppenish Creek - summer\n853                           X.Steelhead (Middle Columbia River DPS) Toppenish Creek - summer\n854                           X.Steelhead (Middle Columbia River DPS) Toppenish Creek - summer\n855                           X.Steelhead (Middle Columbia River DPS) Toppenish Creek - summer\n856                           X.Steelhead (Middle Columbia River DPS) Toppenish Creek - summer\n857                           X.Steelhead (Middle Columbia River DPS) Toppenish Creek - summer\n858                           X.Steelhead (Middle Columbia River DPS) Toppenish Creek - summer\n859                           X.Steelhead (Middle Columbia River DPS) Toppenish Creek - summer\n860                           X.Steelhead (Middle Columbia River DPS) Toppenish Creek - summer\n861                           X.Steelhead (Middle Columbia River DPS) Toppenish Creek - summer\n862                           X.Steelhead (Middle Columbia River DPS) Toppenish Creek - summer\n863                           X.Steelhead (Middle Columbia River DPS) Toppenish Creek - summer\n864                           X.Steelhead (Middle Columbia River DPS) Toppenish Creek - summer\n865                           X.Steelhead (Middle Columbia River DPS) Toppenish Creek - summer\n866                           X.Steelhead (Middle Columbia River DPS) Toppenish Creek - summer\n867                           X.Steelhead (Middle Columbia River DPS) Toppenish Creek - summer\n868                           X.Steelhead (Middle Columbia River DPS) Toppenish Creek - summer\n869                           X.Steelhead (Middle Columbia River DPS) Toppenish Creek - summer\n870                           X.Steelhead (Middle Columbia River DPS) Toppenish Creek - summer\n871                           X.Steelhead (Middle Columbia River DPS) Toppenish Creek - summer\n872                           X.Steelhead (Middle Columbia River DPS) Toppenish Creek - summer\n873                           X.Steelhead (Middle Columbia River DPS) Toppenish Creek - summer\n874                           X.Steelhead (Middle Columbia River DPS) Toppenish Creek - summer\n875                           X.Steelhead (Middle Columbia River DPS) Toppenish Creek - summer\n876                           X.Steelhead (Middle Columbia River DPS) Toppenish Creek - summer\n877                           X.Steelhead (Middle Columbia River DPS) Toppenish Creek - summer\n878                           X.Steelhead (Middle Columbia River DPS) Toppenish Creek - summer\n879                           X.Steelhead (Middle Columbia River DPS) Toppenish Creek - summer\n880                           X.Steelhead (Middle Columbia River DPS) Toppenish Creek - summer\n881                           X.Steelhead (Middle Columbia River DPS) Toppenish Creek - summer\n882                           X.Steelhead (Middle Columbia River DPS) Toppenish Creek - summer\n883                           X.Steelhead (Middle Columbia River DPS) Toppenish Creek - summer\n884                           X.Steelhead (Middle Columbia River DPS) Toppenish Creek - summer\n885                           X.Steelhead (Middle Columbia River DPS) Toppenish Creek - summer\n886                           X.Steelhead (Middle Columbia River DPS) Toppenish Creek - summer\n887                           X.Steelhead (Middle Columbia River DPS) Toppenish Creek - summer\n888                           X.Steelhead (Middle Columbia River DPS) Toppenish Creek - summer\n889                           X.Steelhead (Middle Columbia River DPS) Toppenish Creek - summer\n890                           X.Steelhead (Middle Columbia River DPS) Toppenish Creek - summer\n891                           X.Steelhead (Middle Columbia River DPS) Toppenish Creek - summer\n892                           X.Steelhead (Middle Columbia River DPS) Toppenish Creek - summer\n893                           X.Steelhead (Middle Columbia River DPS) Toppenish Creek - summer\n894                           X.Steelhead (Middle Columbia River DPS) Toppenish Creek - summer\n895                           X.Steelhead (Middle Columbia River DPS) Toppenish Creek - summer\n896                           X.Steelhead (Middle Columbia River DPS) Toppenish Creek - summer\n897               X.Steelhead (Middle Columbia River DPS) Yakima River Upper Mainstem - summer\n898               X.Steelhead (Middle Columbia River DPS) Yakima River Upper Mainstem - summer\n899               X.Steelhead (Middle Columbia River DPS) Yakima River Upper Mainstem - summer\n900               X.Steelhead (Middle Columbia River DPS) Yakima River Upper Mainstem - summer\n901               X.Steelhead (Middle Columbia River DPS) Yakima River Upper Mainstem - summer\n902               X.Steelhead (Middle Columbia River DPS) Yakima River Upper Mainstem - summer\n903               X.Steelhead (Middle Columbia River DPS) Yakima River Upper Mainstem - summer\n904               X.Steelhead (Middle Columbia River DPS) Yakima River Upper Mainstem - summer\n905               X.Steelhead (Middle Columbia River DPS) Yakima River Upper Mainstem - summer\n906               X.Steelhead (Middle Columbia River DPS) Yakima River Upper Mainstem - summer\n907               X.Steelhead (Middle Columbia River DPS) Yakima River Upper Mainstem - summer\n908               X.Steelhead (Middle Columbia River DPS) Yakima River Upper Mainstem - summer\n909               X.Steelhead (Middle Columbia River DPS) Yakima River Upper Mainstem - summer\n910               X.Steelhead (Middle Columbia River DPS) Yakima River Upper Mainstem - summer\n911               X.Steelhead (Middle Columbia River DPS) Yakima River Upper Mainstem - summer\n912               X.Steelhead (Middle Columbia River DPS) Yakima River Upper Mainstem - summer\n913               X.Steelhead (Middle Columbia River DPS) Yakima River Upper Mainstem - summer\n914               X.Steelhead (Middle Columbia River DPS) Yakima River Upper Mainstem - summer\n915               X.Steelhead (Middle Columbia River DPS) Yakima River Upper Mainstem - summer\n916               X.Steelhead (Middle Columbia River DPS) Yakima River Upper Mainstem - summer\n917               X.Steelhead (Middle Columbia River DPS) Yakima River Upper Mainstem - summer\n918               X.Steelhead (Middle Columbia River DPS) Yakima River Upper Mainstem - summer\n919               X.Steelhead (Middle Columbia River DPS) Yakima River Upper Mainstem - summer\n920               X.Steelhead (Middle Columbia River DPS) Yakima River Upper Mainstem - summer\n921               X.Steelhead (Middle Columbia River DPS) Yakima River Upper Mainstem - summer\n922               X.Steelhead (Middle Columbia River DPS) Yakima River Upper Mainstem - summer\n923               X.Steelhead (Middle Columbia River DPS) Yakima River Upper Mainstem - summer\n924               X.Steelhead (Middle Columbia River DPS) Yakima River Upper Mainstem - summer\n925               X.Steelhead (Middle Columbia River DPS) Yakima River Upper Mainstem - summer\n926               X.Steelhead (Middle Columbia River DPS) Yakima River Upper Mainstem - summer\n927               X.Steelhead (Middle Columbia River DPS) Yakima River Upper Mainstem - summer\n928               X.Steelhead (Middle Columbia River DPS) Yakima River Upper Mainstem - summer\n929               X.Steelhead (Middle Columbia River DPS) Yakima River Upper Mainstem - summer\n930               X.Steelhead (Middle Columbia River DPS) Yakima River Upper Mainstem - summer\n931               X.Steelhead (Middle Columbia River DPS) Yakima River Upper Mainstem - summer\n932               X.Steelhead (Middle Columbia River DPS) Yakima River Upper Mainstem - summer\n933               X.Steelhead (Middle Columbia River DPS) Yakima River Upper Mainstem - summer\n934               X.Steelhead (Middle Columbia River DPS) Yakima River Upper Mainstem - summer\n935               X.Steelhead (Middle Columbia River DPS) Yakima River Upper Mainstem - summer\n936               X.Steelhead (Middle Columbia River DPS) Yakima River Upper Mainstem - summer\n937               X.Steelhead (Middle Columbia River DPS) Yakima River Upper Mainstem - summer\n938               X.Steelhead (Middle Columbia River DPS) Yakima River Upper Mainstem - summer\n939               X.Steelhead (Middle Columbia River DPS) Yakima River Upper Mainstem - summer\n940               X.Steelhead (Middle Columbia River DPS) Yakima River Upper Mainstem - summer\n941               X.Steelhead (Middle Columbia River DPS) Yakima River Upper Mainstem - summer\n942               X.Steelhead (Middle Columbia River DPS) Yakima River Upper Mainstem - summer\n943               X.Steelhead (Middle Columbia River DPS) Yakima River Upper Mainstem - summer\n944               X.Steelhead (Middle Columbia River DPS) Yakima River Upper Mainstem - summer\n945               X.Steelhead (Middle Columbia River DPS) Yakima River Upper Mainstem - summer\n946               X.Steelhead (Middle Columbia River DPS) Yakima River Upper Mainstem - summer\n947               X.Steelhead (Middle Columbia River DPS) Yakima River Upper Mainstem - summer\n948               X.Steelhead (Middle Columbia River DPS) Yakima River Upper Mainstem - summer\n949               X.Steelhead (Middle Columbia River DPS) Yakima River Upper Mainstem - summer\n950               X.Steelhead (Middle Columbia River DPS) Yakima River Upper Mainstem - summer\n951               X.Steelhead (Middle Columbia River DPS) Yakima River Upper Mainstem - summer\n952               X.Steelhead (Middle Columbia River DPS) Yakima River Upper Mainstem - summer\n953               X.Steelhead (Middle Columbia River DPS) Yakima River Upper Mainstem - summer\n954               X.Steelhead (Middle Columbia River DPS) Yakima River Upper Mainstem - summer\n955               X.Steelhead (Middle Columbia River DPS) Yakima River Upper Mainstem - summer\n956               X.Steelhead (Middle Columbia River DPS) Yakima River Upper Mainstem - summer\n957               X.Steelhead (Middle Columbia River DPS) Yakima River Upper Mainstem - summer\n958               X.Steelhead (Middle Columbia River DPS) Yakima River Upper Mainstem - summer\n959               X.Steelhead (Middle Columbia River DPS) Yakima River Upper Mainstem - summer\n960               X.Steelhead (Middle Columbia River DPS) Yakima River Upper Mainstem - summer\n     t .estimate       .se\n1    1  8.691656 0.3159698\n2    2  8.635672 0.4397937\n3    3  8.579687 0.5298536\n4    4  8.523703 0.6015113\n5    5  8.467719 0.6607810\n6    6  8.411734 0.7107686\n7    7  8.355750 0.7533240\n8    8  8.299766 0.7896498\n9    9  8.243781 0.8205738\n10  10  8.187797 0.8466880\n11  11  8.131813 0.8684264\n12  12  8.075828 0.8861112\n13  13  8.019844 0.8999813\n14  14  7.963860 0.9102111\n15  15  7.907875 0.9169226\n16  16  7.851891 0.9201926\n17  17  7.795907 0.9200579\n18  18  7.739922 0.9165169\n19  19  7.683938 0.9095300\n20  20  7.627954 0.8990167\n21  21  7.571969 0.8848513\n22  22  7.515985 0.8668549\n23  23  7.460001 0.8447826\n24  24  7.404016 0.8183047\n25  25  7.348032 0.7869767\n26  26  7.292048 0.7501911\n27  27  7.236063 0.7070967\n28  28  7.180079 0.6564522\n29  29  7.124095 0.5963372\n30  30  7.068110 0.5234990\n31  31  7.012126 0.4315426\n32  32  6.956142 0.3035649\n33  33  6.915766 0.2655813\n34  34  6.732872 0.2560580\n35  35  6.572340 0.2538192\n36  36  6.527248 0.2533019\n37  37  6.728658 0.2531829\n38  38  6.999058 0.2531555\n39  39  7.348308 0.2531493\n40  40  7.605265 0.2531478\n41  41  7.868378 0.2531475\n42  42  8.176820 0.2531474\n43  43  8.520770 0.2531474\n44  44  8.474517 0.2531474\n45  45  8.305105 0.2531474\n46  46  8.028577 0.2531474\n47  47  7.812987 0.2531474\n48  48  7.739228 0.2531474\n49  49  7.634498 0.2531474\n50  50  7.240628 0.2531474\n51  51  7.192400 0.2531475\n52  52  7.199210 0.2531479\n53  53  7.104001 0.2531494\n54  54  6.919095 0.2531563\n55  55  6.722789 0.2531863\n56  56  6.733826 0.2533165\n57  57  6.492532 0.2538825\n58  58  6.097799 0.2563313\n59  59  5.664832 0.2667259\n60  60  5.390382 0.3079011\n61  61  5.334443 0.4447108\n62  62  5.278505 0.5483906\n63  63  5.222566 0.6353714\n64  64  5.166628 0.7118015\n65   1  6.579336 0.3131180\n66   2  6.563771 0.4315582\n67   3  6.548207 0.5143917\n68   4  6.532643 0.5771584\n69   5  6.517078 0.6259245\n70   6  6.501514 0.6637830\n71   7  6.485950 0.6925251\n72   8  6.470386 0.7132537\n73   9  6.454821 0.7266549\n74  10  6.439257 0.7331306\n75  11  6.423693 0.7328645\n76  12  6.408129 0.7258491\n77  13  6.392564 0.7118850\n78  14  6.377000 0.6905507\n79  15  6.361436 0.6611330\n80  16  6.345872 0.6224872\n81  17  6.330307 0.5727481\n82  18  6.314743 0.5086719\n83  19  6.299179 0.4238049\n84  20  6.283615 0.3010494\n85  21  6.204919 0.2649225\n86  22  6.261238 0.2559012\n87  23  6.365831 0.2537828\n88  24  6.474940 0.2532935\n89  25  6.405207 0.2531810\n90  26  6.551341 0.2531551\n91  27  6.658610 0.2531492\n92  28  6.667251 0.2531478\n93  29  6.732766 0.2531475\n94  30  6.597180 0.2531474\n95  31  6.346813 0.2531474\n96  32  6.156689 0.2531474\n97  33  5.949872 0.2531474\n98  34  5.884095 0.2531474\n99  35  5.603839 0.2531474\n100 36  5.605120 0.2531474\n101 37  5.581602 0.2531474\n102 38  5.594359 0.2531474\n103 39  5.922303 0.2531474\n104 40  6.187605 0.2531474\n105 41  6.294526 0.2531474\n106 42  6.504959 0.2531474\n107 43  6.721727 0.2531474\n108 44  6.880454 0.2531474\n109 45  6.903478 0.2531474\n110 46  6.676269 0.2531474\n111 47  6.547154 0.2531474\n112 48  6.460341 0.2531474\n113 49  6.501280 0.2531474\n114 50  6.455777 0.2531474\n115 51  6.446384 0.2531475\n116 52  6.659948 0.2531479\n117 53  6.727761 0.2531494\n118 54  6.562663 0.2531563\n119 55  6.497915 0.2531863\n120 56  6.456434 0.2533165\n121 57  6.445779 0.2538825\n122 58  6.221046 0.2563313\n123 59  5.934862 0.2667259\n124 60  5.666902 0.3079011\n125 61  5.651444 0.4447108\n126 62  5.635986 0.5483906\n127 63  5.620527 0.6353714\n128 64  5.605069 0.7118015\n129  1  7.188531 0.3150822\n130  2  7.161682 0.4372392\n131  3  7.134832 0.5250752\n132  4  7.107983 0.5940154\n133  5  7.081134 0.6500994\n134  6  7.054284 0.6964399\n135  7  7.027435 0.7348826\n136  8  7.000586 0.7666165\n137  9  6.973736 0.7924479\n138 10  6.946887 0.8129398\n139 11  6.920038 0.8284884\n140 12  6.893188 0.8393685\n141 13  6.866339 0.8457602\n142 14  6.839490 0.8477652\n143 15  6.812640 0.8454145\n144 16  6.785791 0.8386717\n145 17  6.758942 0.8274292\n146 18  6.732092 0.8115002\n147 19  6.705243 0.7906014\n148 20  6.678394 0.7643253\n149 21  6.651544 0.7320930\n150 22  6.624695 0.6930740\n151 23  6.597846 0.6460400\n152 24  6.570996 0.5890740\n153 25  6.544147 0.5189154\n154 26  6.517298 0.4291419\n155 27  6.490448 0.3027818\n156 28  6.634471 0.2653758\n157 29  6.560891 0.2560091\n158 30  6.210184 0.2538078\n159 31  6.068435 0.2532993\n160 32  6.082425 0.2531823\n161 33  5.969837 0.2531554\n162 34  6.030775 0.2531492\n163 35  5.880911 0.2531478\n164 36  5.925324 0.2531475\n165 37  5.864481 0.2531474\n166 38  5.988624 0.2531474\n167 39  6.019972 0.2531474\n168 40  6.045262 0.2531474\n169 41  6.418824 0.2531474\n170 42  6.604498 0.2531474\n171 43  6.655490 0.2531474\n172 44  6.795376 0.2531474\n173 45  6.666707 0.2531474\n174 46  6.503024 0.2531474\n175 47  6.117310 0.2531474\n176 48  5.875039 0.2531474\n177 49  5.615623 0.2531474\n178 50  5.547053 0.2531474\n179 51  5.867085 0.2531475\n180 52  6.123900 0.2531479\n181 53  6.110039 0.2531494\n182 54  6.119708 0.2531563\n183 55  5.987904 0.2531863\n184 56  5.996395 0.2533165\n185 57  5.853908 0.2538825\n186 58  5.590120 0.2563313\n187 59  5.317465 0.2667259\n188 60  5.602762 0.3079011\n189 61  5.575875 0.4447108\n190 62  5.548987 0.5483906\n191 63  5.522099 0.6353714\n192 64  5.495211 0.7118015\n193  1  8.259119 0.2221660\n194  2  8.058096 0.2463731\n195  3  8.116728 0.2516069\n196  4  8.016463 0.2527943\n197  5  7.966398 0.2530668\n198  6  8.036891 0.2531311\n199  7  8.192235 0.2531532\n200  8  8.419730 0.2531905\n201  9  8.403391 0.2533388\n202 10  8.264098 0.2539803\n203 11  8.139259 0.2567525\n204 12  8.093156 0.2684832\n205 13  7.848559 0.3144774\n206 14  7.603962 0.2685305\n207 15  7.571734 0.2569511\n208 16  7.636954 0.2548210\n209 17  7.880725 0.2569511\n210 18  7.765620 0.2685305\n211 19  7.554003 0.3144774\n212 20  7.342386 0.2684832\n213 21  6.723080 0.2567525\n214 22  7.242345 0.2539803\n215 23  7.472749 0.2533390\n216 24  7.522900 0.2531914\n217 25  7.616205 0.2531575\n218 26  7.773046 0.2531497\n219 27  8.051488 0.2531479\n220 28  8.453809 0.2531475\n221 29  8.593435 0.2531474\n222 30  8.353578 0.2531474\n223 31  7.962602 0.2531474\n224 32  7.681123 0.2531474\n225 33  7.408600 0.2531474\n226 34  7.286807 0.2531474\n227 35  7.011374 0.2531474\n228 36  6.802505 0.2531474\n229 37  6.829606 0.2531474\n230 38  6.934470 0.2531474\n231 39  6.992887 0.2531474\n232 40  7.122526 0.2531474\n233 41  7.615459 0.2531474\n234 42  8.135890 0.2531474\n235 43  8.332176 0.2531474\n236 44  8.311774 0.2531474\n237 45  7.870268 0.2531474\n238 46  7.428389 0.2531474\n239 47  7.125203 0.2531474\n240 48  7.078981 0.2531474\n241 49  7.293004 0.2531474\n242 50  7.372139 0.2531474\n243 51  7.681981 0.2531474\n244 52  7.601553 0.2531475\n245 53  7.743323 0.2531479\n246 54  7.813801 0.2531494\n247 55  7.600138 0.2531563\n248 56  7.654528 0.2531863\n249 57  7.410658 0.2533165\n250 58  7.155115 0.2538825\n251 59  7.021085 0.2563313\n252 60  6.928960 0.2667259\n253 61  7.085496 0.3079011\n254 62  7.065920 0.4447108\n255 63  7.046344 0.5483906\n256 64  7.026768 0.6353714\n257  1  7.051343 0.2221660\n258  2  7.112453 0.2463731\n259  3  7.211758 0.2516069\n260  4  7.267042 0.2527943\n261  5  7.512075 0.2530668\n262  6  7.604493 0.2531311\n263  7  7.641460 0.2531532\n264  8  7.941480 0.2531904\n265  9  7.897163 0.2533387\n266 10  7.614877 0.2539800\n267 11  7.534156 0.2567512\n268 12  7.499663 0.2684779\n269 13  7.410189 0.3144580\n270 14  7.320716 0.2684779\n271 15  7.149286 0.2567512\n272 16  7.062082 0.2539800\n273 17  7.090551 0.2533390\n274 18  7.101203 0.2531914\n275 19  7.118619 0.2531575\n276 20  6.820593 0.2531497\n277 21  6.430810 0.2531479\n278 22  6.640506 0.2531475\n279 23  6.681823 0.2531474\n280 24  6.796261 0.2531474\n281 25  6.973124 0.2531474\n282 26  7.207683 0.2531474\n283 27  7.532809 0.2531474\n284 28  7.780381 0.2531474\n285 29  7.850574 0.2531474\n286 30  7.742287 0.2531474\n287 31  7.289721 0.2531474\n288 32  7.152401 0.2531474\n289 33  6.996002 0.2531474\n290 34  6.979407 0.2531474\n291 35  6.617352 0.2531474\n292 36  6.444774 0.2531474\n293 37  6.028790 0.2531474\n294 38  6.034403 0.2531474\n295 39  6.082977 0.2531474\n296 40  6.244447 0.2531474\n297 41  6.204171 0.2531474\n298 42  6.387833 0.2531474\n299 43  6.545988 0.2531474\n300 44  6.770800 0.2531474\n301 45  6.594988 0.2531474\n302 46  6.324980 0.2531474\n303 47  6.139288 0.2531474\n304 48  5.983290 0.2531474\n305 49  6.319974 0.2531474\n306 50  6.574005 0.2531474\n307 51  6.650738 0.2531475\n308 52  6.735095 0.2531479\n309 53  6.875515 0.2531494\n310 54  6.952096 0.2531563\n311 55  7.022939 0.2531863\n312 56  6.925135 0.2533165\n313 57  6.704235 0.2538825\n314 58  6.263279 0.2563313\n315 59  5.949780 0.2667259\n316 60  5.966395 0.3079011\n317 61  5.948018 0.4447108\n318 62  5.929641 0.5483906\n319 63  5.911264 0.6353714\n320 64  5.892888 0.7118015\n321  1  7.820679 0.3023624\n322  2  7.808493 0.3997036\n323  3  7.796307 0.4527911\n324  4  7.784121 0.4766482\n325  5  7.771935 0.4756933\n326  6  7.759749 0.4497684\n327  7  7.747563 0.3939747\n328  8  7.735377 0.2916461\n329  9  7.517953 0.2626906\n330 10  7.225499 0.2561758\n331 11  7.129936 0.2572742\n332 12  7.382255 0.2686155\n333 13  7.274922 0.3145088\n334 14  7.167588 0.2684916\n335 15  7.074256 0.2567545\n336 16  7.204796 0.2539808\n337 17  7.409228 0.2533391\n338 18  7.574038 0.2531915\n339 19  7.609828 0.2531575\n340 20  7.341054 0.2531497\n341 21  6.818029 0.2531479\n342 22  6.859296 0.2531475\n343 23  6.988835 0.2531474\n344 24  7.008091 0.2531475\n345 25  7.000157 0.2531479\n346 26  7.114192 0.2531497\n347 27  7.515984 0.2531575\n348 28  7.773062 0.2531914\n349 29  7.804943 0.2533390\n350 30  7.742294 0.2539800\n351 31  7.447863 0.2567512\n352 32  7.255404 0.2684779\n353 33  7.282018 0.3144580\n354 34  7.308633 0.2684779\n355 35  6.969515 0.2567512\n356 36  6.780301 0.2539800\n357 37  6.514511 0.2533390\n358 38  6.441385 0.2531914\n359 39  6.389640 0.2531575\n360 40  6.484015 0.2531497\n361 41  6.757357 0.2531479\n362 42  6.965800 0.2531475\n363 43  7.118771 0.2531474\n364 44  7.305190 0.2531474\n365 45  7.011525 0.2531474\n366 46  6.655813 0.2531474\n367 47  6.256903 0.2531474\n368 48  6.245187 0.2531474\n369 49  6.670519 0.2531474\n370 50  7.109496 0.2531474\n371 51  7.639284 0.2531474\n372 52  7.943691 0.2531477\n373 53  8.274332 0.2531486\n374 54  8.412520 0.2531525\n375 55  8.466956 0.2531697\n376 56  8.457270 0.2532447\n377 57  8.256454 0.2535705\n378 58  7.908768 0.2549837\n379 59  7.654664 0.2610443\n380 60  7.587259 0.2859265\n381 61  7.453893 0.3754742\n382 62  7.320527 0.4116098\n383 63  7.187161 0.4087532\n384 64  7.053795 0.3659925\n385  1  8.554094 0.2974317\n386  2  8.517681 0.3846211\n387  3  8.481268 0.4223781\n388  4  8.444854 0.4241170\n389  5  8.408441 0.3903195\n390  6  8.372028 0.3095571\n391  7  8.524204 0.3303831\n392  8  8.676379 0.2728382\n393  9  8.513488 0.2578089\n394 10  8.252235 0.2542415\n395 11  8.235370 0.2534656\n396 12  8.025026 0.2535086\n397 13  7.958284 0.2544808\n398 14  7.834793 0.2588462\n399 15  7.613719 0.2770817\n400 16  7.617137 0.3454105\n401 17  7.620554 0.3454103\n402 18  7.623972 0.2770808\n403 19  7.544213 0.2588430\n404 20  7.449623 0.2544675\n405 21  7.308100 0.2534513\n406 22  7.550371 0.2532173\n407 23  7.608582 0.2531634\n408 24  7.570402 0.2531511\n409 25  7.394938 0.2531482\n410 26  7.414452 0.2531476\n411 27  7.918941 0.2531474\n412 28  8.056052 0.2531474\n413 29  7.944409 0.2531474\n414 30  7.537411 0.2531474\n415 31  6.945504 0.2531474\n416 32  6.587227 0.2531474\n417 33  6.611439 0.2531474\n418 34  6.965403 0.2531474\n419 35  6.909995 0.2531474\n420 36  6.936553 0.2531474\n421 37  6.936925 0.2531474\n422 38  7.169377 0.2531474\n423 39  7.124339 0.2531474\n424 40  7.194465 0.2531474\n425 41  7.414961 0.2531474\n426 42  7.635677 0.2531474\n427 43  7.784866 0.2531474\n428 44  7.923787 0.2531474\n429 45  7.781860 0.2531474\n430 46  7.471915 0.2531474\n431 47  7.382138 0.2531474\n432 48  7.202447 0.2531474\n433 49  7.323397 0.2531474\n434 50  7.498480 0.2531474\n435 51  7.846335 0.2531474\n436 52  7.930939 0.2531477\n437 53  7.968761 0.2531486\n438 54  7.991954 0.2531525\n439 55  7.755186 0.2531697\n440 56  7.571642 0.2532447\n441 57  7.312289 0.2535705\n442 58  6.965243 0.2549837\n443 59  6.730100 0.2610443\n444 60  6.582617 0.2859265\n445 61  6.502755 0.3754742\n446 62  6.422893 0.4116098\n447 63  6.343030 0.4087532\n448 64  6.263168 0.3659925\n449  1  6.727178 0.2769531\n450  2  6.721882 0.3176208\n451  3  6.716585 0.2693321\n452  4  6.935104 0.2569567\n453  5  6.661468 0.2540278\n454  6  7.005944 0.2533500\n455  7  7.282940 0.2531940\n456  8  7.241217 0.2531581\n457  9  6.820372 0.2531498\n458 10  6.237210 0.2531480\n459 11  6.732076 0.2531475\n460 12  6.922985 0.2531474\n461 13  6.994523 0.2531474\n462 14  6.987140 0.2531474\n463 15  6.873687 0.2531474\n464 16  6.853875 0.2531474\n465 17  6.910320 0.2531474\n466 18  6.745009 0.2531474\n467 19  6.633994 0.2531474\n468 20  6.355321 0.2531474\n469 21  6.064544 0.2531474\n470 22  6.168777 0.2531474\n471 23  6.305414 0.2531474\n472 24  6.532008 0.2531474\n473 25  6.655596 0.2531474\n474 26  6.748125 0.2531474\n475 27  6.962675 0.2531474\n476 28  7.008804 0.2531474\n477 29  7.074344 0.2531474\n478 30  6.857325 0.2531474\n479 31  6.231847 0.2531474\n480 32  6.033504 0.2531474\n481 33  5.964294 0.2531474\n482 34  5.986787 0.2531474\n483 35  5.903539 0.2531474\n484 36  5.811610 0.2531474\n485 37  5.452489 0.2531474\n486 38  5.240123 0.2531474\n487 39  5.176691 0.2531474\n488 40  5.097812 0.2531474\n489 41  5.218472 0.2531474\n490 42  5.658337 0.2531474\n491 43  6.095589 0.2531474\n492 44  6.385528 0.2531474\n493 45  6.329371 0.2531474\n494 46  6.076599 0.2531474\n495 47  5.942646 0.2531474\n496 48  6.089107 0.2531474\n497 49  6.453451 0.2531474\n498 50  6.783994 0.2531474\n499 51  6.930262 0.2531474\n500 52  6.747236 0.2531477\n501 53  6.949356 0.2531486\n502 54  7.213607 0.2531525\n503 55  7.231541 0.2531697\n504 56  7.122951 0.2532447\n505 57  6.903390 0.2535705\n506 58  6.661361 0.2549837\n507 59  6.372570 0.2610443\n508 60  6.560537 0.2859265\n509 61  6.519220 0.3754742\n510 62  6.477903 0.4116098\n511 63  6.436585 0.4087532\n512 64  6.395268 0.3659925\n513  1  7.316904 0.3154732\n514  2  7.283815 0.4383653\n515  3  7.250726 0.5271835\n516  4  7.217637 0.5973260\n517  5  7.184549 0.6548219\n518  6  7.151460 0.7027820\n519  7  7.118371 0.7430552\n520  8  7.085282 0.7768377\n521  9  7.052193 0.8049474\n522 10  7.019104 0.8279621\n523 11  6.986016 0.8462976\n524 12  6.952927 0.8602532\n525 13  6.919838 0.8700397\n526 14  6.886749 0.8757968\n527 15  6.853660 0.8776038\n528 16  6.820571 0.8754853\n529 17  6.787483 0.8694124\n530 18  6.754394 0.8593014\n531 19  6.721305 0.8450074\n532 20  6.688216 0.8263132\n533 21  6.655127 0.8029116\n534 22  6.622039 0.7743759\n535 23  6.588950 0.7401126\n536 24  6.555861 0.6992801\n537 25  6.522772 0.6506430\n538 26  6.489683 0.5922815\n539 27  6.456594 0.5209376\n540 28  6.423506 0.4302001\n541 29  6.390417 0.3031267\n542 30  6.395695 0.2654662\n543 31  6.106920 0.2560306\n544 32  6.063326 0.2538128\n545 33  6.027416 0.2533005\n546 34  6.150521 0.2531826\n547 35  6.058550 0.2531555\n548 36  6.106478 0.2531492\n549 37  6.058186 0.2531478\n550 38  5.968593 0.2531475\n551 39  5.886212 0.2531474\n552 40  5.994466 0.2531474\n553 41  5.973734 0.2531474\n554 42  5.912702 0.2531474\n555 43  5.933311 0.2531474\n556 44  6.068826 0.2531474\n557 45  6.099730 0.2531474\n558 46  6.046770 0.2531474\n559 47  6.133860 0.2531474\n560 48  6.078832 0.2531474\n561 49  6.129651 0.2531474\n562 50  6.116814 0.2531474\n563 51  6.192081 0.2531474\n564 52  6.358609 0.2531474\n565 53  6.256264 0.2531475\n566 54  6.133955 0.2531479\n567 55  6.128711 0.2531494\n568 56  5.885445 0.2531563\n569 57  5.871078 0.2531863\n570 58  5.630579 0.2533165\n571 59  5.256696 0.2538825\n572 60  5.172193 0.2563313\n573 61  5.167845 0.2667259\n574 62  5.295457 0.3079011\n575 63  5.262327 0.4447108\n576 64  5.229196 0.5483906\n577  1  7.170459 0.3042792\n578  2  7.178229 0.4054802\n579  3  7.185998 0.4642038\n580  4  7.193768 0.4957809\n581  5  7.201538 0.5053264\n582  6  7.209307 0.4941188\n583  7  7.217077 0.4606458\n584  8  7.224847 0.3993473\n585  9  7.232616 0.2932652\n586 10  7.169017 0.2629084\n587 11  7.364676 0.2554234\n588 12  7.520989 0.2536722\n589 13  7.623974 0.2532681\n590 14  7.630586 0.2531751\n591 15  7.602922 0.2531538\n592 16  7.630973 0.2531489\n593 17  7.589429 0.2531477\n594 18  7.565364 0.2531475\n595 19  7.457879 0.2531474\n596 20  7.601944 0.2531474\n597 21  7.572729 0.2531474\n598 22  7.431124 0.2531474\n599 23  7.168628 0.2531474\n600 24  6.992598 0.2531474\n601 25  7.144973 0.2531474\n602 26  7.446380 0.2531474\n603 27  7.661260 0.2531474\n604 28  7.734119 0.2531474\n605 29  7.759305 0.2531474\n606 30  7.662010 0.2531474\n607 31  7.545376 0.2531474\n608 32  7.349133 0.2531474\n609 33  7.217076 0.2531474\n610 34  7.366652 0.2531474\n611 35  7.314412 0.2531474\n612 36  7.232748 0.2531474\n613 37  7.294486 0.2531474\n614 38  7.427418 0.2531474\n615 39  7.520887 0.2531474\n616 40  7.512654 0.2531474\n617 41  7.604886 0.2531474\n618 42  7.822727 0.2531474\n619 43  8.010944 0.2531474\n620 44  8.135314 0.2531474\n621 45  8.023533 0.2531474\n622 46  7.956245 0.2531474\n623 47  7.836990 0.2531474\n624 48  7.782122 0.2531474\n625 49  7.929326 0.2531474\n626 50  7.993829 0.2531474\n627 51  8.086430 0.2531475\n628 52  8.235533 0.2531479\n629 53  8.266649 0.2531494\n630 54  8.212788 0.2531563\n631 55  8.127438 0.2531863\n632 56  8.120627 0.2533165\n633 57  8.213011 0.2538825\n634 58  8.076629 0.2563313\n635 59  7.788776 0.2667259\n636 60  7.629357 0.3079011\n637 61  7.637132 0.4447108\n638 62  7.644907 0.5483906\n639 63  7.652681 0.6353714\n640 64  7.660456 0.7118015\n641  1  7.971205 0.3163829\n642  2  7.938826 0.4409800\n643  3  7.906448 0.5320674\n644  4  7.874070 0.6049754\n645  5  7.841692 0.6657040\n646  6  7.809314 0.7173532\n647  7  7.776936 0.7617719\n648  8  7.744558 0.8001653\n649  9  7.712180 0.8333664\n650 10  7.679802 0.8619755\n651 11  7.647423 0.8864374\n652 12  7.615045 0.9070875\n653 13  7.582667 0.9241814\n654 14  7.550289 0.9379136\n655 15  7.517911 0.9484302\n656 16  7.485533 0.9558373\n657 17  7.453155 0.9602067\n658 18  7.420777 0.9615800\n659 19  7.388398 0.9599701\n660 20  7.356020 0.9553617\n661 21  7.323642 0.9477113\n662 22  7.291264 0.9369442\n663 23  7.258886 0.9229514\n664 24  7.226508 0.9055833\n665 25  7.194130 0.8846413\n666 26  7.161752 0.8598642\n667 27  7.129373 0.8309090\n668 28  7.096995 0.7973207\n669 29  7.064617 0.7584839\n670 30  7.032239 0.7135423\n671 31  6.999861 0.6612522\n672 32  6.967483 0.5996944\n673 33  6.935105 0.5256230\n674 34  6.902727 0.4326578\n675 35  6.870348 0.3039294\n676 36  6.700682 0.2656770\n677 37  6.535876 0.2560809\n678 38  6.400910 0.2538245\n679 39  6.318423 0.2533031\n680 40  6.357999 0.2531832\n681 41  6.401596 0.2531556\n682 42  6.648170 0.2531493\n683 43  6.879822 0.2531478\n684 44  7.005934 0.2531475\n685 45  6.851750 0.2531474\n686 46  6.702090 0.2531474\n687 47  6.702807 0.2531474\n688 48  6.655438 0.2531474\n689 49  6.542843 0.2531474\n690 50  6.648437 0.2531474\n691 51  6.842353 0.2531474\n692 52  7.072214 0.2531475\n693 53  7.109851 0.2531479\n694 54  6.974160 0.2531494\n695 55  6.727228 0.2531563\n696 56  6.535633 0.2531863\n697 57  6.601717 0.2533165\n698 58  6.517833 0.2538825\n699 59  6.312055 0.2563313\n700 60  6.203631 0.2667259\n701 61  6.027955 0.3079011\n702 62  5.995567 0.4447108\n703 63  5.963179 0.5483906\n704 64  5.930791 0.6353714\n705  1  5.201992 0.3148648\n706  2  5.240327 0.4366122\n707  3  5.278661 0.5238999\n708  4  5.316996 0.5921677\n709  5  5.355330 0.6474601\n710  6  5.393664 0.6928904\n711  7  5.431999 0.7303014\n712  8  5.470333 0.7608769\n713  9  5.508668 0.7854157\n714 10  5.547002 0.8044704\n715 11  5.585337 0.8184240\n716 12  5.623671 0.8275346\n717 13  5.662006 0.8319614\n718 14  5.700340 0.8317792\n719 15  5.738675 0.8269849\n720 16  5.777009 0.8174974\n721 17  5.815344 0.8031503\n722 18  5.853678 0.7836768\n723 19  5.892013 0.7586823\n724 20  5.930347 0.7275981\n725 21  5.968682 0.6896010\n726 22  6.007016 0.6434677\n727 23  6.045351 0.5872839\n728 24  6.083685 0.5177882\n729 25  6.122020 0.4285526\n730 26  6.160354 0.3025899\n731 27  6.355338 0.2653255\n732 28  6.446955 0.2559971\n733 29  6.475669 0.2538051\n734 30  6.402730 0.2532987\n735 31  6.106950 0.2531822\n736 32  5.926701 0.2531554\n737 33  5.865013 0.2531492\n738 34  5.915617 0.2531478\n739 35  5.785958 0.2531475\n740 36  5.579611 0.2531474\n741 37  5.595051 0.2531474\n742 38  5.550895 0.2531474\n743 39  5.761776 0.2531474\n744 40  5.905504 0.2531474\n745 41  6.060202 0.2531474\n746 42  6.335775 0.2531474\n747 43  6.656597 0.2531474\n748 44  6.835401 0.2531474\n749 45  6.757369 0.2531474\n750 46  6.777704 0.2531474\n751 47  6.789127 0.2531474\n752 48  6.670905 0.2531474\n753 49  6.663214 0.2531475\n754 50  6.912592 0.2531479\n755 51  7.125392 0.2531494\n756 52  7.395660 0.2531563\n757 53  7.495979 0.2531863\n758 54  7.535276 0.2533165\n759 55  7.479982 0.2538825\n760 56  7.423799 0.2563313\n761 57  7.424517 0.2667259\n762 58  7.386962 0.3079011\n763 59  7.425291 0.4447108\n764 60  7.463620 0.5483906\n765 61  7.501949 0.6353714\n766 62  7.540278 0.7118015\n767 63  7.578607 0.7807854\n768 64  7.616936 0.8441507\n769  1  5.832278 0.3148648\n770  2  5.854238 0.4366122\n771  3  5.876197 0.5238999\n772  4  5.898156 0.5921677\n773  5  5.920116 0.6474601\n774  6  5.942075 0.6928904\n775  7  5.964034 0.7303014\n776  8  5.985994 0.7608769\n777  9  6.007953 0.7854157\n778 10  6.029912 0.8044704\n779 11  6.051872 0.8184240\n780 12  6.073831 0.8275346\n781 13  6.095790 0.8319614\n782 14  6.117750 0.8317792\n783 15  6.139709 0.8269849\n784 16  6.161668 0.8174974\n785 17  6.183627 0.8031503\n786 18  6.205587 0.7836768\n787 19  6.227546 0.7586823\n788 20  6.249505 0.7275981\n789 21  6.271465 0.6896010\n790 22  6.293424 0.6434677\n791 23  6.315383 0.5872839\n792 24  6.337343 0.5177882\n793 25  6.359302 0.4285526\n794 26  6.381261 0.3025899\n795 27  6.567175 0.2653255\n796 28  6.652403 0.2559971\n797 29  6.674593 0.2538051\n798 30  6.590977 0.2532987\n799 31  6.273829 0.2531822\n800 32  6.049744 0.2531554\n801 33  6.013796 0.2531492\n802 34  6.216927 0.2531478\n803 35  5.996478 0.2531475\n804 36  5.717312 0.2531474\n805 37  5.683614 0.2531474\n806 38  5.567737 0.2531474\n807 39  5.733928 0.2531474\n808 40  5.898623 0.2531474\n809 41  5.992736 0.2531474\n810 42  6.158248 0.2531474\n811 43  6.406871 0.2531474\n812 44  6.609798 0.2531474\n813 45  6.558373 0.2531474\n814 46  6.545200 0.2531474\n815 47  6.643881 0.2531474\n816 48  6.646059 0.2531474\n817 49  6.663686 0.2531475\n818 50  6.906582 0.2531479\n819 51  7.127181 0.2531494\n820 52  7.442652 0.2531563\n821 53  7.472155 0.2531863\n822 54  7.344201 0.2533165\n823 55  7.112434 0.2538825\n824 56  7.021256 0.2563313\n825 57  7.042021 0.2667259\n826 58  7.083786 0.3079011\n827 59  7.105737 0.4447108\n828 60  7.127689 0.5483906\n829 61  7.149640 0.6353714\n830 62  7.171592 0.7118015\n831 63  7.193543 0.7807854\n832 64  7.215495 0.8441507\n833  1  4.305689 0.3148648\n834  2  4.334607 0.4366122\n835  3  4.363524 0.5238999\n836  4  4.392442 0.5921677\n837  5  4.421359 0.6474601\n838  6  4.450277 0.6928904\n839  7  4.479194 0.7303014\n840  8  4.508112 0.7608769\n841  9  4.537029 0.7854157\n842 10  4.565947 0.8044704\n843 11  4.594864 0.8184240\n844 12  4.623782 0.8275346\n845 13  4.652699 0.8319614\n846 14  4.681617 0.8317792\n847 15  4.710534 0.8269849\n848 16  4.739452 0.8174974\n849 17  4.768369 0.8031503\n850 18  4.797287 0.7836768\n851 19  4.826204 0.7586823\n852 20  4.855122 0.7275981\n853 21  4.884039 0.6896010\n854 22  4.912957 0.6434677\n855 23  4.941874 0.5872839\n856 24  4.970792 0.5177882\n857 25  4.999709 0.4285526\n858 26  5.028627 0.3025899\n859 27  5.217961 0.2653255\n860 28  5.302846 0.2559971\n861 29  5.321184 0.2538051\n862 30  5.228541 0.2532987\n863 31  4.892220 0.2531822\n864 32  4.624621 0.2531554\n865 33  4.771388 0.2531492\n866 34  5.047131 0.2531478\n867 35  4.962991 0.2531475\n868 36  4.804913 0.2531474\n869 37  4.851678 0.2531474\n870 38  4.835583 0.2531474\n871 39  5.193364 0.2531474\n872 40  5.322103 0.2531474\n873 41  5.604785 0.2531474\n874 42  6.027811 0.2531474\n875 43  6.409838 0.2531474\n876 44  6.554400 0.2531474\n877 45  6.426554 0.2531474\n878 46  6.454747 0.2531474\n879 47  6.356506 0.2531474\n880 48  6.058774 0.2531474\n881 49  6.038358 0.2531475\n882 50  6.275145 0.2531479\n883 51  6.403931 0.2531494\n884 52  6.450319 0.2531563\n885 53  6.491286 0.2531863\n886 54  6.411047 0.2533165\n887 55  6.256494 0.2538825\n888 56  6.101276 0.2563313\n889 57  6.074047 0.2667259\n890 58  5.953927 0.3079011\n891 59  5.982842 0.4447108\n892 60  6.011757 0.5483906\n893 61  6.040672 0.6353714\n894 62  6.069587 0.7118015\n895 63  6.098503 0.7807854\n896 64  6.127418 0.8441507\n897  1  3.182127 0.3148648\n898  2  3.236412 0.4366122\n899  3  3.290696 0.5238999\n900  4  3.344981 0.5921677\n901  5  3.399266 0.6474601\n902  6  3.453551 0.6928904\n903  7  3.507836 0.7303014\n904  8  3.562121 0.7608769\n905  9  3.616405 0.7854157\n906 10  3.670690 0.8044704\n907 11  3.724975 0.8184240\n908 12  3.779260 0.8275346\n909 13  3.833545 0.8319614\n910 14  3.887830 0.8317792\n911 15  3.942115 0.8269849\n912 16  3.996399 0.8174974\n913 17  4.050684 0.8031503\n914 18  4.104969 0.7836768\n915 19  4.159254 0.7586823\n916 20  4.213539 0.7275981\n917 21  4.267824 0.6896010\n918 22  4.322109 0.6434677\n919 23  4.376393 0.5872839\n920 24  4.430678 0.5177882\n921 25  4.484963 0.4285526\n922 26  4.539248 0.3025899\n923 27  4.742011 0.2653255\n924 28  4.835945 0.2559971\n925 29  4.862091 0.2538051\n926 30  4.782064 0.2532987\n927 31  4.469696 0.2531822\n928 32  4.258679 0.2531554\n929 33  4.255103 0.2531492\n930 34  4.239334 0.2531478\n931 35  3.978444 0.2531475\n932 36  3.814689 0.2531474\n933 37  3.848251 0.2531474\n934 38  3.957969 0.2531474\n935 39  3.972031 0.2531474\n936 40  4.055012 0.2531474\n937 41  4.106405 0.2531474\n938 42  4.379928 0.2531474\n939 43  4.824440 0.2531474\n940 44  5.092892 0.2531474\n941 45  5.083930 0.2531474\n942 46  5.155425 0.2531474\n943 47  5.154666 0.2531474\n944 48  5.003571 0.2531474\n945 49  4.947070 0.2531475\n946 50  5.217189 0.2531479\n947 51  5.452856 0.2531494\n948 52  5.732390 0.2531563\n949 53  5.887042 0.2531863\n950 54  6.019141 0.2533165\n951 55  6.031737 0.2538825\n952 56  6.112719 0.2563313\n953 57  6.222687 0.2667259\n954 58  6.276179 0.3079011\n955 59  6.330472 0.4447108\n956 60  6.384765 0.5483906\n957 61  6.439058 0.6353714\n958 62  6.493351 0.7118015\n959 63  6.547643 0.7807854\n960 64  6.601936 0.8441507\n\n\nFinally, let’s look at the correlation plot.\n\n\nCode\nQ1 &lt;- coef(m1, type = \"matrix\")$Q\ncorrmat1 &lt;- diag(1/sqrt(diag(Q1))) %*% Q1 %*% diag(1/sqrt(diag(Q1)))\ncorrplot(corrmat1)"
  },
  {
    "objectID": "Lab-2/Final_Write_ups/Lab-2-team-4_final.html#hypothesis-2",
    "href": "Lab-2/Final_Write_ups/Lab-2-team-4_final.html#hypothesis-2",
    "title": "11  Team 4 - Lab 2",
    "section": "Hypothesis 2",
    "text": "Hypothesis 2\nHypothesis two assumes that the four main DPCs form separate sub-populations. In this hypothesis we are utilizing 4 separate underlying states to model the observations from each of the main population groups. For each of the four models that we are comparing for this hypothesis, we are allowing the random walks to drift independent of one another based on the supplied “U” matrix.\n\\[\n\\text{Hypothesis Two}:\n\\begin{bmatrix}\ny_1\\\\\ny_2\\\\\ny_3\\\\\ny_4\\\\\ny_5\\\\\ny_6\\\\\ny_7\\\\\ny_8\\\\\ny_9\\\\\ny_{10}\\\\\ny_{11}\\\\\ny_{12}\\\\\ny_{13}\\\\\ny_{14}\\\\\ny_{15}\\\\\n\\end{bmatrix}_t=\n\\begin{bmatrix}\n1 & 0 & 0 & 0\\\\\n1 & 0 & 0 & 0\\\\\n1 & 0 & 0 & 0\\\\\n0 & 1 & 0 & 0\\\\\n0 & 1 & 0 & 0\\\\\n0 & 1 & 0 & 0\\\\\n0 & 1 & 0 & 0\\\\\n0 & 1 & 0 & 0\\\\\n0 & 0 & 1 & 0\\\\\n0 & 0 & 1 & 0\\\\\n0 & 0 & 1 & 0\\\\\n0 & 0 & 0 & 1\\\\\n0 & 0 & 0 & 1\\\\\n0 & 0 & 0 & 1\\\\\n0 & 0 & 0 & 1\\\\\n\\end{bmatrix}*\n\\begin{bmatrix}\nx_1\\\\\nx_2\\\\\nx_3\\\\\nx_4\\\\\n\\end{bmatrix}_t+\n\\begin{bmatrix}\na_1\\\\\na_2\\\\\na_3\\\\\na_4\\\\\na_5\\\\\na_6\\\\\na_7\\\\\na_8\\\\\na_9\\\\\na_{10}\\\\\na_{11}\\\\\na_{12}\\\\\na_{13}\\\\\na_{14}\\\\\na_{15}\\\\\n\\end{bmatrix}+\n\\begin{bmatrix}\nw_1\\\\\nw_2\\\\\nw_3\\\\\nw_4\\\\\nw_5\\\\\nw_6\\\\\nw_7\\\\\nw_8\\\\\nw_9\\\\\nw_{10}\\\\\nw_{11}\\\\\nw_{12}\\\\\nw_{13}\\\\\nw_{14}\\\\\nw_{15}\\\\\n\\end{bmatrix}_t \\]\n\\[\n\\text{Where }w \\sim MVN\n\\begin{pmatrix}\n\\text{0,}\\begin{bmatrix}\nR\n\\end{bmatrix}\n\\end{pmatrix}\n\\]\nSet up the U and Z matrices\n\n\nCode\n#give U values names to make it easier to read results\n#this hypothesis has 4 hidden states based on major groups\nU_mat2 &lt;- matrix(c(\"Cascades\",\"JohnDay\",\"Walla\",\"Yakima\"),4,1)\n#make Z matrix correspond to 4 hidden states\nZ_mat2 &lt;- matrix(c(rep(c(1,0,0,0),3),\n                  rep(c(0,1,0,0),5),\n                  rep(c(0,0,1,0),3),\n                  rep(c(0,0,0,1),4)),15,4, byrow=TRUE)\n\n\n###Hypothesis 2.1 The Q matrix for the variance of process errors is “diagonal and equal” meaning each state (x) model has the same process error but they are not correlated to each other.\n\n\nCode\nmod.list2.1 &lt;- list(\n  U = U_mat2,\n  R = \"diagonal and equal\",\n  Q = \"diagonal and equal\",\n  Z = Z_mat2\n)\nm2.1 &lt;- MARSS(dat, model = mod.list2.1)\n\n\nSuccess! abstol and log-log tests passed at 125 iterations.\nAlert: conv.test.slope.tol is 0.5.\nTest with smaller values (&lt;0.1) to ensure convergence.\n\nMARSS fit is\nEstimation method: kem \nConvergence test: conv.test.slope.tol = 0.5, abstol = 0.001\nEstimation converged in 125 iterations. \nLog-likelihood: -514.2653 \nAIC: 1070.531   AICc: 1072.048   \n \n                                                                               Estimate\nA.Steelhead (Middle Columbia River DPS) Deschutes River Westside - summer      -0.88896\nA.Steelhead (Middle Columbia River DPS) Fifteenmile Creek - winter             -1.12228\nA.Steelhead (Middle Columbia River DPS) John Day River Upper Mainstem - summer -0.77474\nA.Steelhead (Middle Columbia River DPS) Middle Fork John Day River - summer    -0.34028\nA.Steelhead (Middle Columbia River DPS) North Fork John Day River - summer     -0.10687\nA.Steelhead (Middle Columbia River DPS) South Fork John Day River - summer     -1.17898\nA.Steelhead (Middle Columbia River DPS) Umatilla River - summer                 1.76516\nA.Steelhead (Middle Columbia River DPS) Walla Walla River - summer              0.63708\nA.Steelhead (Middle Columbia River DPS) Satus Creek - summer                   -0.02276\nA.Steelhead (Middle Columbia River DPS) Toppenish Creek - summer               -0.84219\nA.Steelhead (Middle Columbia River DPS) Yakima River Upper Mainstem - summer   -1.64351\nR.diag                                                                          0.19787\nU.Cascades                                                                     -0.02384\nU.JohnDay                                                                      -0.01612\nU.Walla                                                                        -0.00168\nU.Yakima                                                                        0.04521\nQ.diag                                                                          0.13118\nx0.X1                                                                           7.55382\nx0.X2                                                                           8.05157\nx0.X3                                                                           5.48625\nx0.X4                                                                           4.63376\nInitial states (x0) defined at t=0\n\nStandard errors have not been calculated. \nUse MARSSparamCIs to compute CIs and bias estimates.\n\n\nThe model converged with a better AICc than Hypothesis 1.\n\n\nCode\nautoplot(m2.1)\n\n\n\n\n\nplot.type = xtT \n\n\n\n\n\nHit &lt;Return&gt; to see next plot (q to exit): \n\n\n\n\n\nplot.type = fitted.ytT \n\n\n\n\n\nHit &lt;Return&gt; to see next plot (q to exit): \n\n\n\n\n\nplot.type = model.resids.ytt1 \n\n\n\n\n\nHit &lt;Return&gt; to see next plot (q to exit): \n\n\n\n\n\nplot.type = std.model.resids.ytT \n\n\n\n\n\nHit &lt;Return&gt; to see next plot (q to exit): \n\n\n\n\n\nplot.type = std.state.resids.xtT \n\n\n\n\n\nHit &lt;Return&gt; to see next plot (q to exit): \n\n\n\n\n\nplot.type = qqplot.std.model.resids.ytt1 \n\n\n\n\n\nHit &lt;Return&gt; to see next plot (q to exit): \n\n\n\n\n\nplot.type = qqplot.std.state.resids.xtT \n\n\n\n\n\nFinished plots.\n\n\n\n\n\nplot.type = acf.std.model.resids.ytt1 \n\n\n\n\n\nHit &lt;Return&gt; to see next plot (q to exit): \n\n\nThere are larged ballooned CIs on the missing data in hidden states fitted CI have the same balloon shaped CIs on missing data.There also appears to be some cyclic structure in the residuals. Yakima (X4) is the only system with a positive drift value on the hidden state’s random walk. There is only one Q value output as all hidden states have the same one and there is no covariance/correlation between states. This model likely will not be a top contender when we evaluate based on AICs. Let’s look at the estimates.\n\n\nCode\nprint(fit2.1_smooth&lt;-tsSmooth(m2.1))\n\n\n    .rownames  t .estimate       .se\n1          X1  1  7.534868 0.3533879\n2          X1  2  7.515915 0.4869991\n3          X1  3  7.496963 0.5803924\n4          X1  4  7.478010 0.6511104\n5          X1  5  7.459058 0.7060002\n6          X1  6  7.440105 0.7485518\n7          X1  7  7.421153 0.7807852\n8          X1  8  7.402200 0.8039424\n9          X1  9  7.383247 0.8187938\n10         X1 10  7.364295 0.8257877\n11         X1 11  7.345342 0.8251240\n12         X1 12  7.326390 0.8167838\n13         X1 13  7.307437 0.8005275\n14         X1 14  7.288485 0.7758574\n15         X1 15  7.269532 0.7419349\n16         X1 16  7.250580 0.6974110\n17         X1 17  7.231627 0.6400774\n18         X1 18  7.212675 0.5660548\n19         X1 19  7.193722 0.4674817\n20         X1 20  7.174770 0.3225870\n21         X1 21  7.083255 0.2839633\n22         X1 22  7.142996 0.2753813\n23         X1 23  7.254560 0.2735359\n24         X1 24  7.371268 0.2728823\n25         X1 25  7.283177 0.2714025\n26         X1 26  7.440895 0.2644156\n27         X1 27  7.553439 0.2272896\n28         X1 28  7.715273 0.2227543\n29         X1 29  7.766615 0.2222125\n30         X1 30  7.408640 0.2218900\n31         X1 31  7.160209 0.2194956\n32         X1 32  7.094684 0.1968361\n33         X1 33  6.930902 0.1950968\n34         X1 34  6.933032 0.1949705\n35         X1 35  6.555657 0.1949614\n36         X1 36  6.605411 0.1949608\n37         X1 37  6.624167 0.1949607\n38         X1 38  6.775403 0.1949607\n39         X1 39  7.102769 0.1949607\n40         X1 40  7.245681 0.1949607\n41         X1 41  7.543980 0.1949607\n42         X1 42  7.822339 0.1949607\n43         X1 43  8.104223 0.1949607\n44         X1 44  8.232257 0.1949607\n45         X1 45  8.096734 0.1949607\n46         X1 46  7.768808 0.1949607\n47         X1 47  7.424908 0.1949607\n48         X1 48  7.323222 0.1949607\n49         X1 49  7.237882 0.1949607\n50         X1 50  6.903469 0.1949607\n51         X1 51  7.111413 0.1949607\n52         X1 52  7.449938 0.1949607\n53         X1 53  7.416309 0.1949607\n54         X1 54  7.228192 0.1949607\n55         X1 55  7.026148 0.1949608\n56         X1 56  7.165223 0.1949614\n57         X1 57  7.064999 0.1949706\n58         X1 58  6.651242 0.1950975\n59         X1 59  6.132436 0.1968451\n60         X1 60  6.122926 0.2196067\n61         X1 61  6.099084 0.4235670\n62         X1 62  6.075241 0.5573069\n63         X1 63  6.051399 0.6646600\n64         X1 64  6.027557 0.7569378\n65         X2  1  8.035449 0.2091516\n66         X2  2  7.890334 0.2181526\n67         X2  3  7.985295 0.1967221\n68         X2  4  8.076309 0.1950062\n69         X2  5  7.909146 0.1938239\n70         X2  6  8.186306 0.1784508\n71         X2  7  8.418015 0.1918147\n72         X2  8  8.790832 0.1644013\n73         X2  9  8.439890 0.1632643\n74         X2 10  7.700598 0.1632237\n75         X2 11  8.006868 0.1632995\n76         X2 12  8.193261 0.1653154\n77         X2 13  8.115058 0.2114055\n78         X2 14  7.872122 0.1653355\n79         X2 15  7.589920 0.1638086\n80         X2 16  7.669605 0.1760634\n81         X2 17  8.022818 0.1760818\n82         X2 18  7.963683 0.1642156\n83         X2 19  8.017074 0.1754812\n84         X2 20  7.633942 0.1637037\n85         X2 21  6.602794 0.1632375\n86         X2 22  7.373261 0.1632196\n87         X2 23  7.536066 0.1632190\n88         X2 24  7.583630 0.1632189\n89         X2 25  7.499459 0.1632189\n90         X2 26  7.532227 0.1632189\n91         X2 27  8.201664 0.1632189\n92         X2 28  8.542266 0.1632189\n93         X2 29  8.654963 0.1632190\n94         X2 30  8.389947 0.1632196\n95         X2 31  7.449096 0.1632374\n96         X2 32  7.215709 0.1637027\n97         X2 33  7.142982 0.1754571\n98         X2 34  7.594092 0.1637027\n99         X2 35  7.118468 0.1632374\n100        X2 36  7.058651 0.1632196\n101        X2 37  6.633692 0.1632190\n102        X2 38  6.804781 0.1632189\n103        X2 39  6.715705 0.1632189\n104        X2 40  6.740319 0.1632189\n105        X2 41  7.015840 0.1632189\n106        X2 42  7.531813 0.1632189\n107        X2 43  7.800550 0.1632189\n108        X2 44  8.228155 0.1632189\n109        X2 45  7.748717 0.1632189\n110        X2 46  7.158482 0.1632189\n111        X2 47  6.801163 0.1632189\n112        X2 48  6.634353 0.1632189\n113        X2 49  7.258688 0.1632189\n114        X2 50  7.556570 0.1632189\n115        X2 51  8.039138 0.1632189\n116        X2 52  7.807702 0.1632189\n117        X2 53  8.117254 0.1632189\n118        X2 54  8.346447 0.1632189\n119        X2 55  8.172071 0.1632189\n120        X2 56  8.206859 0.1632189\n121        X2 57  7.902473 0.1632193\n122        X2 58  7.372746 0.1632271\n123        X2 59  6.995562 0.1634337\n124        X2 60  7.171945 0.1687572\n125        X2 61  7.221308 0.2735464\n126        X2 62  7.154227 0.3632258\n127        X2 63  7.087146 0.3554352\n128        X2 64  7.020064 0.2408969\n129        X3  1  5.484574 0.3432659\n130        X3  2  5.482903 0.4571238\n131        X3  3  5.481231 0.5228689\n132        X3  4  5.479560 0.5577819\n133        X3  5  5.477889 0.5675814\n134        X3  6  5.476217 0.5536025\n135        X3  7  5.474546 0.5139084\n136        X3  8  5.472875 0.4416188\n137        X3  9  5.471203 0.3150421\n138        X3 10  5.388338 0.2822278\n139        X3 11  5.599148 0.2750307\n140        X3 12  5.763582 0.2735346\n141        X3 13  5.870631 0.2732274\n142        X3 14  5.872518 0.2731645\n143        X3 15  5.838919 0.2731517\n144        X3 16  5.871408 0.2731490\n145        X3 17  5.826006 0.2731485\n146        X3 18  5.802248 0.2731484\n147        X3 19  5.682038 0.2731483\n148        X3 20  5.849675 0.2731483\n149        X3 21  5.822694 0.2731482\n150        X3 22  5.673967 0.2731477\n151        X3 23  5.388804 0.2731453\n152        X3 24  5.195295 0.2731333\n153        X3 25  5.365512 0.2730747\n154        X3 26  5.700978 0.2727881\n155        X3 27  5.948093 0.2713835\n156        X3 28  6.063164 0.2644121\n157        X3 29  6.184791 0.2272895\n158        X3 30  6.197868 0.2227575\n159        X3 31  5.911918 0.2222422\n160        X3 32  5.778123 0.2221553\n161        X3 33  5.668230 0.2218837\n162        X3 34  5.980248 0.2194949\n163        X3 35  5.941698 0.1968361\n164        X3 36  5.861117 0.1950968\n165        X3 37  5.805540 0.1949705\n166        X3 38  5.773789 0.1949614\n167        X3 39  5.717150 0.1949608\n168        X3 40  5.793967 0.1949607\n169        X3 41  5.788374 0.1949607\n170        X3 42  5.979663 0.1949607\n171        X3 43  6.186346 0.1949607\n172        X3 44  6.420112 0.1949607\n173        X3 45  6.225710 0.1949607\n174        X3 46  6.059635 0.1949607\n175        X3 47  6.090954 0.1949607\n176        X3 48  5.975718 0.1949607\n177        X3 49  6.021047 0.1949607\n178        X3 50  6.060137 0.1949607\n179        X3 51  6.222050 0.1949607\n180        X3 52  6.564561 0.1949607\n181        X3 53  6.512909 0.1949607\n182        X3 54  6.339326 0.1949607\n183        X3 55  6.201491 0.1949607\n184        X3 56  5.957020 0.1949608\n185        X3 57  6.221388 0.1949618\n186        X3 58  6.028905 0.1949756\n187        X3 59  5.534490 0.1951669\n188        X3 60  5.410836 0.1977954\n189        X3 61  5.252750 0.2311222\n190        X3 62  5.382095 0.3133692\n191        X3 63  5.380416 0.4789386\n192        X3 64  5.378736 0.6004700\n193        X4  1  4.686722 0.3552359\n194        X4  2  4.739687 0.4923476\n195        X4  3  4.792652 0.5904582\n196        X4  4  4.845617 0.6670058\n197        X4  5  4.898582 0.7288166\n198        X4  6  4.951547 0.7794047\n199        X4  7  5.004512 0.8208477\n200        X4  8  5.057477 0.8544771\n201        X4  9  5.110442 0.8811881\n202        X4 10  5.163407 0.9015958\n203        X4 11  5.216372 0.9161215\n204        X4 12  5.269337 0.9250423\n205        X4 13  5.322302 0.9285199\n206        X4 14  5.375267 0.9266154\n207        X4 15  5.428232 0.9192955\n208        X4 16  5.481197 0.9064289\n209        X4 17  5.534162 0.8877745\n210        X4 18  5.587127 0.8629571\n211        X4 19  5.640093 0.8314249\n212        X4 20  5.693058 0.7923768\n213        X4 21  5.746023 0.7446313\n214        X4 22  5.798988 0.6863756\n215        X4 23  5.851953 0.6146287\n216        X4 24  5.904918 0.5238764\n217        X4 25  5.957883 0.4014295\n218        X4 26  6.010848 0.1945915\n219        X4 27  6.420953 0.1776865\n220        X4 28  6.535918 0.1767801\n221        X4 29  6.608963 0.1767337\n222        X4 30  6.577876 0.1767313\n223        X4 31  5.983138 0.1767312\n224        X4 32  5.621145 0.1767312\n225        X4 33  5.761960 0.1767312\n226        X4 34  6.209068 0.1767312\n227        X4 35  5.841370 0.1767312\n228        X4 36  5.430386 0.1767312\n229        X4 37  5.572386 0.1767312\n230        X4 38  5.432808 0.1767312\n231        X4 39  5.792098 0.1767312\n232        X4 40  5.882392 0.1767312\n233        X4 41  5.940084 0.1767312\n234        X4 42  6.308583 0.1767312\n235        X4 43  6.863374 0.1767312\n236        X4 44  7.142373 0.1767312\n237        X4 45  6.819503 0.1767312\n238        X4 46  6.896515 0.1767312\n239        X4 47  6.957085 0.1767312\n240        X4 48  6.591429 0.1767312\n241        X4 49  6.463417 0.1767312\n242        X4 50  6.944253 0.1767312\n243        X4 51  7.160561 0.1767312\n244        X4 52  7.526500 0.1767312\n245        X4 53  7.587335 0.1767312\n246        X4 54  7.551244 0.1767314\n247        X4 55  7.311761 0.1767339\n248        X4 56  7.221288 0.1767832\n249        X4 57  7.325625 0.1777475\n250        X4 58  7.254980 0.1956808\n251        X4 59  7.300189 0.4116709\n252        X4 60  7.345397 0.5483200\n253        X4 61  7.390605 0.6571429\n254        X4 62  7.435813 0.7503458\n255        X4 63  7.481022 0.8331871\n256        X4 64  7.526230 0.9085057\n\n\nAnd let’s look at corrplot, it should be very familiar.\n\n\nCode\nQ2.1 &lt;- coef(m2.1, type = \"matrix\")$Q\ncorrmat2.1 &lt;- diag(1/sqrt(diag(Q2.1))) %*% Q2.1 %*% diag(1/sqrt(diag(Q2.1)))\ncorrplot(corrmat2.1)\n\n\n\n\n\nCode\n#As expected output displays only diagonal as we told it diagonal and equal\n\n\nThe Confidence Intervals in the sections of the underlying states (x) were very large in the sections where data was missing. This was also reflected in the plots showing the fitted values. Some structuring may also be present in the residuals. Six of the river systems have multiple significant lags when examining the ACF plots indicating the residuals display autocorrelation. The corrplot is fairly uninformative as we forced the model to be equal variance with no correlation. One interesting thing to note is that we allowed the “U” values to varying independently of each other and the Yakima group is the only one with a positive U value, indicating it is the only system with positive growth or at least increasing number of adults counted over time.\n\n\nHypothesis 2.2\nThe Q matrix for the variance of process errors is “diagonal and unequal” meaning each of the four underlying states’ process error can be different but they are not correlated to each other.\n\n\nCode\nmod.list2.2 &lt;- list(\n  U = U_mat2,\n  R = \"diagonal and equal\",\n  Q = \"diagonal and unequal\",\n  Z = Z_mat2\n)\nm2.2 &lt;- MARSS(dat, model = mod.list2.2)\n\n\nSuccess! abstol and log-log tests passed at 129 iterations.\nAlert: conv.test.slope.tol is 0.5.\nTest with smaller values (&lt;0.1) to ensure convergence.\n\nMARSS fit is\nEstimation method: kem \nConvergence test: conv.test.slope.tol = 0.5, abstol = 0.001\nEstimation converged in 129 iterations. \nLog-likelihood: -504.4194 \nAIC: 1056.839   AICc: 1058.819   \n \n                                                                               Estimate\nA.Steelhead (Middle Columbia River DPS) Deschutes River Westside - summer      -0.88829\nA.Steelhead (Middle Columbia River DPS) Fifteenmile Creek - winter             -1.11858\nA.Steelhead (Middle Columbia River DPS) John Day River Upper Mainstem - summer -0.77509\nA.Steelhead (Middle Columbia River DPS) Middle Fork John Day River - summer    -0.34298\nA.Steelhead (Middle Columbia River DPS) North Fork John Day River - summer     -0.10888\nA.Steelhead (Middle Columbia River DPS) South Fork John Day River - summer     -1.18031\nA.Steelhead (Middle Columbia River DPS) Umatilla River - summer                 1.76167\nA.Steelhead (Middle Columbia River DPS) Walla Walla River - summer              0.63346\nA.Steelhead (Middle Columbia River DPS) Satus Creek - summer                   -0.02276\nA.Steelhead (Middle Columbia River DPS) Toppenish Creek - summer               -0.84219\nA.Steelhead (Middle Columbia River DPS) Yakima River Upper Mainstem - summer   -1.64351\nR.diag                                                                          0.19726\nU.Cascades                                                                     -0.02343\nU.JohnDay                                                                      -0.01653\nU.Walla                                                                        -0.00221\nU.Yakima                                                                        0.04458\nQ.(X1,X1)                                                                       0.07752\nQ.(X2,X2)                                                                       0.24414\nQ.(X3,X3)                                                                       0.02414\nQ.(X4,X4)                                                                       0.12012\nx0.X1                                                                           7.55844\nx0.X2                                                                           8.07225\nx0.X3                                                                           5.59910\nx0.X4                                                                           4.67230\nInitial states (x0) defined at t=0\n\nStandard errors have not been calculated. \nUse MARSSparamCIs to compute CIs and bias estimates.\n\n\nOur model converged with an AICc value that is a little better than the model where Q was diagonal and equal, indicating that allowing Q to vary improved the model fits to data.\n\n\nCode\nautoplot(m2.2)\n\n\n\n\n\nplot.type = xtT \n\n\n\n\n\nHit &lt;Return&gt; to see next plot (q to exit): \n\n\n\n\n\nplot.type = fitted.ytT \n\n\n\n\n\nHit &lt;Return&gt; to see next plot (q to exit): \n\n\n\n\n\nplot.type = model.resids.ytt1 \n\n\n\n\n\nHit &lt;Return&gt; to see next plot (q to exit): \n\n\n\n\n\nplot.type = std.model.resids.ytT \n\n\n\n\n\nHit &lt;Return&gt; to see next plot (q to exit): \n\n\n\n\n\nplot.type = std.state.resids.xtT \n\n\n\n\n\nHit &lt;Return&gt; to see next plot (q to exit): \n\n\n\n\n\nplot.type = qqplot.std.model.resids.ytt1 \n\n\n\n\n\nHit &lt;Return&gt; to see next plot (q to exit): \n\n\n\n\n\nplot.type = qqplot.std.state.resids.xtT \n\n\n\n\n\nFinished plots.\n\n\n\n\n\nplot.type = acf.std.model.resids.ytt1 \n\n\n\n\n\nHit &lt;Return&gt; to see next plot (q to exit): \n\n\nWe still see large CIs on the missing data in hidden states 1 (Cascades) and 4 (Yakima). The CI are tight in the John Day region, which is the most data rich stream. Again Yakima is the only positive drift value on the hidden state’s random walk\nThe 4 varied Q values indicate that the hidden states are uncorrelated, and the variance of the state variables varies over time.\nNext let’s looks at the estimates:\n\n\nCode\nprint(fit2.1_smooth&lt;-tsSmooth(m2.2))\n\n\n    .rownames  t .estimate       .se\n1          X1  1  7.539618 0.2717632\n2          X1  2  7.520799 0.3746837\n3          X1  3  7.501981 0.4467636\n4          X1  4  7.483163 0.5014828\n5          X1  5  7.464345 0.5441043\n6          X1  6  7.445527 0.5773139\n7          X1  7  7.426708 0.6026695\n8          X1  8  7.407890 0.6211336\n9          X1  9  7.389072 0.6333094\n10         X1 10  7.370254 0.6395560\n11         X1 11  7.351436 0.6400471\n12         X1 12  7.332617 0.6347961\n13         X1 13  7.313799 0.6236579\n14         X1 14  7.294981 0.6063081\n15         X1 15  7.276163 0.5821918\n16         X1 16  7.257344 0.5504201\n17         X1 17  7.238526 0.5095632\n18         X1 18  7.219708 0.4571917\n19         X1 19  7.200890 0.3886788\n20         X1 20  7.182072 0.2929088\n21         X1 21  7.123374 0.2584322\n22         X1 22  7.170362 0.2474501\n23         X1 23  7.259085 0.2440030\n24         X1 24  7.352898 0.2424470\n25         X1 25  7.318359 0.2401126\n26         X1 26  7.443612 0.2328375\n27         X1 27  7.543419 0.2061996\n28         X1 28  7.666284 0.2010398\n29         X1 29  7.686870 0.2000137\n30         X1 30  7.403871 0.1993380\n31         X1 31  7.183774 0.1964497\n32         X1 32  7.092335 0.1796554\n33         X1 33  6.941601 0.1774389\n34         X1 34  6.903543 0.1771592\n35         X1 35  6.607482 0.1771241\n36         X1 36  6.627420 0.1771197\n37         X1 37  6.656647 0.1771192\n38         X1 38  6.804410 0.1771191\n39         X1 39  7.092490 0.1771191\n40         X1 40  7.260833 0.1771191\n41         X1 41  7.540863 0.1771191\n42         X1 42  7.807117 0.1771191\n43         X1 43  8.059232 0.1771191\n44         X1 44  8.168827 0.1771191\n45         X1 45  8.049133 0.1771191\n46         X1 46  7.760990 0.1771191\n47         X1 47  7.455880 0.1771191\n48         X1 48  7.332575 0.1771191\n49         X1 49  7.231704 0.1771191\n50         X1 50  6.977626 0.1771191\n51         X1 51  7.134176 0.1771191\n52         X1 52  7.396681 0.1771191\n53         X1 53  7.377520 0.1771191\n54         X1 54  7.222773 0.1771192\n55         X1 55  7.055098 0.1771201\n56         X1 56  7.125472 0.1771268\n57         X1 57  7.008854 0.1771808\n58         X1 58  6.641913 0.1776107\n59         X1 59  6.203423 0.1810048\n60         X1 60  6.152227 0.2060977\n61         X1 61  6.128796 0.3463999\n62         X1 62  6.105364 0.4444204\n63         X1 63  6.081933 0.5244293\n64         X1 64  6.058502 0.5937530\n65         X2  1  8.055723 0.2398874\n66         X2  2  7.848129 0.2448836\n67         X2  3  7.983823 0.2146833\n68         X2  4  8.104605 0.2136039\n69         X2  5  7.846381 0.2129334\n70         X2  6  8.182530 0.1924605\n71         X2  7  8.410569 0.2118197\n72         X2  8  8.872309 0.1759647\n73         X2  9  8.479183 0.1753562\n74         X2 10  7.596300 0.1753471\n75         X2 11  8.012026 0.1753648\n76         X2 12  8.227970 0.1765268\n77         X2 13  8.156821 0.2403171\n78         X2 14  7.877381 0.1765307\n79         X2 15  7.549274 0.1756190\n80         X2 16  7.637322 0.1911718\n81         X2 17  8.070774 0.1911763\n82         X2 18  7.966406 0.1758506\n83         X2 19  8.081063 0.1908555\n84         X2 20  7.689671 0.1755955\n85         X2 21  6.425470 0.1753505\n86         X2 22  7.419428 0.1753467\n87         X2 23  7.556739 0.1753466\n88         X2 24  7.598937 0.1753466\n89         X2 25  7.482021 0.1753466\n90         X2 26  7.467596 0.1753466\n91         X2 27  8.233900 0.1753466\n92         X2 28  8.577882 0.1753466\n93         X2 29  8.708894 0.1753466\n94         X2 30  8.460605 0.1753467\n95         X2 31  7.379961 0.1753505\n96         X2 32  7.184331 0.1755954\n97         X2 33  7.086551 0.1908504\n98         X2 34  7.682779 0.1755954\n99         X2 35  7.089818 0.1753505\n100        X2 36  7.087923 0.1753467\n101        X2 37  6.577592 0.1753466\n102        X2 38  6.824937 0.1753466\n103        X2 39  6.703410 0.1753466\n104        X2 40  6.710137 0.1753466\n105        X2 41  6.990589 0.1753466\n106        X2 42  7.555775 0.1753466\n107        X2 43  7.799782 0.1753466\n108        X2 44  8.327716 0.1753466\n109        X2 45  7.770519 0.1753466\n110        X2 46  7.133484 0.1753466\n111        X2 47  6.768676 0.1753466\n112        X2 48  6.550578 0.1753466\n113        X2 49  7.283122 0.1753466\n114        X2 50  7.549515 0.1753466\n115        X2 51  8.109135 0.1753466\n116        X2 52  7.761052 0.1753466\n117        X2 53  8.126335 0.1753466\n118        X2 54  8.389887 0.1753466\n119        X2 55  8.160942 0.1753466\n120        X2 56  8.245701 0.1753466\n121        X2 57  7.929720 0.1753467\n122        X2 58  7.353755 0.1753474\n123        X2 59  6.937139 0.1753939\n124        X2 60  7.184528 0.1783962\n125        X2 61  7.264739 0.3176519\n126        X2 62  7.181316 0.4669904\n127        X2 63  7.097893 0.4525327\n128        X2 64  7.014470 0.2470222\n129        X3  1  5.596926 0.1484153\n130        X3  2  5.594755 0.1995468\n131        X3  3  5.592585 0.2310312\n132        X3  4  5.590414 0.2503930\n133        X3  5  5.588243 0.2603508\n134        X3  6  5.586072 0.2619792\n135        X3  7  5.583901 0.2554377\n136        X3  8  5.581730 0.2400592\n137        X3  9  5.579560 0.2139464\n138        X3 10  5.575234 0.1996585\n139        X3 11  5.647579 0.1921399\n140        X3 12  5.716863 0.1882799\n141        X3 13  5.769406 0.1863258\n142        X3 14  5.789716 0.1853438\n143        X3 15  5.792911 0.1848519\n144        X3 16  5.802250 0.1846053\n145        X3 17  5.788315 0.1844803\n146        X3 18  5.773336 0.1844141\n147        X3 19  5.736582 0.1843735\n148        X3 20  5.759222 0.1843378\n149        X3 21  5.734432 0.1842891\n150        X3 22  5.675933 0.1842028\n151        X3 23  5.592057 0.1840352\n152        X3 24  5.549555 0.1837014\n153        X3 25  5.617143 0.1830314\n154        X3 26  5.745615 0.1816805\n155        X3 27  5.862811 0.1789401\n156        X3 28  5.944761 0.1733119\n157        X3 29  6.013003 0.1614307\n158        X3 30  6.018720 0.1566917\n159        X3 31  5.924943 0.1547501\n160        X3 32  5.862021 0.1536797\n161        X3 33  5.823623 0.1523772\n162        X3 34  5.900737 0.1494569\n163        X3 35  5.893233 0.1416235\n164        X3 36  5.859302 0.1391632\n165        X3 37  5.828451 0.1384092\n166        X3 38  5.809543 0.1381800\n167        X3 39  5.798298 0.1381104\n168        X3 40  5.840623 0.1380894\n169        X3 41  5.883994 0.1380830\n170        X3 42  5.997959 0.1380810\n171        X3 43  6.120615 0.1380805\n172        X3 44  6.223265 0.1380803\n173        X3 45  6.173706 0.1380802\n174        X3 46  6.109412 0.1380802\n175        X3 47  6.098971 0.1380802\n176        X3 48  6.063546 0.1380802\n177        X3 49  6.089148 0.1380802\n178        X3 50  6.137736 0.1380803\n179        X3 51  6.236627 0.1380805\n180        X3 52  6.373344 0.1380811\n181        X3 53  6.366199 0.1380830\n182        X3 54  6.281800 0.1380895\n183        X3 55  6.182006 0.1381110\n184        X3 56  6.054499 0.1381817\n185        X3 57  6.055865 0.1384149\n186        X3 58  5.911230 0.1391820\n187        X3 59  5.666768 0.1416844\n188        X3 60  5.538463 0.1496475\n189        X3 61  5.449798 0.1733542\n190        X3 62  5.461998 0.2129934\n191        X3 63  5.459787 0.2636493\n192        X3 64  5.457575 0.3060322\n193        X4  1  4.724073 0.3399321\n194        X4  2  4.775846 0.4711450\n195        X4  3  4.827618 0.5650409\n196        X4  4  4.879391 0.6383062\n197        X4  5  4.931164 0.6974727\n198        X4  6  4.982937 0.7459032\n199        X4  7  5.034709 0.7855857\n200        X4  8  5.086482 0.8177946\n201        X4  9  5.138255 0.8433867\n202        X4 10  5.190027 0.8629508\n203        X4 11  5.241800 0.8768905\n204        X4 12  5.293573 0.8854715\n205        X4 13  5.345346 0.8888490\n206        X4 14  5.397118 0.8870824\n207        X4 15  5.448891 0.8801407\n208        X4 16  5.500664 0.8678998\n209        X4 17  5.552436 0.8501308\n210        X4 18  5.604209 0.8264772\n211        X4 19  5.655982 0.7964149\n212        X4 20  5.707755 0.7591830\n213        X4 21  5.759527 0.7136601\n214        X4 22  5.811300 0.6581281\n215        X4 23  5.863073 0.5897664\n216        X4 24  5.914845 0.5033747\n217        X4 25  5.966618 0.3870628\n218        X4 26  6.018391 0.1926633\n219        X4 27  6.416585 0.1752796\n220        X4 28  6.533054 0.1742410\n221        X4 29  6.604047 0.1741819\n222        X4 30  6.567423 0.1741785\n223        X4 31  5.987617 0.1741783\n224        X4 32  5.632509 0.1741783\n225        X4 33  5.766929 0.1741783\n226        X4 34  6.194798 0.1741783\n227        X4 35  5.839490 0.1741783\n228        X4 36  5.439849 0.1741783\n229        X4 37  5.571196 0.1741783\n230        X4 38  5.441013 0.1741783\n231        X4 39  5.789045 0.1741783\n232        X4 40  5.882568 0.1741783\n233        X4 41  5.946580 0.1741783\n234        X4 42  6.311905 0.1741783\n235        X4 43  6.856442 0.1741783\n236        X4 44  7.130780 0.1741783\n237        X4 45  6.824052 0.1741783\n238        X4 46  6.895713 0.1741783\n239        X4 47  6.950323 0.1741783\n240        X4 48  6.596971 0.1741783\n241        X4 49  6.475406 0.1741783\n242        X4 50  6.942293 0.1741783\n243        X4 51  7.161438 0.1741783\n244        X4 52  7.520161 0.1741783\n245        X4 53  7.583207 0.1741783\n246        X4 54  7.547176 0.1741785\n247        X4 55  7.314424 0.1741821\n248        X4 56  7.225032 0.1742451\n249        X4 57  7.323705 0.1753519\n250        X4 58  7.256983 0.1938185\n251        X4 59  7.301560 0.3970951\n252        X4 60  7.346138 0.5270706\n253        X4 61  7.390715 0.6308108\n254        X4 62  7.435292 0.7197507\n255        X4 63  7.479869 0.7988492\n256        X4 64  7.524446 0.8707921\n\n\nLets look at the correlation plots\n\n\nCode\nQ2.2 &lt;- coef(m2.2, type = \"matrix\")$Q\ncorrmat2.2 &lt;- diag(1/sqrt(diag(Q2.2))) %*% Q2.2 %*% diag(1/sqrt(diag(Q2.2)))\ncorrplot(corrmat2.2)\n\n\n\n\n\nAgain we see large balloon shaped confidence intervals in the sections of rivers that are missing data. This appears in both the estimated underlying states and the fitted value plots. The Walla Walla groups seems to have the widest confidence intervals of all of the river systems. Again six of the rivers have ACF plots with multiple significant lags. The Yakima Population group continues to be the only group with an underlying state which is estimated to have a positive drift. The variance-covariance matrix was allowed to vary the variance of each underlying state independently of one another, but we see that it estimated each to be equal.\n\n\n\nHypothesis 2.3\nThe Q matrix for the variance of process errors is “equal variance and covariance” so they each have equal variance and they are all correlated equally to one another.\n\n\nCode\nmod.list2.3 &lt;- list(\n  U = U_mat2,\n  R = \"diagonal and equal\",\n  Q = \"equalvarcov\",\n  Z = Z_mat2\n)\nm2.3 &lt;- MARSS(dat, model = mod.list2.3)\n\n\nSuccess! abstol and log-log tests passed at 124 iterations.\nAlert: conv.test.slope.tol is 0.5.\nTest with smaller values (&lt;0.1) to ensure convergence.\n\nMARSS fit is\nEstimation method: kem \nConvergence test: conv.test.slope.tol = 0.5, abstol = 0.001\nEstimation converged in 124 iterations. \nLog-likelihood: -493.5994 \nAIC: 1031.199   AICc: 1032.863   \n \n                                                                                Estimate\nA.Steelhead (Middle Columbia River DPS) Deschutes River Westside - summer      -0.888148\nA.Steelhead (Middle Columbia River DPS) Fifteenmile Creek - winter             -1.138376\nA.Steelhead (Middle Columbia River DPS) John Day River Upper Mainstem - summer -0.776205\nA.Steelhead (Middle Columbia River DPS) Middle Fork John Day River - summer    -0.342198\nA.Steelhead (Middle Columbia River DPS) North Fork John Day River - summer     -0.108360\nA.Steelhead (Middle Columbia River DPS) South Fork John Day River - summer     -1.180730\nA.Steelhead (Middle Columbia River DPS) Umatilla River - summer                 1.762920\nA.Steelhead (Middle Columbia River DPS) Walla Walla River - summer              0.648925\nA.Steelhead (Middle Columbia River DPS) Satus Creek - summer                   -0.022687\nA.Steelhead (Middle Columbia River DPS) Toppenish Creek - summer               -0.842115\nA.Steelhead (Middle Columbia River DPS) Yakima River Upper Mainstem - summer   -1.643436\nR.diag                                                                          0.203477\nU.Cascades                                                                     -0.027075\nU.JohnDay                                                                      -0.016191\nU.Walla                                                                        -0.000538\nU.Yakima                                                                        0.029454\nQ.diag                                                                          0.131007\nQ.offdiag                                                                       0.107523\nx0.X1                                                                           7.702035\nx0.X2                                                                           8.051674\nx0.X3                                                                           5.371496\nx0.X4                                                                           4.934851\nInitial states (x0) defined at t=0\n\nStandard errors have not been calculated. \nUse MARSSparamCIs to compute CIs and bias estimates.\n\n\nThis model seemed to improve performance. Let’s take a look at some plots:\n\n\nCode\nautoplot(m2.3)\n\n\nMARSSresiduals.tt1 reported warnings. See msg element of returned residuals object.\nMARSSresiduals.tT reported warnings. See msg element or attribute of returned residuals object.\n\n\n\n\n\nplot.type = xtT \n\n\n\n\n\nHit &lt;Return&gt; to see next plot (q to exit): \n\n\n\n\n\nplot.type = fitted.ytT \n\n\n\n\n\nHit &lt;Return&gt; to see next plot (q to exit): \n\n\n\n\n\nplot.type = model.resids.ytt1 \n\n\n\n\n\nHit &lt;Return&gt; to see next plot (q to exit): \n\n\n\n\n\nplot.type = std.model.resids.ytT \n\n\n\n\n\nHit &lt;Return&gt; to see next plot (q to exit): \n\n\n\n\n\nplot.type = std.state.resids.xtT \n\n\n\n\n\nHit &lt;Return&gt; to see next plot (q to exit): \n\n\n\n\n\nplot.type = qqplot.std.model.resids.ytt1 \n\n\n\n\n\nHit &lt;Return&gt; to see next plot (q to exit): \n\n\n\n\n\nplot.type = qqplot.std.state.resids.xtT \n\n\n\n\n\nFinished plots.\n\n\n\n\n\nplot.type = acf.std.model.resids.ytt1 \n\n\n\n\n\nHit &lt;Return&gt; to see next plot (q to exit): \n\n\nThis model fits each of the four states quite well, which indicates that the variability and the relationships between the different state variables are correlated.\nLet’s looks at the estimates\n\n\nCode\nprint(fit2.1_smooth&lt;-tsSmooth(m2.3))\n\n\n    .rownames  t .estimate       .se\n1          X1  1  7.679999 0.2650985\n2          X1  2  7.554402 0.3297505\n3          X1  3  7.622308 0.3657975\n4          X1  4  7.687265 0.3996797\n5          X1  5  7.544701 0.4256157\n6          X1  6  7.761073 0.4407865\n7          X1  7  7.941290 0.4580768\n8          X1  8  8.231850 0.4583931\n9          X1  9  7.919789 0.4554334\n10         X1 10  7.322210 0.4588414\n11         X1 11  7.632272 0.4602276\n12         X1 12  7.816635 0.4587336\n13         X1 13  7.801844 0.4623177\n14         X1 14  7.622790 0.4454760\n15         X1 15  7.403017 0.4332599\n16         X1 16  7.475021 0.4192874\n17         X1 17  7.698017 0.3983516\n18         X1 18  7.641013 0.3688196\n19         X1 19  7.619257 0.3347281\n20         X1 20  7.435176 0.2678647\n21         X1 21  6.719368 0.2460981\n22         X1 22  7.214218 0.2367835\n23         X1 23  7.241020 0.2322616\n24         X1 24  7.229720 0.2294442\n25         X1 25  7.107792 0.2260253\n26         X1 26  7.224311 0.2121113\n27         X1 27  7.669985 0.1914103\n28         X1 28  7.830052 0.1868241\n29         X1 29  7.920000 0.1836535\n30         X1 30  7.716768 0.1824754\n31         X1 31  7.039661 0.1800981\n32         X1 32  6.899473 0.1671936\n33         X1 33  6.783124 0.1661814\n34         X1 34  7.216908 0.1649353\n35         X1 35  6.690985 0.1638188\n36         X1 36  6.650792 0.1637458\n37         X1 37  6.626149 0.1637050\n38         X1 38  6.772343 0.1636900\n39         X1 39  7.052139 0.1636848\n40         X1 40  7.176321 0.1636831\n41         X1 41  7.381858 0.1636825\n42         X1 42  7.770564 0.1636823\n43         X1 43  8.104614 0.1636823\n44         X1 44  8.432610 0.1636822\n45         X1 45  8.019875 0.1636822\n46         X1 46  7.672487 0.1636822\n47         X1 47  7.429594 0.1636822\n48         X1 48  7.108466 0.1636823\n49         X1 49  7.149351 0.1636823\n50         X1 50  7.043170 0.1636825\n51         X1 51  7.270280 0.1636833\n52         X1 52  7.452399 0.1636857\n53         X1 53  7.461205 0.1636938\n54         X1 54  7.356775 0.1637206\n55         X1 55  7.073927 0.1638092\n56         X1 56  7.098320 0.1640990\n57         X1 57  7.108591 0.1650029\n58         X1 58  6.671678 0.1672115\n59         X1 59  6.055079 0.1761959\n60         X1 60  6.142143 0.1952092\n61         X1 61  6.046543 0.3178464\n62         X1 62  6.084194 0.4055980\n63         X1 63  6.026514 0.4763777\n64         X1 64  5.968835 0.4916565\n65         X2  1  8.035477 0.2105232\n66         X2  2  7.893099 0.2198613\n67         X2  3  7.986489 0.1985492\n68         X2  4  8.076284 0.1967827\n69         X2  5  7.913234 0.1955579\n70         X2  6  8.187515 0.1802085\n71         X2  7  8.417743 0.1934622\n72         X2  8  8.782414 0.1659005\n73         X2  9  8.412848 0.1604277\n74         X2 10  7.673789 0.1603737\n75         X2 11  8.008154 0.1602917\n76         X2 12  8.195929 0.1620392\n77         X2 13  8.139262 0.2027759\n78         X2 14  7.894870 0.1619881\n79         X2 15  7.615286 0.1605936\n80         X2 16  7.704351 0.1716713\n81         X2 17  8.007474 0.1716844\n82         X2 18  7.951137 0.1609358\n83         X2 19  7.941633 0.1710309\n84         X2 20  7.658223 0.1571733\n85         X2 21  6.726006 0.1566277\n86         X2 22  7.403991 0.1563886\n87         X2 23  7.507776 0.1562679\n88         X2 24  7.536882 0.1561995\n89         X2 25  7.456583 0.1560761\n90         X2 26  7.586937 0.1499994\n91         X2 27  8.220858 0.1474178\n92         X2 28  8.488518 0.1468510\n93         X2 29  8.609111 0.1454430\n94         X2 30  8.381163 0.1453711\n95         X2 31  7.467425 0.1453824\n96         X2 32  7.221325 0.1448887\n97         X2 33  7.115969 0.1522491\n98         X2 34  7.662973 0.1447902\n99         X2 35  7.097467 0.1434237\n100        X2 36  6.957747 0.1433133\n101        X2 37  6.702468 0.1432720\n102        X2 38  6.738727 0.1432604\n103        X2 39  6.796580 0.1432574\n104        X2 40  6.815921 0.1432566\n105        X2 41  7.001888 0.1432564\n106        X2 42  7.465437 0.1432564\n107        X2 43  7.811301 0.1432564\n108        X2 44  8.212619 0.1432564\n109        X2 45  7.683851 0.1432564\n110        X2 46  7.224817 0.1432564\n111        X2 47  6.986235 0.1432564\n112        X2 48  6.766593 0.1432564\n113        X2 49  7.195513 0.1432564\n114        X2 50  7.459095 0.1432564\n115        X2 51  7.890082 0.1432565\n116        X2 52  7.989030 0.1432567\n117        X2 53  8.178417 0.1432580\n118        X2 54  8.288222 0.1432640\n119        X2 55  8.074659 0.1432906\n120        X2 56  8.073611 0.1434078\n121        X2 57  7.988326 0.1438807\n122        X2 58  7.506660 0.1451158\n123        X2 59  6.961352 0.1503533\n124        X2 60  7.135457 0.1574503\n125        X2 61  7.080571 0.2480325\n126        X2 62  7.122422 0.3251280\n127        X2 63  7.068943 0.3426167\n128        X2 64  7.015464 0.2415542\n129        X3  1  5.371011 0.2620614\n130        X3  2  5.266964 0.3198927\n131        X3  3  5.356421 0.3455408\n132        X3  4  5.442928 0.3662312\n133        X3  5  5.321914 0.3756477\n134        X3  6  5.559837 0.3695945\n135        X3  7  5.761604 0.3620747\n136        X3  8  6.073714 0.3262558\n137        X3  9  5.783203 0.2663743\n138        X3 10  5.228790 0.2481150\n139        X3 11  5.614471 0.2411266\n140        X3 12  5.867890 0.2379654\n141        X3 13  5.923945 0.2473907\n142        X3 14  5.803326 0.2362413\n143        X3 15  5.627565 0.2361897\n144        X3 16  5.730435 0.2385645\n145        X3 17  5.954209 0.2384201\n146        X3 18  5.916290 0.2356233\n147        X3 19  5.909731 0.2376566\n148        X3 20  5.816978 0.2303588\n149        X3 21  5.137070 0.2303613\n150        X3 22  5.582810 0.2300795\n151        X3 23  5.508637 0.2297083\n152        X3 24  5.426463 0.2292237\n153        X3 25  5.375298 0.2280932\n154        X3 26  5.569574 0.2192922\n155        X3 27  6.094969 0.2144689\n156        X3 28  6.294744 0.2086529\n157        X3 29  6.446516 0.1890842\n158        X3 30  6.383981 0.1850527\n159        X3 31  5.749788 0.1837072\n160        X3 32  5.639067 0.1818837\n161        X3 33  5.610449 0.1818937\n162        X3 34  6.215866 0.1787332\n163        X3 35  5.824218 0.1661419\n164        X3 36  5.751968 0.1643331\n165        X3 37  5.654386 0.1638739\n166        X3 38  5.658578 0.1637399\n167        X3 39  5.725422 0.1636996\n168        X3 40  5.715262 0.1636875\n169        X3 41  5.744699 0.1636838\n170        X3 42  6.038934 0.1636827\n171        X3 43  6.321901 0.1636824\n172        X3 44  6.679984 0.1636823\n173        X3 45  6.292162 0.1636822\n174        X3 46  6.060606 0.1636822\n175        X3 47  6.007249 0.1636822\n176        X3 48  5.780247 0.1636822\n177        X3 49  5.949915 0.1636823\n178        X3 50  6.023690 0.1636825\n179        X3 51  6.299605 0.1636831\n180        X3 52  6.513956 0.1636852\n181        X3 53  6.535664 0.1636919\n182        X3 54  6.445011 0.1637142\n183        X3 55  6.179534 0.1637875\n184        X3 56  6.122078 0.1640250\n185        X3 57  6.263928 0.1647499\n186        X3 58  5.936153 0.1663259\n187        X3 59  5.358101 0.1727617\n188        X3 60  5.428180 0.1784394\n189        X3 61  5.314320 0.2214705\n190        X3 62  5.399328 0.2961709\n191        X3 63  5.368185 0.4046793\n192        X3 64  5.337043 0.4383811\n193        X4  1  4.968000 0.2655764\n194        X4  2  4.897588 0.3312851\n195        X4  3  5.020679 0.3689042\n196        X4  4  5.140821 0.4047240\n197        X4  5  5.053442 0.4329998\n198        X4  6  5.324999 0.4510238\n199        X4  7  5.560401 0.4714453\n200        X4  8  5.906146 0.4757664\n201        X4  9  5.649270 0.4774463\n202        X4 10  5.106876 0.4856858\n203        X4 11  5.472123 0.4924413\n204        X4 12  5.711671 0.4969650\n205        X4 13  5.752064 0.5065872\n206        X4 14  5.628196 0.4982696\n207        X4 15  5.463608 0.4949762\n208        X4 16  5.590796 0.4910321\n209        X4 17  5.868978 0.4823767\n210        X4 18  5.867159 0.4686506\n211        X4 19  5.900587 0.4549984\n212        X4 20  5.771692 0.4294378\n213        X4 21  5.093553 0.4093963\n214        X4 22  5.641645 0.3861658\n215        X4 23  5.704353 0.3581628\n216        X4 24  5.729533 0.3233829\n217        X4 25  5.695979 0.2758431\n218        X4 26  5.878230 0.1745965\n219        X4 27  6.423379 0.1597556\n220        X4 28  6.598968 0.1567423\n221        X4 29  6.720779 0.1546361\n222        X4 30  6.620543 0.1543396\n223        X4 31  5.879602 0.1542316\n224        X4 32  5.666074 0.1531829\n225        X4 33  5.671142 0.1538983\n226        X4 34  6.261813 0.1530866\n227        X4 35  5.744849 0.1521346\n228        X4 36  5.542098 0.1520922\n229        X4 37  5.494209 0.1520633\n230        X4 38  5.510089 0.1520536\n231        X4 39  5.754283 0.1520507\n232        X4 40  5.830006 0.1520499\n233        X4 41  5.955980 0.1520496\n234        X4 42  6.387962 0.1520495\n235        X4 43  6.853467 0.1520495\n236        X4 44  7.288771 0.1520495\n237        X4 45  6.924455 0.1520495\n238        X4 46  6.805447 0.1520495\n239        X4 47  6.783949 0.1520495\n240        X4 48  6.488091 0.1520495\n241        X4 49  6.621212 0.1520496\n242        X4 50  6.861908 0.1520500\n243        X4 51  7.210833 0.1520514\n244        X4 52  7.488076 0.1520566\n245        X4 53  7.586880 0.1520759\n246        X4 54  7.568503 0.1521474\n247        X4 55  7.303963 0.1524140\n248        X4 56  7.294868 0.1534136\n249        X4 57  7.406147 0.1572435\n250        X4 58  7.118231 0.1735254\n251        X4 59  6.620667 0.2716668\n252        X4 60  6.766655 0.3264219\n253        X4 61  6.727584 0.4020779\n254        X4 62  6.821763 0.4727441\n255        X4 63  6.820613 0.5343203\n256        X4 64  6.819462 0.5476073\n\n\nAnd the corrplot:\n\n\nCode\nQ2.3 &lt;- coef(m2.3, type = \"matrix\")$Q\ncorrmat2.3 &lt;- diag(1/sqrt(diag(Q2.3))) %*% Q2.3 %*% diag(1/sqrt(diag(Q2.3)))\ncorrplot(corrmat2.3)\n\n\n\n\n\nCode\n#corrplot mirrors what we told MARSS to use as a Q matrix (equal variance and covariance)\n\n\nThis is the first set of models in the Hypothesis Two group that has not generated balloon shaped confidence intervals on the underlying states or the fitted values plots. Indicating that we have a better model when we allow the models to be correlated with one another. We potentially see some structuring in the residuals. Fewer of the ACF plots show strong structuring in the residuals, some of the plots with significant lags onlt have a few and we see less of the sine wave shaped plots than in the previous Hypothesis Two models. The variance covariate plot was forced to be equal, but we see that correlation between the major groups is estimated to be quite high.\n\n\n\nHypothesis 2.4\nThe Q matrix for the variance of process errors is “unconstrained”. Meaning that each hidden state is allowed to vary separately as is the correlation between the underlying states.\n\n\nCode\nmod.list2.4 &lt;- list(\n  U = U_mat2,\n  R = \"diagonal and equal\",\n  Q = \"unconstrained\",\n  Z = Z_mat2\n)\nm2.4 &lt;- MARSS(dat, model = mod.list2.4, method=\"BFGS\")\n\n\nSuccess! Converged in 898 iterations.\nFunction MARSSkfas used for likelihood calculation.\n\nMARSS fit is\nEstimation method: BFGS \nEstimation converged in 898 iterations. \nLog-likelihood: -472.9633 \nAIC: 1005.927   AICc: 1009.027   \n \n                                                                               Estimate\nA.Steelhead (Middle Columbia River DPS) Deschutes River Westside - summer      -0.88369\nA.Steelhead (Middle Columbia River DPS) Fifteenmile Creek - winter             -1.13428\nA.Steelhead (Middle Columbia River DPS) John Day River Upper Mainstem - summer -0.77827\nA.Steelhead (Middle Columbia River DPS) Middle Fork John Day River - summer    -0.34595\nA.Steelhead (Middle Columbia River DPS) North Fork John Day River - summer     -0.11152\nA.Steelhead (Middle Columbia River DPS) South Fork John Day River - summer     -1.18329\nA.Steelhead (Middle Columbia River DPS) Umatilla River - summer                 1.72948\nA.Steelhead (Middle Columbia River DPS) Walla Walla River - summer              0.64196\nA.Steelhead (Middle Columbia River DPS) Satus Creek - summer                   -0.02319\nA.Steelhead (Middle Columbia River DPS) Toppenish Creek - summer               -0.84264\nA.Steelhead (Middle Columbia River DPS) Yakima River Upper Mainstem - summer   -1.64395\nR.diag                                                                          0.20323\nU.Cascades                                                                     -0.02396\nU.JohnDay                                                                      -0.01680\nU.Walla                                                                        -0.00129\nU.Yakima                                                                        0.03104\nQ.(1,1)                                                                         0.08502\nQ.(2,1)                                                                         0.10316\nQ.(3,1)                                                                         0.04997\nQ.(4,1)                                                                         0.08806\nQ.(2,2)                                                                         0.21631\nQ.(3,2)                                                                         0.07749\nQ.(4,2)                                                                         0.15904\nQ.(3,3)                                                                         0.03249\nQ.(4,3)                                                                         0.06141\nQ.(4,4)                                                                         0.12110\nx0.X1                                                                           7.40935\nx0.X2                                                                           8.06903\nx0.X3                                                                           5.71073\nx0.X4                                                                           4.80279\nInitial states (x0) defined at t=0\n\nStandard errors have not been calculated. \nUse MARSSparamCIs to compute CIs and bias estimates.\n\n\nThis model, with the unconstrained Q matrix, had a hard time converging, thus the Broyden-Fletcher-Goldfarb-Shanno method was used to help with optimization. Thus far, this model has the lowest AICc.\n\n\nCode\nautoplot(m2.4)\n\n\nMARSSresiduals.tt1 reported warnings. See msg element of returned residuals object.\nMARSSresiduals.tT reported warnings. See msg element or attribute of returned residuals object.\n\n\n\n\n\nplot.type = xtT \n\n\n\n\n\nHit &lt;Return&gt; to see next plot (q to exit): \n\n\n\n\n\nplot.type = fitted.ytT \n\n\n\n\n\nHit &lt;Return&gt; to see next plot (q to exit): \n\n\n\n\n\nplot.type = model.resids.ytt1 \n\n\n\n\n\nHit &lt;Return&gt; to see next plot (q to exit): \n\n\n\n\n\nplot.type = std.model.resids.ytT \n\n\n\n\n\nHit &lt;Return&gt; to see next plot (q to exit): \n\n\n\n\n\nplot.type = std.state.resids.xtT \n\n\n\n\n\nHit &lt;Return&gt; to see next plot (q to exit): \n\n\n\n\n\nplot.type = qqplot.std.model.resids.ytt1 \n\n\n\n\n\nHit &lt;Return&gt; to see next plot (q to exit): \n\n\n\n\n\nplot.type = qqplot.std.state.resids.xtT \n\n\n\n\n\nFinished plots.\n\n\n\n\n\nplot.type = acf.std.model.resids.ytt1 \n\n\n\n\n\nHit &lt;Return&gt; to see next plot (q to exit): \n\n\nThese model fits looks pretty well, with tight confidence intervals and the model is fitting the data well. All of the residuals looks like they are normal, and standardized residuals may show a bit of structure in a few graphs but otherwise white noise. Again X4 (Yakima) is the only positive drift value. On the hidden state’s random walk John Day and Yakima have strongest correlation and then John Day and Cascades I expect this to be seen in the corrplot.\nLets look at estimates:\n\n\nCode\nprint(fit2.1_smooth&lt;-tsSmooth(m2.4))\n\n\n    .rownames  t .estimate        .se\n1          X1  1  7.385345 0.21476146\n2          X1  2  7.277819 0.27458508\n3          X1  3  7.321792 0.31027387\n4          X1  4  7.359836 0.33938396\n5          X1  5  7.231228 0.35963874\n6          X1  6  7.368759 0.37010615\n7          X1  7  7.462571 0.37846826\n8          X1  8  7.656250 0.37388232\n9          X1  9  7.449173 0.36376338\n10         X1 10  7.036249 0.35792488\n11         X1 11  7.275639 0.35307567\n12         X1 12  7.424726 0.34837298\n13         X1 13  7.441529 0.34879991\n14         X1 14  7.338854 0.33823956\n15         X1 15  7.205429 0.33177698\n16         X1 16  7.267186 0.32461019\n17         X1 17  7.454489 0.31343325\n18         X1 18  7.414468 0.29652331\n19         X1 19  7.442327 0.27544268\n20         X1 20  7.318096 0.23393681\n21         X1 21  6.773208 0.21873060\n22         X1 22  7.172334 0.21211017\n23         X1 23  7.202546 0.20886472\n24         X1 24  7.219120 0.20648012\n25         X1 25  7.154770 0.20257520\n26         X1 26  7.286097 0.18428765\n27         X1 27  7.643514 0.16929659\n28         X1 28  7.764405 0.16565017\n29         X1 29  7.827422 0.16288196\n30         X1 30  7.660195 0.16187541\n31         X1 31  7.106520 0.15997551\n32         X1 32  6.955777 0.15079386\n33         X1 33  6.857928 0.14936964\n34         X1 34  7.184499 0.14875863\n35         X1 35  6.752368 0.14736809\n36         X1 36  6.690761 0.14719083\n37         X1 37  6.670119 0.14715174\n38         X1 38  6.787869 0.14714218\n39         X1 39  7.036715 0.14713980\n40         X1 40  7.152745 0.14713920\n41         X1 41  7.334489 0.14713906\n42         X1 42  7.678443 0.14713902\n43         X1 43  7.993513 0.14713901\n44         X1 44  8.284049 0.14713901\n45         X1 45  7.968828 0.14713901\n46         X1 46  7.715970 0.14713901\n47         X1 47  7.520754 0.14713901\n48         X1 48  7.221997 0.14713901\n49         X1 49  7.204344 0.14713901\n50         X1 50  7.121700 0.14713903\n51         X1 51  7.320153 0.14713910\n52         X1 52  7.476780 0.14713938\n53         X1 53  7.479820 0.14714050\n54         X1 54  7.352149 0.14714498\n55         X1 55  7.065461 0.14716289\n56         X1 56  7.055895 0.14723465\n57         X1 57  7.026528 0.14752546\n58         X1 58  6.638505 0.14881267\n59         X1 59  6.077321 0.16061937\n60         X1 60  6.078157 0.17802625\n61         X1 61  5.942462 0.26903136\n62         X1 62  5.912932 0.34756233\n63         X1 63  5.894156 0.40562762\n64         X1 64  5.875380 0.42499966\n65         X2  1  8.052222 0.23629095\n66         X2  2  7.860272 0.24223974\n67         X2  3  7.985995 0.21372325\n68         X2  4  8.099287 0.21246962\n69         X2  5  7.863130 0.21167423\n70         X2  6  8.185033 0.19213872\n71         X2  7  8.415261 0.21034651\n72         X2  8  8.854896 0.17596283\n73         X2  9  8.454201 0.17372945\n74         X2 10  7.586722 0.17371819\n75         X2 11  8.005137 0.17374387\n76         X2 12  8.225963 0.17503934\n77         X2 13  8.171307 0.23324755\n78         X2 14  7.891189 0.17503137\n79         X2 15  7.568357 0.17401329\n80         X2 16  7.664595 0.18857281\n81         X2 17  8.060585 0.18856276\n82         X2 18  7.969773 0.17423742\n83         X2 19  8.034681 0.18817893\n84         X2 20  7.695725 0.17237526\n85         X2 21  6.508551 0.17202292\n86         X2 22  7.413741 0.17191400\n87         X2 23  7.527911 0.17185602\n88         X2 24  7.561927 0.17182151\n89         X2 25  7.444617 0.17159669\n90         X2 26  7.563667 0.15324449\n91         X2 27  8.308817 0.15293291\n92         X2 28  8.572261 0.15273076\n93         X2 29  8.709822 0.15208565\n94         X2 30  8.509600 0.15199352\n95         X2 31  7.412962 0.15188322\n96         X2 32  7.133278 0.15183911\n97         X2 33  7.071631 0.16085563\n98         X2 34  7.804746 0.15165069\n99         X2 35  7.111383 0.15094333\n100        X2 36  6.925811 0.15092453\n101        X2 37  6.627376 0.15091812\n102        X2 38  6.667187 0.15091636\n103        X2 39  6.740224 0.15091591\n104        X2 40  6.718918 0.15091580\n105        X2 41  6.877080 0.15091577\n106        X2 42  7.404853 0.15091576\n107        X2 43  7.808958 0.15091576\n108        X2 44  8.322028 0.15091576\n109        X2 45  7.687611 0.15091576\n110        X2 46  7.244139 0.15091576\n111        X2 47  7.029712 0.15091576\n112        X2 48  6.699442 0.15091576\n113        X2 49  7.171283 0.15091576\n114        X2 50  7.514692 0.15091576\n115        X2 51  8.005832 0.15091578\n116        X2 52  8.021065 0.15091583\n117        X2 53  8.249096 0.15091604\n118        X2 54  8.378383 0.15091689\n119        X2 55  8.069200 0.15092026\n120        X2 56  8.092236 0.15093362\n121        X2 57  8.001672 0.15098513\n122        X2 58  7.488129 0.15127544\n123        X2 59  6.877173 0.16807349\n124        X2 60  7.115984 0.17242630\n125        X2 61  7.030345 0.29382288\n126        X2 62  7.007748 0.41854178\n127        X2 63  7.001829 0.42338072\n128        X2 64  6.995910 0.24856107\n129        X3  1  5.709433 0.10758928\n130        X3  2  5.645386 0.12536917\n131        X3  3  5.695147 0.13111978\n132        X3  4  5.740455 0.14012400\n133        X3  5  5.660571 0.14652392\n134        X3  6  5.780615 0.14730996\n135        X3  7  5.867816 0.15244573\n136        X3  8  6.030037 0.14642240\n137        X3  9  5.891207 0.14159404\n138        X3 10  5.591238 0.13951885\n139        X3 11  5.766136 0.13789426\n140        X3 12  5.871674 0.13638990\n141        X3 13  5.878191 0.14397185\n142        X3 14  5.799592 0.13307431\n143        X3 15  5.701920 0.13092971\n144        X3 16  5.752685 0.13041221\n145        X3 17  5.904516 0.12686411\n146        X3 18  5.883702 0.11957259\n147        X3 19  5.916357 0.11469629\n148        X3 20  5.819042 0.09717085\n149        X3 21  5.411987 0.09264785\n150        X3 22  5.734975 0.09082354\n151        X3 23  5.777600 0.08994520\n152        X3 24  5.800440 0.08928906\n153        X3 25  5.765887 0.08800156\n154        X3 26  5.846142 0.07661352\n155        X3 27  6.124367 0.07124654\n156        X3 28  6.227550 0.07035147\n157        X3 29  6.286419 0.06927177\n158        X3 30  6.199157 0.06904153\n159        X3 31  5.805663 0.06858812\n160        X3 32  5.709686 0.06528808\n161        X3 33  5.673265 0.06626322\n162        X3 34  5.938060 0.06484371\n163        X3 35  5.663332 0.06417165\n164        X3 36  5.617144 0.06413062\n165        X3 37  5.564952 0.06412318\n166        X3 38  5.625613 0.06412143\n167        X3 39  5.740039 0.06412099\n168        X3 40  5.788766 0.06412089\n169        X3 41  5.894570 0.06412086\n170        X3 42  6.127683 0.06412085\n171        X3 43  6.327422 0.06412085\n172        X3 44  6.538411 0.06412085\n173        X3 45  6.317054 0.06412085\n174        X3 46  6.153681 0.06412085\n175        X3 47  6.053625 0.06412085\n176        X3 48  5.894526 0.06412085\n177        X3 49  5.985949 0.06412085\n178        X3 50  6.030001 0.06412085\n179        X3 51  6.203487 0.06412087\n180        X3 52  6.273721 0.06412092\n181        X3 53  6.327545 0.06412112\n182        X3 54  6.315623 0.06412194\n183        X3 55  6.164810 0.06412520\n184        X3 56  6.176124 0.06413834\n185        X3 57  6.159226 0.06419309\n186        X3 58  5.933793 0.06450285\n187        X3 59  5.627440 0.07224816\n188        X3 60  5.682459 0.07652311\n189        X3 61  5.627852 0.12808587\n190        X3 62  5.623472 0.17574581\n191        X3 63  5.626083 0.19504169\n192        X3 64  5.628695 0.17203601\n193        X4  1  4.833806 0.18458545\n194        X4  2  4.736050 0.19733531\n195        X4  3  4.871863 0.18623811\n196        X4  4  4.998536 0.19133763\n197        X4  5  4.868277 0.19514972\n198        X4  6  5.148331 0.18685147\n199        X4  7  5.360982 0.19846691\n200        X4  8  5.727599 0.17901389\n201        X4  9  5.476364 0.17268352\n202        X4 10  4.887642 0.17102224\n203        X4 11  5.257701 0.16988712\n204        X4 12  5.483822 0.16925301\n205        X4 13  5.507086 0.20042777\n206        X4 14  5.360501 0.16705555\n207        X4 15  5.178971 0.16534006\n208        X4 16  5.303967 0.17148168\n209        X4 17  5.643419 0.16928282\n210        X4 18  5.626599 0.15812125\n211        X4 19  5.722094 0.16141900\n212        X4 20  5.534467 0.14003719\n213        X4 21  4.717683 0.13757115\n214        X4 22  5.420945 0.13677086\n215        X4 23  5.545450 0.13640066\n216        X4 24  5.619407 0.13610714\n217        X4 25  5.579116 0.13516927\n218        X4 26  5.740903 0.11554605\n219        X4 27  6.338303 0.11152776\n220        X4 28  6.579209 0.11127518\n221        X4 29  6.728296 0.11019088\n222        X4 30  6.605441 0.11013800\n223        X4 31  5.837498 0.11002121\n224        X4 32  5.674767 0.10760895\n225        X4 33  5.654921 0.11274062\n226        X4 34  6.234908 0.10752385\n227        X4 35  5.739332 0.10663252\n228        X4 36  5.660890 0.10662007\n229        X4 37  5.531798 0.10661942\n230        X4 38  5.643584 0.10661930\n231        X4 39  5.819110 0.10661928\n232        X4 40  5.895315 0.10661927\n233        X4 41  6.096695 0.10661927\n234        X4 42  6.565036 0.10661927\n235        X4 43  6.952715 0.10661927\n236        X4 44  7.394416 0.10661927\n237        X4 45  6.972468 0.10661927\n238        X4 46  6.681124 0.10661927\n239        X4 47  6.540588 0.10661927\n240        X4 48  6.298405 0.10661927\n241        X4 49  6.611380 0.10661927\n242        X4 50  6.828648 0.10661927\n243        X4 51  7.226385 0.10661927\n244        X4 52  7.337359 0.10661927\n245        X4 53  7.517790 0.10661928\n246        X4 54  7.597098 0.10661933\n247        X4 55  7.371106 0.10661953\n248        X4 56  7.429860 0.10662036\n249        X4 57  7.416816 0.10662542\n250        X4 58  7.039246 0.10678487\n251        X4 59  6.546836 0.12136884\n252        X4 60  6.732688 0.12386670\n253        X4 61  6.686196 0.21923225\n254        X4 62  6.712012 0.31225201\n255        X4 63  6.751047 0.32794004\n256        X4 64  6.790081 0.22777820\n\n\nlook at corrplot:\n\n\nCode\nQ2.4 &lt;- coef(m2.4, type = \"matrix\")$Q\ncorrmat2.4 &lt;- diag(1/sqrt(diag(Q2.4))) %*% Q2.4 %*% diag(1/sqrt(diag(Q2.4)))\ncorrplot(corrmat2.4)\n\n\n\n\n\nAll groups are highly correlated with each other, which means there is likely a lot of connectivity between these four DPCs.\nAgain we see that confidence intervals have some shape to them and fit the predicted values better than the balloon shaped confidence intervals seen in previous Hypotheis Two plots. Plots of the residuals look very similar to the other plots from this Hypothesis group. ACF plots are similar to the Hypothesis 2.3 and do not show as much structuring as previous plots.\nThe Q matrix was allowed to be unconstrained. We see very different variances estimated by the MARSS model, ranging from 0.03 to .21. Covariance between the underlying states allowed for better fits to data and realistic estimates for streams with missing data."
  },
  {
    "objectID": "Lab-2/Final_Write_ups/Lab-2-team-4_final.html#hypothesis-3",
    "href": "Lab-2/Final_Write_ups/Lab-2-team-4_final.html#hypothesis-3",
    "title": "11  Team 4 - Lab 2",
    "section": "Hypothesis 3",
    "text": "Hypothesis 3\nDescription of H3: There are two underlying states, one representing the northern area (Walla Walla and Yakima) and one representing the southern area (John Day and Cascades).\n\\[\n\\text{Hypothesis Three}:\n\\begin{bmatrix}\ny_1\\\\\ny_2\\\\\ny_3\\\\\ny_4\\\\\ny_5\\\\\ny_6\\\\\ny_7\\\\\ny_8\\\\\ny_9\\\\\ny_{10}\\\\\ny_{11}\\\\\ny_{12}\\\\\ny_{13}\\\\\ny_{14}\\\\\ny_{15}\\\\\n\\end{bmatrix}_t=\n\\begin{bmatrix}\n1 & 0 \\\\\n1 & 0 \\\\\n1 & 0 \\\\\n1 & 0 \\\\\n1 & 0 \\\\\n1 & 0 \\\\\n1 & 0 \\\\\n1 & 0 \\\\\n0 & 1 \\\\\n0 & 1 \\\\\n0 & 1 \\\\\n0 & 1 \\\\\n0 & 1 \\\\\n0 & 1 \\\\\n0 & 1 \\\\\n\\end{bmatrix}*\n\\begin{bmatrix}\nx_1\\\\\nx_2\\\\\n\\end{bmatrix}_t+\n\\begin{bmatrix}\na_1\\\\\na_2\\\\\na_3\\\\\na_4\\\\\na_5\\\\\na_6\\\\\na_7\\\\\na_8\\\\\na_9\\\\\na_{10}\\\\\na_{11}\\\\\na_{12}\\\\\na_{13}\\\\\na_{14}\\\\\na_{15}\\\\\n\\end{bmatrix}+\n\\begin{bmatrix}\nw_1\\\\\nw_2\\\\\nw_3\\\\\nw_4\\\\\nw_5\\\\\nw_6\\\\\nw_7\\\\\nw_8\\\\\nw_9\\\\\nw_{10}\\\\\nw_{11}\\\\\nw_{12}\\\\\nw_{13}\\\\\nw_{14}\\\\\nw_{15}\\\\\n\\end{bmatrix}_t\n\\]\n\\[\n\\text{Where }w \\sim MVN\n\\begin{pmatrix}\n\\text{0,}\\begin{bmatrix}\nR\n\\end{bmatrix}\n\\end{pmatrix}\n\\]\nWe start by establishing our U matrix and our Z matrix.\n\n\nCode\nU_mat3 &lt;- matrix(c(\"North\",\"South\"),2,1)\n#make Z matrix correspond to 2 hidden states\nZ_mat3 &lt;- matrix(c(rep(c(0,1),8),\n                     rep(c(1,0),7)),15,2, byrow=TRUE)\n\n\n\nHypothesis 3.1\nThe Q matrix for the variance of process errors is “diagonal and equal” meaning each state (x) model has the same process error but they are not correlated to each other.\n\n\nCode\nmod.list3.1 &lt;- list(\n  U = U_mat3,\n  R = \"diagonal and equal\",\n  Q = \"diagonal and equal\",\n  Z = Z_mat3\n)\nm3.1 &lt;- MARSS(dat, model = mod.list3.1)\n\n\nSuccess! abstol and log-log tests passed at 78 iterations.\nAlert: conv.test.slope.tol is 0.5.\nTest with smaller values (&lt;0.1) to ensure convergence.\n\nMARSS fit is\nEstimation method: kem \nConvergence test: conv.test.slope.tol = 0.5, abstol = 0.001\nEstimation converged in 78 iterations. \nLog-likelihood: -544.2628 \nAIC: 1126.526   AICc: 1127.77   \n \n                                                                                           Estimate\nA.Steelhead (Middle Columbia River DPS) Deschutes River Westside - summer                  -0.91016\nA.Steelhead (Middle Columbia River DPS) Fifteenmile Creek - winter                         -1.16869\nA.Steelhead (Middle Columbia River DPS) John Day River Lower Mainstem Tributaries - summer  0.27060\nA.Steelhead (Middle Columbia River DPS) John Day River Upper Mainstem - summer             -0.50637\nA.Steelhead (Middle Columbia River DPS) Middle Fork John Day River - summer                -0.07071\nA.Steelhead (Middle Columbia River DPS) North Fork John Day River - summer                  0.16262\nA.Steelhead (Middle Columbia River DPS) South Fork John Day River - summer                 -0.90975\nA.Steelhead (Middle Columbia River DPS) Umatilla River - summer                             1.77502\nA.Steelhead (Middle Columbia River DPS) Walla Walla River - summer                          0.58813\nA.Steelhead (Middle Columbia River DPS) Naches River - summer                               0.51010\nA.Steelhead (Middle Columbia River DPS) Satus Creek - summer                                0.48692\nA.Steelhead (Middle Columbia River DPS) Toppenish Creek - summer                           -0.33251\nA.Steelhead (Middle Columbia River DPS) Yakima River Upper Mainstem - summer               -1.13383\nR.diag                                                                                      0.25108\nU.North                                                                                    -0.00129\nU.South                                                                                    -0.01638\nQ.diag                                                                                      0.12901\nx0.X1                                                                                       5.47856\nx0.X2                                                                                       7.77580\nInitial states (x0) defined at t=0\n\nStandard errors have not been calculated. \nUse MARSSparamCIs to compute CIs and bias estimates.\n\n\nThis AICc is bad compared to Hypothesis 2. This is either because there is coorelation between the hidden states, as supported by hypothesis two, or the assumption that there are only two underlying states is incorrect. Plots\n\n\nCode\nautoplot(m3.1)\n\n\n\n\n\nplot.type = xtT \n\n\n\n\n\nHit &lt;Return&gt; to see next plot (q to exit): \n\n\n\n\n\nplot.type = fitted.ytT \n\n\n\n\n\nHit &lt;Return&gt; to see next plot (q to exit): \n\n\n\n\n\nplot.type = model.resids.ytt1 \n\n\n\n\n\nHit &lt;Return&gt; to see next plot (q to exit): \n\n\n\n\n\nplot.type = std.model.resids.ytT \n\n\n\n\n\nHit &lt;Return&gt; to see next plot (q to exit): \n\n\n\n\n\nplot.type = std.state.resids.xtT \n\n\n\n\n\nHit &lt;Return&gt; to see next plot (q to exit): \n\n\n\n\n\nplot.type = qqplot.std.model.resids.ytt1 \n\n\n\n\n\nHit &lt;Return&gt; to see next plot (q to exit): \n\n\n\n\n\nplot.type = qqplot.std.state.resids.xtT \n\n\n\n\n\nFinished plots.\n\n\n\n\n\nplot.type = acf.std.model.resids.ytt1 \n\n\n\n\n\nHit &lt;Return&gt; to see next plot (q to exit): \n\n\nThe southern area (John Day and Cascades) are more informed by data and the fits look ok. The northern area (Yakima and Walla Walla) have large confidence intercals in the early period. The models are fitting data pretty well for individual streams, and while residuals don’t seem to have too much structure, some outliers seem to be present for the southern area. The Residuals normality tests are a little wobbly, which is troubling.\nLet’s look at estimates:\n\n\nCode\nprint(fit3.1_smooth&lt;-tsSmooth(m3.1))\n\n\n    .rownames  t .estimate       .se\n1          X1  1  5.477532 0.3407100\n2          X1  2  5.476506 0.4542230\n3          X1  3  5.475479 0.5202938\n4          X1  4  5.474453 0.5560977\n5          X1  5  5.473426 0.5673937\n6          X1  6  5.472400 0.5556783\n7          X1  7  5.471374 0.5193969\n8          X1  8  5.470347 0.4526806\n9          X1  9  5.469321 0.3379619\n10         X1 10  5.409468 0.3032387\n11         X1 11  5.593148 0.2940892\n12         X1 12  5.742870 0.2917994\n13         X1 13  5.842543 0.2912346\n14         X1 14  5.851348 0.2910958\n15         X1 15  5.826841 0.2910617\n16         X1 16  5.852416 0.2910533\n17         X1 17  5.812934 0.2910510\n18         X1 18  5.788579 0.2910496\n19         X1 19  5.687514 0.2910459\n20         X1 20  5.817422 0.2910314\n21         X1 21  5.784991 0.2909723\n22         X1 22  5.643900 0.2907315\n23         X1 23  5.386686 0.2897482\n24         X1 24  5.204488 0.2857076\n25         X1 25  5.313979 0.2686194\n26         X1 26  5.530135 0.1832141\n27         X1 27  5.931645 0.1775040\n28         X1 28  6.040779 0.1766790\n29         X1 29  6.146173 0.1666108\n30         X1 30  6.148702 0.1661743\n31         X1 31  5.602851 0.1661559\n32         X1 32  5.308922 0.1661545\n33         X1 33  5.352153 0.1661401\n34         X1 34  5.845502 0.1657966\n35         X1 35  5.602765 0.1574038\n36         X1 36  5.308721 0.1571094\n37         X1 37  5.388751 0.1570993\n38         X1 38  5.276800 0.1570990\n39         X1 39  5.473139 0.1570990\n40         X1 40  5.560416 0.1570990\n41         X1 41  5.564462 0.1570990\n42         X1 42  5.872493 0.1570990\n43         X1 43  6.303023 0.1570990\n44         X1 44  6.596640 0.1570990\n45         X1 45  6.270092 0.1570990\n46         X1 46  6.242309 0.1570990\n47         X1 47  6.319448 0.1570990\n48         X1 48  6.022024 0.1570990\n49         X1 49  5.961986 0.1570990\n50         X1 50  6.275040 0.1570990\n51         X1 51  6.461784 0.1570990\n52         X1 52  6.865492 0.1570990\n53         X1 53  6.860231 0.1570990\n54         X1 54  6.754002 0.1570990\n55         X1 55  6.546166 0.1570990\n56         X1 56  6.356627 0.1571012\n57         X1 57  6.578965 0.1571650\n58         X1 58  6.355875 0.1590227\n59         X1 59  5.672335 0.2061349\n60         X1 60  5.468549 0.2138452\n61         X1 61  5.306958 0.2503255\n62         X1 62  5.398691 0.3355052\n63         X1 63  5.397404 0.4914989\n64         X1 64  5.396116 0.6087516\n65         X2  1  7.759752 0.2202349\n66         X2  2  7.637348 0.2324296\n67         X2  3  7.717964 0.2123216\n68         X2  4  7.798715 0.2101655\n69         X2  5  7.666740 0.2085890\n70         X2  6  7.920741 0.1935479\n71         X2  7  8.147444 0.2058659\n72         X2  8  8.481707 0.1788469\n73         X2  9  8.153114 0.1772968\n74         X2 10  7.479031 0.1772216\n75         X2 11  7.738313 0.1773593\n76         X2 12  7.906992 0.1800140\n77         X2 13  7.827395 0.2241976\n78         X2 14  7.601318 0.1800538\n79         X2 15  7.341338 0.1780793\n80         X2 16  7.415448 0.1902864\n81         X2 17  7.732970 0.1903161\n82         X2 18  7.688971 0.1785688\n83         X2 19  7.718670 0.1888305\n84         X2 20  7.349959 0.1671700\n85         X2 21  6.464567 0.1661979\n86         X2 22  7.101052 0.1661569\n87         X2 23  7.267216 0.1661552\n88         X2 24  7.345209 0.1661545\n89         X2 25  7.217818 0.1661401\n90         X2 26  7.295775 0.1657966\n91         X2 27  7.831481 0.1574038\n92         X2 28  8.142726 0.1571094\n93         X2 29  8.262019 0.1570990\n94         X2 30  7.928431 0.1570908\n95         X2 31  7.161937 0.1568585\n96         X2 32  7.007047 0.1498967\n97         X2 33  6.886865 0.1566127\n98         X2 34  7.225984 0.1496821\n99         X2 35  6.716098 0.1494812\n100        X2 36  6.730607 0.1494755\n101        X2 37  6.445811 0.1494753\n102        X2 38  6.625537 0.1494753\n103        X2 39  6.706132 0.1494753\n104        X2 40  6.753399 0.1494753\n105        X2 41  7.047831 0.1494753\n106        X2 42  7.488069 0.1494753\n107        X2 43  7.769284 0.1494753\n108        X2 44  8.115274 0.1494753\n109        X2 45  7.741188 0.1494753\n110        X2 46  7.222219 0.1494753\n111        X2 47  6.850099 0.1494753\n112        X2 48  6.710536 0.1494753\n113        X2 49  7.105604 0.1494753\n114        X2 50  7.114939 0.1494753\n115        X2 51  7.536639 0.1494753\n116        X2 52  7.528176 0.1494753\n117        X2 53  7.710539 0.1494753\n118        X2 54  7.777051 0.1494753\n119        X2 55  7.560708 0.1494753\n120        X2 56  7.681707 0.1494753\n121        X2 57  7.458852 0.1494754\n122        X2 58  6.943258 0.1494796\n123        X2 59  6.468715 0.1496290\n124        X2 60  6.640272 0.1548093\n125        X2 61  6.791326 0.2822300\n126        X2 62  6.770239 0.3682749\n127        X2 63  6.749153 0.3644883\n128        X2 64  6.728066 0.2670760\n\n\nOur corrplots are as expected.\n\n\nCode\nQ3.1 &lt;- coef(m3.1, type = \"matrix\")$Q\ncorrmat3.1 &lt;- diag(1/sqrt(diag(Q3.1))) %*% Q3.1 %*% diag(1/sqrt(diag(Q3.1)))\ncorrplot(corrmat3.1)\n\n\n\n\n\nThis model probably isn’t it. It’s failing our normality tests, and while it seems to fit the data ok, it didn’t perform as well as hypothesis 2. Let’s see how our models improve with different, but uncorrelated process errors.\n\n\nHypothesis 3.2\nThe Q matrix for the variance of process errors is “diagonal and unequal” meaning each of the four underlying states’ process error can be different but they are not correlated to each other.\n\n\nCode\nmod.list3.2 &lt;- list(\n  U = U_mat3,\n  R = \"diagonal and equal\",\n  Q = \"diagonal and unequal\",\n  Z = Z_mat3\n)\nm3.2 &lt;- MARSS(dat, model = mod.list3.2)\n\n\nSuccess! abstol and log-log tests passed at 81 iterations.\nAlert: conv.test.slope.tol is 0.5.\nTest with smaller values (&lt;0.1) to ensure convergence.\n\nMARSS fit is\nEstimation method: kem \nConvergence test: conv.test.slope.tol = 0.5, abstol = 0.001\nEstimation converged in 81 iterations. \nLog-likelihood: -542.9455 \nAIC: 1125.891   AICc: 1127.268   \n \n                                                                                           Estimate\nA.Steelhead (Middle Columbia River DPS) Deschutes River Westside - summer                  -0.91086\nA.Steelhead (Middle Columbia River DPS) Fifteenmile Creek - winter                         -1.17082\nA.Steelhead (Middle Columbia River DPS) John Day River Lower Mainstem Tributaries - summer  0.26954\nA.Steelhead (Middle Columbia River DPS) John Day River Upper Mainstem - summer             -0.50751\nA.Steelhead (Middle Columbia River DPS) Middle Fork John Day River - summer                -0.07285\nA.Steelhead (Middle Columbia River DPS) North Fork John Day River - summer                  0.16063\nA.Steelhead (Middle Columbia River DPS) South Fork John Day River - summer                 -0.91143\nA.Steelhead (Middle Columbia River DPS) Umatilla River - summer                             1.77489\nA.Steelhead (Middle Columbia River DPS) Walla Walla River - summer                          0.58698\nA.Steelhead (Middle Columbia River DPS) Naches River - summer                               0.51639\nA.Steelhead (Middle Columbia River DPS) Satus Creek - summer                                0.49321\nA.Steelhead (Middle Columbia River DPS) Toppenish Creek - summer                           -0.32622\nA.Steelhead (Middle Columbia River DPS) Yakima River Upper Mainstem - summer               -1.12754\nR.diag                                                                                      0.25075\nU.North                                                                                    -0.00136\nU.South                                                                                    -0.01641\nQ.(X1,X1)                                                                                   0.08331\nQ.(X2,X2)                                                                                   0.16535\nx0.X1                                                                                       5.50140\nx0.X2                                                                                       7.78310\nInitial states (x0) defined at t=0\n\nStandard errors have not been calculated. \nUse MARSSparamCIs to compute CIs and bias estimates.\n\n\nThis model also has a higher AICc than some of the other models, indicating that the assumption that process errors ARE correlated is likely a better assumption than the diagonal and unequal assumption for the Q matrix.\nLet’s look at some plots:\n\n\nCode\nautoplot(m3.1)\n\n\n\n\n\nplot.type = xtT \n\n\n\n\n\nHit &lt;Return&gt; to see next plot (q to exit): \n\n\n\n\n\nplot.type = fitted.ytT \n\n\n\n\n\nHit &lt;Return&gt; to see next plot (q to exit): \n\n\n\n\n\nplot.type = model.resids.ytt1 \n\n\n\n\n\nHit &lt;Return&gt; to see next plot (q to exit): \n\n\n\n\n\nplot.type = std.model.resids.ytT \n\n\n\n\n\nHit &lt;Return&gt; to see next plot (q to exit): \n\n\n\n\n\nplot.type = std.state.resids.xtT \n\n\n\n\n\nHit &lt;Return&gt; to see next plot (q to exit): \n\n\n\n\n\nplot.type = qqplot.std.model.resids.ytt1 \n\n\n\n\n\nHit &lt;Return&gt; to see next plot (q to exit): \n\n\n\n\n\nplot.type = qqplot.std.state.resids.xtT \n\n\n\n\n\nFinished plots.\n\n\n\n\n\nplot.type = acf.std.model.resids.ytt1 \n\n\n\n\n\nHit &lt;Return&gt; to see next plot (q to exit): \n\n\nThis model isn’t performing great, which is unsurprising given the lack of correlation in the process errors. The curvy QQ plots remain, and the model CIs are high where there is a lack of data.\nWhat are the estimates\n\n\nCode\nprint(fit3.2_smooth&lt;-tsSmooth(m3.2))\n\n\n    .rownames  t .estimate       .se\n1          X1  1  5.500332 0.2742685\n2          X1  2  5.499266 0.3664410\n3          X1  3  5.498199 0.4209126\n4          X1  4  5.497133 0.4515401\n5          X1  5  5.496067 0.4630790\n6          X1  6  5.495000 0.4569775\n7          X1  7  5.493934 0.4324897\n8          X1  8  5.492867 0.3861332\n9          X1  9  5.491801 0.3081931\n10         X1 10  5.460124 0.2786224\n11         X1 11  5.602698 0.2684516\n12         X1 12  5.726445 0.2651077\n13         X1 13  5.812331 0.2640265\n14         X1 14  5.829385 0.2636788\n15         X1 15  5.817562 0.2635670\n16         X1 16  5.834995 0.2635307\n17         X1 17  5.804533 0.2635174\n18         X1 18  5.781017 0.2635080\n19         X1 19  5.705348 0.2634890\n20         X1 20  5.784903 0.2634330\n21         X1 21  5.748648 0.2632594\n22         X1 22  5.630018 0.2627178\n23         X1 23  5.431652 0.2610216\n24         X1 24  5.296685 0.2556594\n25         X1 25  5.380906 0.2381627\n26         X1 26  5.556286 0.1725567\n27         X1 27  5.903273 0.1654518\n28         X1 28  6.022408 0.1641138\n29         X1 29  6.116927 0.1559043\n30         X1 30  6.094959 0.1552958\n31         X1 31  5.619612 0.1552517\n32         X1 32  5.348883 0.1552460\n33         X1 33  5.384132 0.1552109\n34         X1 34  5.782483 0.1547257\n35         X1 35  5.587600 0.1478297\n36         X1 36  5.332215 0.1474053\n37         X1 37  5.381273 0.1473798\n38         X1 38  5.296750 0.1473782\n39         X1 39  5.465891 0.1473781\n40         X1 40  5.555599 0.1473781\n41         X1 41  5.588227 0.1473781\n42         X1 42  5.880610 0.1473781\n43         X1 43  6.279009 0.1473781\n44         X1 44  6.540975 0.1473781\n45         X1 45  6.280441 0.1473781\n46         X1 46  6.245085 0.1473781\n47         X1 47  6.291962 0.1473781\n48         X1 48  6.040674 0.1473781\n49         X1 49  5.994183 0.1473781\n50         X1 50  6.271738 0.1473781\n51         X1 51  6.467882 0.1473781\n52         X1 52  6.826429 0.1473781\n53         X1 53  6.837641 0.1473781\n54         X1 54  6.738971 0.1473782\n55         X1 55  6.547584 0.1473787\n56         X1 56  6.379265 0.1473882\n57         X1 57  6.537841 0.1475465\n58         X1 58  6.320714 0.1501573\n59         X1 59  5.732040 0.1883841\n60         X1 60  5.512645 0.1986660\n61         X1 61  5.364056 0.2330335\n62         X1 62  5.416816 0.3051711\n63         X1 63  5.415452 0.4200432\n64         X1 64  5.414088 0.5096500\n65         X2  1  7.766962 0.2351280\n66         X2  2  7.622386 0.2453036\n67         X2  3  7.717172 0.2212643\n68         X2  4  7.808000 0.2193272\n69         X2  5  7.641634 0.2179910\n70         X2  6  7.918381 0.2007342\n71         X2  7  8.150000 0.2157196\n72         X2  8  8.522150 0.1849422\n73         X2  9  8.171678 0.1836566\n74         X2 10  7.433739 0.1836104\n75         X2 11  7.739025 0.1836966\n76         X2 12  7.925102 0.1859744\n77         X2 13  7.846976 0.2376917\n78         X2 14  7.604267 0.1859973\n79         X2 15  7.322485 0.1842727\n80         X2 16  7.402016 0.1980347\n81         X2 17  7.754528 0.1980546\n82         X2 18  7.695965 0.1847102\n83         X2 19  7.749760 0.1968408\n84         X2 20  7.369675 0.1724763\n85         X2 21  6.398769 0.1716947\n86         X2 22  7.114896 0.1716713\n87         X2 23  7.276464 0.1716706\n88         X2 24  7.355724 0.1716703\n89         X2 25  7.207262 0.1716623\n90         X2 26  7.274827 0.1713939\n91         X2 27  7.841225 0.1621584\n92         X2 28  8.157388 0.1619307\n93         X2 29  8.287742 0.1619252\n94         X2 30  7.948475 0.1619208\n95         X2 31  7.139006 0.1617414\n96         X2 32  7.001448 0.1540665\n97         X2 33  6.871753 0.1615547\n98         X2 34  7.256012 0.1539051\n99         X2 35  6.701961 0.1537510\n100        X2 36  6.739168 0.1537480\n101        X2 37  6.430277 0.1537480\n102        X2 38  6.628441 0.1537480\n103        X2 39  6.707556 0.1537480\n104        X2 40  6.744264 0.1537480\n105        X2 41  7.042841 0.1537480\n106        X2 42  7.495064 0.1537480\n107        X2 43  7.772957 0.1537480\n108        X2 44  8.146208 0.1537480\n109        X2 45  7.751391 0.1537480\n110        X2 46  7.217308 0.1537480\n111        X2 47  6.838627 0.1537480\n112        X2 48  6.690731 0.1537480\n113        X2 49  7.117334 0.1537480\n114        X2 50  7.103633 0.1537480\n115        X2 51  7.552358 0.1537480\n116        X2 52  7.524800 0.1537480\n117        X2 53  7.717185 0.1537480\n118        X2 54  7.788801 0.1537480\n119        X2 55  7.552251 0.1537480\n120        X2 56  7.696871 0.1537480\n121        X2 57  7.473047 0.1537480\n122        X2 58  6.941272 0.1537496\n123        X2 59  6.444554 0.1538332\n124        X2 60  6.642405 0.1580316\n125        X2 61  6.818049 0.3027063\n126        X2 62  6.789694 0.4061910\n127        X2 63  6.761339 0.3986559\n128        X2 64  6.732984 0.2709930\n\n\nAnd the corr plot is as expected.\n\n\nCode\nQ3.2 &lt;- coef(m3.2, type = \"matrix\")$Q\ncorrmat3.2 &lt;- diag(1/sqrt(diag(Q3.2))) %*% Q3.2 %*% diag(1/sqrt(diag(Q3.2)))\ncorrplot(corrmat3.2)\n\n\n\n\n\n\n\nHypothesis 3.3\nThe Q matrix for the variance of process errors is “equal variance and covariance” so they each have equal variance and they are all correlated equally to one another. I would guess this model performs better than the other too, let’s see!\n\n\nCode\nmod.list3.3 &lt;- list(\n  U = U_mat3,\n  R = \"diagonal and equal\",\n  Q = \"equalvarcov\",\n  Z = Z_mat3\n)\nm3.3 &lt;- MARSS(dat, model = mod.list3.3)\n\n\nSuccess! abstol and log-log tests passed at 83 iterations.\nAlert: conv.test.slope.tol is 0.5.\nTest with smaller values (&lt;0.1) to ensure convergence.\n\nMARSS fit is\nEstimation method: kem \nConvergence test: conv.test.slope.tol = 0.5, abstol = 0.001\nEstimation converged in 83 iterations. \nLog-likelihood: -535.7385 \nAIC: 1111.477   AICc: 1112.854   \n \n                                                                                           Estimate\nA.Steelhead (Middle Columbia River DPS) Deschutes River Westside - summer                  -0.91224\nA.Steelhead (Middle Columbia River DPS) Fifteenmile Creek - winter                         -1.16892\nA.Steelhead (Middle Columbia River DPS) John Day River Lower Mainstem Tributaries - summer  0.27394\nA.Steelhead (Middle Columbia River DPS) John Day River Upper Mainstem - summer             -0.50618\nA.Steelhead (Middle Columbia River DPS) Middle Fork John Day River - summer                -0.07051\nA.Steelhead (Middle Columbia River DPS) North Fork John Day River - summer                  0.16385\nA.Steelhead (Middle Columbia River DPS) South Fork John Day River - summer                 -0.90916\nA.Steelhead (Middle Columbia River DPS) Umatilla River - summer                             1.79638\nA.Steelhead (Middle Columbia River DPS) Walla Walla River - summer                          0.59791\nA.Steelhead (Middle Columbia River DPS) Naches River - summer                               0.51607\nA.Steelhead (Middle Columbia River DPS) Satus Creek - summer                                0.49288\nA.Steelhead (Middle Columbia River DPS) Toppenish Creek - summer                           -0.32654\nA.Steelhead (Middle Columbia River DPS) Yakima River Upper Mainstem - summer               -1.12786\nR.diag                                                                                      0.25814\nU.North                                                                                     0.00518\nU.South                                                                                    -0.01709\nQ.diag                                                                                      0.12193\nQ.offdiag                                                                                   0.11142\nx0.X1                                                                                       5.34577\nx0.X2                                                                                       7.77382\nInitial states (x0) defined at t=0\n\nStandard errors have not been calculated. \nUse MARSSparamCIs to compute CIs and bias estimates.\n\n\nThe AICc is a little better! It seems our correlation hunch is further supported! Let’s look at plots:\n\n\nCode\nautoplot(m3.3)\n\n\nMARSSresiduals.tt1 reported warnings. See msg element of returned residuals object.\nMARSSresiduals.tT reported warnings. See msg element or attribute of returned residuals object.\n\n\n\n\n\nplot.type = xtT \n\n\n\n\n\nHit &lt;Return&gt; to see next plot (q to exit): \n\n\n\n\n\nplot.type = fitted.ytT \n\n\n\n\n\nHit &lt;Return&gt; to see next plot (q to exit): \n\n\n\n\n\nplot.type = model.resids.ytt1 \n\n\n\n\n\nHit &lt;Return&gt; to see next plot (q to exit): \n\n\n\n\n\nplot.type = std.model.resids.ytT \n\n\n\n\n\nHit &lt;Return&gt; to see next plot (q to exit): \n\n\n\n\n\nplot.type = std.state.resids.xtT \n\n\n\n\n\nHit &lt;Return&gt; to see next plot (q to exit): \n\n\n\n\n\nplot.type = qqplot.std.model.resids.ytt1 \n\n\n\n\n\nHit &lt;Return&gt; to see next plot (q to exit): \n\n\n\n\n\nplot.type = qqplot.std.state.resids.xtT \n\n\n\n\n\nFinished plots.\n\n\n\n\n\nplot.type = acf.std.model.resids.ytt1 \n\n\n\n\n\nHit &lt;Return&gt; to see next plot (q to exit): \n\n\nThis model looks ok! The confidence intervals are wider where there is a lack of data, but we are not seeing them balloon out! The residuals don’t seem to have clear structure, but there are some outliers, and generally the qq plots by stream appear to be pretty normal, but the two states have lifting at the left tail.\nLet’s look at estimates:\n\n\nCode\nprint(fit3.3_smooth&lt;-tsSmooth(m3.3))\n\n\n    .rownames  t .estimate       .se\n1          X1  1  5.351407 0.2412707\n2          X1  2  5.266779 0.2799122\n3          X1  3  5.357551 0.2886001\n4          X1  4  5.449578 0.3020571\n5          X1  5  5.360014 0.3100310\n6          X1  6  5.605853 0.3055782\n7          X1  7  5.829720 0.3093909\n8          X1  8  6.138486 0.2850231\n9          X1  9  5.838832 0.2507264\n10         X1 10  5.279523 0.2407967\n11         X1 11  5.609977 0.2362207\n12         X1 12  5.837270 0.2336443\n13         X1 13  5.860791 0.2480968\n14         X1 14  5.719186 0.2313194\n15         X1 15  5.535996 0.2307949\n16         X1 16  5.641896 0.2346076\n17         X1 17  5.885416 0.2342537\n18         X1 18  5.862653 0.2297497\n19         X1 19  5.850084 0.2335542\n20         X1 20  5.679782 0.2254517\n21         X1 21  4.982414 0.2246429\n22         X1 22  5.439854 0.2232919\n23         X1 23  5.439488 0.2209958\n24         X1 24  5.395131 0.2168108\n25         X1 25  5.323457 0.2069917\n26         X1 26  5.446944 0.1603950\n27         X1 27  5.962044 0.1540204\n28         X1 28  6.159541 0.1524173\n29         X1 29  6.297717 0.1456389\n30         X1 30  6.193282 0.1450369\n31         X1 31  5.500153 0.1449027\n32         X1 32  5.319753 0.1434734\n33         X1 33  5.314327 0.1447162\n34         X1 34  5.883725 0.1429597\n35         X1 35  5.473143 0.1376154\n36         X1 36  5.341949 0.1372639\n37         X1 37  5.261609 0.1371955\n38         X1 38  5.283662 0.1371752\n39         X1 39  5.436894 0.1371686\n40         X1 40  5.480690 0.1371663\n41         X1 41  5.583503 0.1371656\n42         X1 42  5.960942 0.1371653\n43         X1 43  6.342470 0.1371652\n44         X1 44  6.734310 0.1371652\n45         X1 45  6.372694 0.1371652\n46         X1 46  6.179288 0.1371652\n47         X1 47  6.120074 0.1371652\n48         X1 48  5.875766 0.1371652\n49         X1 49  6.045535 0.1371653\n50         X1 50  6.215955 0.1371656\n51         X1 51  6.534057 0.1371665\n52         X1 52  6.761419 0.1371689\n53         X1 53  6.833614 0.1371764\n54         X1 54  6.792080 0.1371984\n55         X1 55  6.536485 0.1372640\n56         X1 56  6.498104 0.1374625\n57         X1 57  6.573531 0.1381062\n58         X1 58  6.212645 0.1409725\n59         X1 59  5.519559 0.1721202\n60         X1 60  5.551588 0.1814538\n61         X1 61  5.479609 0.2308747\n62         X1 62  5.553883 0.3016721\n63         X1 63  5.615950 0.3797782\n64         X1 64  5.678016 0.3799765\n65         X2  1  7.756908 0.2181015\n66         X2  2  7.641215 0.2311551\n67         X2  3  7.717470 0.2120982\n68         X2  4  7.795097 0.2098575\n69         X2  5  7.674003 0.2081810\n70         X2  6  7.919954 0.1936586\n71         X2  7  8.141859 0.2052310\n72         X2  8  8.456673 0.1787285\n73         X2  9  8.105670 0.1708058\n74         X2 10  7.446948 0.1707942\n75         X2 11  7.730770 0.1708981\n76         X2 12  7.904078 0.1730917\n77         X2 13  7.852826 0.2096064\n78         X2 14  7.632574 0.1730308\n79         X2 15  7.381793 0.1713448\n80         X2 16  7.462041 0.1817109\n81         X2 17  7.719821 0.1817115\n82         X2 18  7.675684 0.1716658\n83         X2 19  7.647297 0.1803186\n84         X2 20  7.392278 0.1616181\n85         X2 21  6.597330 0.1606881\n86         X2 22  7.150785 0.1605891\n87         X2 23  7.238095 0.1605235\n88         X2 24  7.258492 0.1604774\n89         X2 25  7.182506 0.1603449\n90         X2 26  7.299760 0.1489555\n91         X2 27  7.846425 0.1427498\n92         X2 28  8.077230 0.1420697\n93         X2 29  8.189245 0.1402641\n94         X2 30  7.971439 0.1401209\n95         X2 31  7.173748 0.1398115\n96         X2 32  6.944035 0.1349607\n97         X2 33  6.840449 0.1394330\n98         X2 34  7.306709 0.1346399\n99         X2 35  6.799289 0.1331625\n100        X2 36  6.678813 0.1331141\n101        X2 37  6.527382 0.1330765\n102        X2 38  6.591068 0.1330617\n103        X2 39  6.738357 0.1330566\n104        X2 40  6.800931 0.1330548\n105        X2 41  6.984804 0.1330542\n106        X2 42  7.402703 0.1330540\n107        X2 43  7.747260 0.1330540\n108        X2 44  8.097587 0.1330540\n109        X2 45  7.639435 0.1330540\n110        X2 46  7.249841 0.1330540\n111        X2 47  7.022615 0.1330540\n112        X2 48  6.769316 0.1330540\n113        X2 49  7.012374 0.1330541\n114        X2 50  7.139664 0.1330543\n115        X2 51  7.480111 0.1330549\n116        X2 52  7.637415 0.1330569\n117        X2 53  7.750222 0.1330626\n118        X2 54  7.766526 0.1330798\n119        X2 55  7.538017 0.1331304\n120        X2 56  7.545266 0.1332777\n121        X2 57  7.519562 0.1336695\n122        X2 58  7.088863 0.1343248\n123        X2 59  6.451847 0.1410203\n124        X2 60  6.565160 0.1462899\n125        X2 61  6.533752 0.2409667\n126        X2 62  6.590072 0.3118246\n127        X2 63  6.635237 0.3398633\n128        X2 64  6.680403 0.2649879\n\n\nLet’s look at the corrplots:\n\n\nCode\nQ3.3 &lt;- coef(m3.3, type = \"matrix\")$Q\ncorrmat3.3 &lt;- diag(1/sqrt(diag(Q3.3))) %*% Q3.3 %*% diag(1/sqrt(diag(Q3.3)))\ncorrplot(corrmat3.3)\n\n\n\n\n\n\n\nHypothesis 3.4\nThe Q matrix for the variance of process errors is “unconstrained”. Meaning that each hidden state is allowed to vary separately as is the correlation between the underlying states.\nI’d expect this model to be the best of hypothesis three, as allowing correlation between the two states seems to improve performance.\n\n\nCode\nmod.list3.4 &lt;- list(\n  U = U_mat3,\n  R = \"diagonal and equal\",\n  Q = \"unconstrained\",\n  Z = Z_mat3\n)\nm3.4 &lt;- MARSS(dat, model = mod.list3.4)\n\n\nSuccess! abstol and log-log tests passed at 156 iterations.\nAlert: conv.test.slope.tol is 0.5.\nTest with smaller values (&lt;0.1) to ensure convergence.\n\nMARSS fit is\nEstimation method: kem \nConvergence test: conv.test.slope.tol = 0.5, abstol = 0.001\nEstimation converged in 156 iterations. \nLog-likelihood: -532.1349 \nAIC: 1106.27   AICc: 1107.787   \n \n                                                                                           Estimate\nA.Steelhead (Middle Columbia River DPS) Deschutes River Westside - summer                  -0.91355\nA.Steelhead (Middle Columbia River DPS) Fifteenmile Creek - winter                         -1.17337\nA.Steelhead (Middle Columbia River DPS) John Day River Lower Mainstem Tributaries - summer  0.27329\nA.Steelhead (Middle Columbia River DPS) John Day River Upper Mainstem - summer             -0.50940\nA.Steelhead (Middle Columbia River DPS) Middle Fork John Day River - summer                -0.07454\nA.Steelhead (Middle Columbia River DPS) North Fork John Day River - summer                  0.16051\nA.Steelhead (Middle Columbia River DPS) South Fork John Day River - summer                 -0.91259\nA.Steelhead (Middle Columbia River DPS) Umatilla River - summer                             1.81473\nA.Steelhead (Middle Columbia River DPS) Walla Walla River - summer                          0.60088\nA.Steelhead (Middle Columbia River DPS) Naches River - summer                               0.53840\nA.Steelhead (Middle Columbia River DPS) Satus Creek - summer                                0.51522\nA.Steelhead (Middle Columbia River DPS) Toppenish Creek - summer                           -0.30421\nA.Steelhead (Middle Columbia River DPS) Yakima River Upper Mainstem - summer               -1.10553\nR.diag                                                                                      0.25947\nU.North                                                                                     0.00786\nU.South                                                                                    -0.01749\nQ.(1,1)                                                                                     0.07814\nQ.(2,1)                                                                                     0.10613\nQ.(2,2)                                                                                     0.15103\nx0.X1                                                                                       5.41086\nx0.X2                                                                                       7.78119\nInitial states (x0) defined at t=0\n\nStandard errors have not been calculated. \nUse MARSSparamCIs to compute CIs and bias estimates.\n\n\nThis model performs the best of hypothesis 3 in terms of AICc.\nLet’s look at plots.\n\n\nCode\nautoplot(m3.4)\n\n\nMARSSresiduals.tt1 reported warnings. See msg element of returned residuals object.\n\n\n\n\n\nplot.type = xtT \n\n\n\n\n\nHit &lt;Return&gt; to see next plot (q to exit): \n\n\n\n\n\nplot.type = fitted.ytT \n\n\n\n\n\nHit &lt;Return&gt; to see next plot (q to exit): \n\n\n\n\n\nplot.type = model.resids.ytt1 \n\n\n\n\n\nHit &lt;Return&gt; to see next plot (q to exit): \n\n\n\n\n\nplot.type = std.model.resids.ytT \n\n\n\n\n\nHit &lt;Return&gt; to see next plot (q to exit): \n\n\n\n\n\nplot.type = std.state.resids.xtT \n\n\n\n\n\nHit &lt;Return&gt; to see next plot (q to exit): \n\n\n\n\n\nplot.type = qqplot.std.model.resids.ytt1 \n\n\n\n\n\nHit &lt;Return&gt; to see next plot (q to exit): \n\n\n\n\n\nplot.type = qqplot.std.state.resids.xtT \n\n\n\n\n\nFinished plots.\n\n\n\n\n\nplot.type = acf.std.model.resids.ytt1 \n\n\n\n\n\nHit &lt;Return&gt; to see next plot (q to exit): \n\n\nThis model isn’t fitting all the data particularly well, and there is CLEAR structure in the residuals in X2 (John Day and Cascades). This model isn’t gonna cut it, but let’s look at the estimates:\n\n\nCode\nprint(fit3.4_smooth&lt;-tsSmooth(m3.4))\n\n\n    .rownames  t .estimate       .se\n1          X1  1  5.418442 0.1727225\n2          X1  2  5.344432 0.1882528\n3          X1  3  5.425942 0.1812055\n4          X1  4  5.506016 0.1857493\n5          X1  5  5.421226 0.1894500\n6          X1  6  5.627329 0.1838281\n7          X1  7  5.807461 0.1934857\n8          X1  8  6.072003 0.1782095\n9          X1  9  5.833735 0.1697881\n10         X1 10  5.353216 0.1688755\n11         X1 11  5.609680 0.1687191\n12         X1 12  5.775760 0.1691062\n13         X1 13  5.772538 0.1898016\n14         X1 14  5.630974 0.1688991\n15         X1 15  5.463751 0.1683718\n16         X1 16  5.546488 0.1735483\n17         X1 17  5.770454 0.1731943\n18         X1 18  5.747545 0.1674021\n19         X1 19  5.757602 0.1719044\n20         X1 20  5.576753 0.1614083\n21         X1 21  4.967975 0.1602269\n22         X1 22  5.410376 0.1589139\n23         X1 23  5.471418 0.1572075\n24         X1 24  5.487648 0.1548610\n25         X1 25  5.423907 0.1505070\n26         X1 26  5.500080 0.1294593\n27         X1 27  5.940052 0.1240356\n28         X1 28  6.135302 0.1225602\n29         X1 29  6.252990 0.1185448\n30         X1 30  6.119486 0.1177983\n31         X1 31  5.525333 0.1174224\n32         X1 32  5.388732 0.1149499\n33         X1 33  5.354597 0.1169278\n34         X1 34  5.781525 0.1143481\n35         X1 35  5.420365 0.1115277\n36         X1 36  5.354754 0.1112398\n37         X1 37  5.251513 0.1111273\n38         X1 38  5.318872 0.1110646\n39         X1 39  5.446545 0.1110275\n40         X1 40  5.502383 0.1110056\n41         X1 41  5.652753 0.1109927\n42         X1 42  6.003675 0.1109854\n43         X1 43  6.316871 0.1109816\n44         X1 44  6.651722 0.1109805\n45         X1 45  6.356882 0.1109816\n46         X1 46  6.131226 0.1109853\n47         X1 47  6.021661 0.1109926\n48         X1 48  5.853327 0.1110054\n49         X1 49  6.063305 0.1110272\n50         X1 50  6.181036 0.1110640\n51         X1 51  6.481281 0.1111257\n52         X1 52  6.625285 0.1112290\n53         X1 53  6.718413 0.1114017\n54         X1 54  6.715974 0.1116902\n55         X1 55  6.514381 0.1121720\n56         X1 56  6.518943 0.1129788\n57         X1 57  6.512852 0.1143713\n58         X1 58  6.179792 0.1173383\n59         X1 59  5.681432 0.1342986\n60         X1 60  5.753569 0.1401443\n61         X1 61  5.693915 0.1938515\n62         X1 62  5.736096 0.2523263\n63         X1 63  5.825363 0.2860757\n64         X1 64  5.914631 0.2440031\n65         X2  1  7.763682 0.2315774\n66         X2  2  7.630067 0.2429479\n67         X2  3  7.717767 0.2205092\n68         X2  4  7.803422 0.2184182\n69         X2  5  7.654466 0.2169355\n70         X2  6  7.919471 0.2005271\n71         X2  7  8.147517 0.2143797\n72         X2  8  8.495685 0.1847808\n73         X2  9  8.128317 0.1782024\n74         X2 10  7.410558 0.1780712\n75         X2 11  7.732657 0.1781893\n76         X2 12  7.926325 0.1802508\n77         X2 13  7.879548 0.2237796\n78         X2 14  7.639940 0.1802776\n79         X2 15  7.368606 0.1787450\n80         X2 16  7.457391 0.1907147\n81         X2 17  7.754819 0.1907242\n82         X2 18  7.700404 0.1791125\n83         X2 19  7.695842 0.1895497\n84         X2 20  7.408694 0.1681428\n85         X2 21  6.522656 0.1673684\n86         X2 22  7.151812 0.1673222\n87         X2 23  7.246456 0.1673037\n88         X2 24  7.272053 0.1672981\n89         X2 25  7.166472 0.1670758\n90         X2 26  7.253030 0.1552215\n91         X2 27  7.850214 0.1484565\n92         X2 28  8.106436 0.1481033\n93         X2 29  8.240223 0.1460178\n94         X2 30  8.004963 0.1458888\n95         X2 31  7.135422 0.1456365\n96         X2 32  6.913538 0.1400904\n97         X2 33  6.812346 0.1453332\n98         X2 34  7.346920 0.1398646\n99         X2 35  6.792440 0.1380915\n100        X2 36  6.682172 0.1380702\n101        X2 37  6.494634 0.1380432\n102        X2 38  6.572670 0.1380243\n103        X2 39  6.715855 0.1380128\n104        X2 40  6.761353 0.1380059\n105        X2 41  6.949232 0.1380019\n106        X2 42  7.395682 0.1379996\n107        X2 43  7.762648 0.1379984\n108        X2 44  8.160508 0.1379981\n109        X2 45  7.675061 0.1379984\n110        X2 46  7.261642 0.1379996\n111        X2 47  7.021384 0.1380019\n112        X2 48  6.749146 0.1380059\n113        X2 49  7.026065 0.1380127\n114        X2 50  7.140479 0.1380242\n115        X2 51  7.529024 0.1380436\n116        X2 52  7.681094 0.1380759\n117        X2 53  7.805863 0.1381301\n118        X2 54  7.814599 0.1382207\n119        X2 55  7.545744 0.1383719\n120        X2 56  7.570675 0.1386212\n121        X2 57  7.539414 0.1390011\n122        X2 58  7.065558 0.1393636\n123        X2 59  6.394764 0.1464324\n124        X2 60  6.516058 0.1499635\n125        X2 61  6.430498 0.2576196\n126        X2 62  6.464893 0.3425179\n127        X2 63  6.563245 0.3690075\n128        X2 64  6.661598 0.2702812\n\n\nAnd finally the corrplots:\n\n\nCode\nQ3.4 &lt;- coef(m3.4, type = \"matrix\")$Q\ncorrmat3.4 &lt;- diag(1/sqrt(diag(Q3.4))) %*% Q3.4 %*% diag(1/sqrt(diag(Q3.4)))\ncorrplot(corrmat3.4)\n\n\n\n\n\nThis hypothesis didn’t perform as well as anticipated. The two underlying states of nature didn’t seem to inform each other very well, and while model fits seemed to improve when the process errors were allowed to correlate, some of the residuals had structure, and residuals didn’t appear to be normal. While this hypothesis explored the north and south areas as being separate, hypothesis 2, with four distinct DPCs performed better."
  },
  {
    "objectID": "Lab-2/Final_Write_ups/Lab-2-team-4_final.html#hypothesis-4",
    "href": "Lab-2/Final_Write_ups/Lab-2-team-4_final.html#hypothesis-4",
    "title": "11  Team 4 - Lab 2",
    "section": "Hypothesis 4:",
    "text": "Hypothesis 4:\nSalmon of the Yakima group have to swim the furthest to reach their spawning ground, including a large bend in the river that heads back west. They are the most isolated group and thus may have their own hidden state while the other 3 major population groups maybe more closely linked to each other due to their closer geographic proximity. Thus, we hypothesize that there may be two underlying states describing the entire system. The first describing just the Yakima group while the second describes the Cascades, John Day, and Walla Walla groups.\n\\[\n\\text{Hypothesis Four}:\n\\begin{bmatrix}\ny_1\\\\\ny_2\\\\\ny_3\\\\\ny_4\\\\\ny_5\\\\\ny_6\\\\\ny_7\\\\\ny_8\\\\\ny_9\\\\\ny_{10}\\\\\ny_{11}\\\\\ny_{12}\\\\\ny_{13}\\\\\ny_{14}\\\\\ny_{15}\\\\\n\\end{bmatrix}_t=\n\\begin{bmatrix}\n1 & 0 \\\\\n1 & 0 \\\\\n1 & 0 \\\\\n1 & 0 \\\\\n1 & 0 \\\\\n1 & 0 \\\\\n1 & 0 \\\\\n1 & 0 \\\\\n1 & 0 \\\\\n1 & 0 \\\\\n1 & 0 \\\\\n0 & 1 \\\\\n0 & 1 \\\\\n0 & 1 \\\\\n0 & 1 \\\\\n\\end{bmatrix}*\n\\begin{bmatrix}\nx_1\\\\\nx_2\\\\\n\\end{bmatrix}_t+\n\\begin{bmatrix}\na_1\\\\\na_2\\\\\na_3\\\\\na_4\\\\\na_5\\\\\na_6\\\\\na_7\\\\\na_8\\\\\na_9\\\\\na_{10}\\\\\na_{11}\\\\\na_{12}\\\\\na_{13}\\\\\na_{14}\\\\\na_{15}\\\\\n\\end{bmatrix}+\n\\begin{bmatrix}\nw_1\\\\\nw_2\\\\\nw_3\\\\\nw_4\\\\\nw_5\\\\\nw_6\\\\\nw_7\\\\\nw_8\\\\\nw_9\\\\\nw_{10}\\\\\nw_{11}\\\\\nw_{12}\\\\\nw_{13}\\\\\nw_{14}\\\\\nw_{15}\\\\\n\\end{bmatrix}_t\n\\] \\[\n\\text{Where }w \\sim MVN\n\\begin{pmatrix}\n\\text{0,}\\begin{bmatrix}\nR\n\\end{bmatrix}\n\\end{pmatrix}\n\\]\n\\[\n\\text{Where }w \\sim MVN\n\\begin{pmatrix}\n\\text{0,}\\begin{bmatrix}\nR\n\\end{bmatrix}\n\\end{pmatrix}\n\\] Hypothesis 4.1: Q matrix is “diagonal and equal” meaning the two hidden, underlying states will have equal variance but will not be correlated to each other.\n\nHypothesis 4.1\nThe Q matrix for the variance of process errors is “diagonal and equal” meaning each state (x) model has the same process error but they are not correlated to each other.\n\n\nCode\nU_mat4 &lt;- matrix(c(\"South_group\",\"Yakima\"),2,1)\n#make Z matrix correspond to 4 hidden states\nZ_mat4 &lt;- matrix(c(rep(c(1,0),3),\n                  rep(c(1,0),5),\n                  rep(c(1,0),3),\n                  rep(c(0,1),4)),15,2, byrow=TRUE)\n\nmod.list4.1 &lt;- list(\n  U = U_mat4,\n  R = \"diagonal and equal\",\n  Q = \"diagonal and equal\",\n  Z = Z_mat4\n)\nm4.1 &lt;- MARSS(dat, model = mod.list4.1)\n\n\nSuccess! abstol and log-log tests passed at 130 iterations.\nAlert: conv.test.slope.tol is 0.5.\nTest with smaller values (&lt;0.1) to ensure convergence.\n\nMARSS fit is\nEstimation method: kem \nConvergence test: conv.test.slope.tol = 0.5, abstol = 0.001\nEstimation converged in 130 iterations. \nLog-likelihood: -539.7939 \nAIC: 1117.588   AICc: 1118.832   \n \n                                                                                           Estimate\nA.Steelhead (Middle Columbia River DPS) Deschutes River Westside - summer                   -0.8890\nA.Steelhead (Middle Columbia River DPS) Fifteenmile Creek - winter                          -1.1568\nA.Steelhead (Middle Columbia River DPS) John Day River Lower Mainstem Tributaries - summer   0.3160\nA.Steelhead (Middle Columbia River DPS) John Day River Upper Mainstem - summer              -0.4616\nA.Steelhead (Middle Columbia River DPS) Middle Fork John Day River - summer                 -0.0255\nA.Steelhead (Middle Columbia River DPS) North Fork John Day River - summer                   0.2078\nA.Steelhead (Middle Columbia River DPS) South Fork John Day River - summer                  -0.8628\nA.Steelhead (Middle Columbia River DPS) Touchet River - summer                              -1.2022\nA.Steelhead (Middle Columbia River DPS) Umatilla River - summer                              0.3662\nA.Steelhead (Middle Columbia River DPS) Walla Walla River - summer                          -0.5185\nA.Steelhead (Middle Columbia River DPS) Satus Creek - summer                                -0.0226\nA.Steelhead (Middle Columbia River DPS) Toppenish Creek - summer                            -0.8420\nA.Steelhead (Middle Columbia River DPS) Yakima River Upper Mainstem - summer                -1.6434\nR.diag                                                                                       0.2567\nU.South_group                                                                               -0.0167\nU.Yakima                                                                                     0.0440\nQ.diag                                                                                       0.1153\nx0.X1                                                                                        7.7289\nx0.X2                                                                                        4.7154\nInitial states (x0) defined at t=0\n\nStandard errors have not been calculated. \nUse MARSSparamCIs to compute CIs and bias estimates.\n\n\nOn first look, this AICc does ok. Let’s look at our plots.\n\n\nCode\nautoplot(m4.1)\n\n\n\n\n\nplot.type = xtT \n\n\n\n\n\nHit &lt;Return&gt; to see next plot (q to exit): \n\n\n\n\n\nplot.type = fitted.ytT \n\n\n\n\n\nHit &lt;Return&gt; to see next plot (q to exit): \n\n\n\n\n\nplot.type = model.resids.ytt1 \n\n\n\n\n\nHit &lt;Return&gt; to see next plot (q to exit): \n\n\n\n\n\nplot.type = std.model.resids.ytT \n\n\n\n\n\nHit &lt;Return&gt; to see next plot (q to exit): \n\n\n\n\n\nplot.type = std.state.resids.xtT \n\n\n\n\n\nHit &lt;Return&gt; to see next plot (q to exit): \n\n\n\n\n\nplot.type = qqplot.std.model.resids.ytt1 \n\n\n\n\n\nHit &lt;Return&gt; to see next plot (q to exit): \n\n\n\n\n\nplot.type = qqplot.std.state.resids.xtT \n\n\n\n\n\nFinished plots.\n\n\n\n\n\nplot.type = acf.std.model.resids.ytt1 \n\n\n\n\n\nHit &lt;Return&gt; to see next plot (q to exit): \n\n\nHUGE CIs on hidden state of Yakima group where data is missing. Let’s makes sense because with no correlation, the Yakima group isn’t being informed by anything.\nYakima continues its positive drift, collective group shows negative drift\nQQ plots for Yakima are clearly not normal, but this is likely because of so much missing data.\nLet’s look at estimates:\n\n\nCode\nprint(fit4.1_smooth&lt;-tsSmooth(m4.1))\n\n\n    .rownames  t .estimate       .se\n1          X1  1  7.712297 0.2143823\n2          X1  2  7.600601 0.2278075\n3          X1  3  7.673852 0.2095918\n4          X1  4  7.749386 0.2073309\n5          X1  5  7.634119 0.2056141\n6          X1  6  7.873875 0.1915571\n7          X1  7  8.087480 0.2025566\n8          X1  8  8.375908 0.1766445\n9          X1  9  7.949571 0.1653731\n10         X1 10  7.296163 0.1647936\n11         X1 11  7.577644 0.1648552\n12         X1 12  7.750212 0.1666618\n13         X1 13  7.680975 0.1993935\n14         X1 14  7.507111 0.1666884\n15         X1 15  7.276062 0.1653717\n16         X1 16  7.354580 0.1748097\n17         X1 17  7.603477 0.1748302\n18         X1 18  7.570314 0.1657402\n19         X1 19  7.537757 0.1737707\n20         X1 20  7.313922 0.1567451\n21         X1 21  6.550545 0.1560083\n22         X1 22  7.076916 0.1559780\n23         X1 23  7.148219 0.1559768\n24         X1 24  7.157472 0.1559763\n25         X1 25  7.092364 0.1559650\n26         X1 26  7.239600 0.1556899\n27         X1 27  7.750147 0.1488156\n28         X1 28  8.017426 0.1483750\n29         X1 29  8.093887 0.1423875\n30         X1 30  7.836010 0.1422058\n31         X1 31  7.126864 0.1420543\n32         X1 32  6.985240 0.1369105\n33         X1 33  6.844887 0.1418969\n34         X1 34  7.245269 0.1366543\n35         X1 35  6.820459 0.1318227\n36         X1 36  6.814317 0.1317161\n37         X1 37  6.578377 0.1317137\n38         X1 38  6.712012 0.1317137\n39         X1 39  6.746773 0.1317137\n40         X1 40  6.805910 0.1317137\n41         X1 41  7.007192 0.1317137\n42         X1 42  7.395275 0.1317137\n43         X1 43  7.658534 0.1317137\n44         X1 44  8.012211 0.1317137\n45         X1 45  7.651067 0.1317137\n46         X1 46  7.208946 0.1317137\n47         X1 47  6.959559 0.1317137\n48         X1 48  6.807582 0.1317137\n49         X1 49  7.131001 0.1317137\n50         X1 50  7.129599 0.1317137\n51         X1 51  7.495275 0.1317137\n52         X1 52  7.603977 0.1317137\n53         X1 53  7.715080 0.1317137\n54         X1 54  7.708201 0.1317137\n55         X1 55  7.505100 0.1317137\n56         X1 56  7.511069 0.1317137\n57         X1 57  7.471765 0.1317137\n58         X1 58  7.028010 0.1317147\n59         X1 59  6.496067 0.1317603\n60         X1 60  6.603709 0.1338499\n61         X1 61  6.575777 0.2086323\n62         X1 62  6.645130 0.2771233\n63         X1 63  6.653042 0.3228770\n64         X1 64  6.660953 0.2608395\n65         X2  1  4.766553 0.3330594\n66         X2  2  4.817707 0.4616513\n67         X2  3  4.868861 0.5536967\n68         X2  4  4.920014 0.6255422\n69         X2  5  4.971168 0.6835868\n70         X2  6  5.022322 0.7311249\n71         X2  7  5.073476 0.7701046\n72         X2  8  5.124629 0.8017752\n73         X2  9  5.175783 0.8269768\n74         X2 10  5.226937 0.8462875\n75         X2 11  5.278091 0.8601043\n76         X2 12  5.329244 0.8686893\n77         X2 13  5.380398 0.8721970\n78         X2 14  5.431552 0.8706887\n79         X2 15  5.482705 0.8641383\n80         X2 16  5.533859 0.8524294\n81         X2 17  5.585013 0.8353453\n82         X2 18  5.636167 0.8125468\n83         X2 19  5.687320 0.7835354\n84         X2 20  5.738474 0.7475882\n85         X2 21  5.789628 0.7036428\n86         X2 22  5.840782 0.6500793\n87         X2 23  5.891935 0.5842584\n88         X2 24  5.943089 0.5013755\n89         X2 25  5.994243 0.3907196\n90         X2 26  6.045396 0.2126290\n91         X2 27  6.400762 0.1910445\n92         X2 28  6.520126 0.1891863\n93         X2 29  6.582926 0.1890349\n94         X2 30  6.528614 0.1890226\n95         X2 31  6.004172 0.1890216\n96         X2 32  5.675394 0.1890215\n97         X2 33  5.784901 0.1890215\n98         X2 34  6.143324 0.1890215\n99         X2 35  5.831863 0.1890215\n100        X2 36  5.474207 0.1890215\n101        X2 37  5.570093 0.1890215\n102        X2 38  5.471317 0.1890215\n103        X2 39  5.779878 0.1890215\n104        X2 40  5.884468 0.1890215\n105        X2 41  5.970907 0.1890215\n106        X2 42  6.323477 0.1890215\n107        X2 43  6.829211 0.1890215\n108        X2 44  7.086948 0.1890215\n109        X2 45  6.837592 0.1890215\n110        X2 46  6.891836 0.1890215\n111        X2 47  6.926740 0.1890215\n112        X2 48  6.618598 0.1890215\n113        X2 49  6.520460 0.1890215\n114        X2 50  6.937462 0.1890215\n115        X2 51  7.163273 0.1890215\n116        X2 52  7.495525 0.1890215\n117        X2 53  7.565650 0.1890216\n118        X2 54  7.531363 0.1890226\n119        X2 55  7.323783 0.1890358\n120        X2 56  7.238950 0.1891984\n121        X2 57  7.318024 0.1911914\n122        X2 58  7.265110 0.2142508\n123        X2 59  7.309085 0.4014966\n124        X2 60  7.353059 0.5258285\n125        X2 61  7.397033 0.6259327\n126        X2 62  7.441008 0.7121010\n127        X2 63  7.484982 0.7889132\n128        X2 64  7.528957 0.8588831\n\n\nThe corrplot is as expected.\n\n\nCode\nQ4.1 &lt;- coef(m4.1, type = \"matrix\")$Q\ncorrmat4.1 &lt;- diag(1/sqrt(diag(Q4.1))) %*% Q4.1 %*% diag(1/sqrt(diag(Q4.1)))\ncorrplot(corrmat4.1)\n\n\n\n\n\nCode\n#As expected for this Q call\n\n\nThe confidence intervals on the underlying state and the fitted values have really big balloon shapes to them where data is missing from each system. The Yakima system, which was assumed to have its own underlying state in this hypothesis, has much large confidence intervals than all the other systems in the fitted values plot. The ACF plots do show that about half of the systems disply autocorrelation in their residuals. The Residuals normality test for the underlying states, X1 (all but Yakima) and X2 (Yakima), show that the residuals for the X2 are not normally distributed as they vary from the qqline to a great degree. The corrplot is relatively uninformative as we forced the Q matrix to be diagonal and equal.\n\n\n\nHypothesis 4.2\nQ matrix is “diagonal and unequal”, meaning the two hidden, underlying states will have the same variance but will not be allowed to be correlated to one another.\n\n\nCode\nmod.list4.2 &lt;- list(\n  U = U_mat4,\n  R = \"diagonal and equal\",\n  Q = \"diagonal and unequal\",\n  Z = Z_mat4\n)\nm4.2 &lt;- MARSS(dat, model = mod.list4.2)\n\n\nSuccess! abstol and log-log tests passed at 130 iterations.\nAlert: conv.test.slope.tol is 0.5.\nTest with smaller values (&lt;0.1) to ensure convergence.\n\nMARSS fit is\nEstimation method: kem \nConvergence test: conv.test.slope.tol = 0.5, abstol = 0.001\nEstimation converged in 130 iterations. \nLog-likelihood: -539.7371 \nAIC: 1119.474   AICc: 1120.851   \n \n                                                                                           Estimate\nA.Steelhead (Middle Columbia River DPS) Deschutes River Westside - summer                   -0.8890\nA.Steelhead (Middle Columbia River DPS) Fifteenmile Creek - winter                          -1.1570\nA.Steelhead (Middle Columbia River DPS) John Day River Lower Mainstem Tributaries - summer   0.3160\nA.Steelhead (Middle Columbia River DPS) John Day River Upper Mainstem - summer              -0.4616\nA.Steelhead (Middle Columbia River DPS) Middle Fork John Day River - summer                 -0.0257\nA.Steelhead (Middle Columbia River DPS) North Fork John Day River - summer                   0.2077\nA.Steelhead (Middle Columbia River DPS) South Fork John Day River - summer                  -0.8629\nA.Steelhead (Middle Columbia River DPS) Touchet River - summer                              -1.2023\nA.Steelhead (Middle Columbia River DPS) Umatilla River - summer                              0.3662\nA.Steelhead (Middle Columbia River DPS) Walla Walla River - summer                          -0.5185\nA.Steelhead (Middle Columbia River DPS) Satus Creek - summer                                -0.0225\nA.Steelhead (Middle Columbia River DPS) Toppenish Creek - summer                            -0.8420\nA.Steelhead (Middle Columbia River DPS) Yakima River Upper Mainstem - summer                -1.6433\nR.diag                                                                                       0.2568\nU.South_group                                                                               -0.0167\nU.Yakima                                                                                     0.0438\nQ.(X1,X1)                                                                                    0.1205\nQ.(X2,X2)                                                                                    0.1020\nx0.X1                                                                                        7.7297\nx0.X2                                                                                        4.7277\nInitial states (x0) defined at t=0\n\nStandard errors have not been calculated. \nUse MARSSparamCIs to compute CIs and bias estimates.\n\n\nThis AICc isn’t looking very promising.\n\n\nCode\nautoplot(m4.2)\n\n\n\n\n\nplot.type = xtT \n\n\n\n\n\nHit &lt;Return&gt; to see next plot (q to exit): \n\n\n\n\n\nplot.type = fitted.ytT \n\n\n\n\n\nHit &lt;Return&gt; to see next plot (q to exit): \n\n\n\n\n\nplot.type = model.resids.ytt1 \n\n\n\n\n\nHit &lt;Return&gt; to see next plot (q to exit): \n\n\n\n\n\nplot.type = std.model.resids.ytT \n\n\n\n\n\nHit &lt;Return&gt; to see next plot (q to exit): \n\n\n\n\n\nplot.type = std.state.resids.xtT \n\n\n\n\n\nHit &lt;Return&gt; to see next plot (q to exit): \n\n\n\n\n\nplot.type = qqplot.std.model.resids.ytt1 \n\n\n\n\n\nHit &lt;Return&gt; to see next plot (q to exit): \n\n\n\n\n\nplot.type = qqplot.std.state.resids.xtT \n\n\n\n\n\nFinished plots.\n\n\n\n\n\nplot.type = acf.std.model.resids.ytt1 \n\n\n\n\n\nHit &lt;Return&gt; to see next plot (q to exit): \n\n\nThis model looks pretty similarly to the last model, which is to say not great. There continues to be very large CIs on hidden state of Yakima group where data is missing, again because there is not data or any correlation from the other underlying state to inform it. The CIs for fitted values show the same pattern qqplots show more variation in the Yakima group.\nLet’s look at the estimates:\n\n\nCode\nprint(fit4.2_smooth&lt;-tsSmooth(m4.2))\n\n\n    .rownames  t .estimate       .se\n1          X1  1  7.713088 0.2171542\n2          X1  2  7.597869 0.2302268\n3          X1  3  7.673348 0.2113186\n4          X1  4  7.750450 0.2090800\n5          X1  5  7.629621 0.2074018\n6          X1  6  7.873388 0.1929693\n7          X1  7  8.088784 0.2044279\n8          X1  8  8.384151 0.1778855\n9          X1  9  7.951740 0.1664611\n10         X1 10  7.287923 0.1659052\n11         X1 11  7.577577 0.1659624\n12         X1 12  7.752995 0.1677206\n13         X1 13  7.683337 0.2013568\n14         X1 14  7.507536 0.1677448\n15         X1 15  7.272938 0.1664597\n16         X1 16  7.352788 0.1761058\n17         X1 17  7.606312 0.1761249\n18         X1 18  7.571590 0.1668217\n19         X1 19  7.540859 0.1751015\n20         X1 20  7.317274 0.1577066\n21         X1 21  6.540679 0.1569962\n22         X1 22  7.079167 0.1569687\n23         X1 23  7.149301 0.1569676\n24         X1 24  7.157923 0.1569672\n25         X1 25  7.090095 0.1569570\n26         X1 26  7.236472 0.1566930\n27         X1 27  7.751988 0.1496947\n28         X1 28  8.019884 0.1492727\n29         X1 29  8.097283 0.1431839\n30         X1 30  7.839286 0.1430106\n31         X1 31  7.123193 0.1428661\n32         X1 32  6.984256 0.1376312\n33         X1 33  6.841647 0.1427164\n34         X1 34  7.250119 0.1373876\n35         X1 35  6.818691 0.1324899\n36         X1 36  6.815270 0.1323887\n37         X1 37  6.576289 0.1323866\n38         X1 38  6.712362 0.1323866\n39         X1 39  6.746573 0.1323866\n40         X1 40  6.804876 0.1323866\n41         X1 41  7.006022 0.1323866\n42         X1 42  7.395977 0.1323866\n43         X1 43  7.658772 0.1323866\n44         X1 44  8.016926 0.1323866\n45         X1 45  7.652119 0.1323866\n46         X1 46  7.207774 0.1323866\n47         X1 47  6.958430 0.1323866\n48         X1 48  6.804689 0.1323866\n49         X1 49  7.132426 0.1323866\n50         X1 50  7.127746 0.1323866\n51         X1 51  7.496731 0.1323866\n52         X1 52  7.604357 0.1323866\n53         X1 53  7.716102 0.1323866\n54         X1 54  7.709484 0.1323866\n55         X1 55  7.504097 0.1323866\n56         X1 56  7.511643 0.1323866\n57         X1 57  7.474494 0.1323866\n58         X1 58  7.028453 0.1323874\n59         X1 59  6.492198 0.1324282\n60         X1 60  6.603952 0.1344222\n61         X1 61  6.574936 0.2104532\n62         X1 62  6.646393 0.2804938\n63         X1 63  6.654190 0.3277061\n64         X1 64  6.661987 0.2618778\n65         X2  1  4.778820 0.3132035\n66         X2  2  4.829931 0.4341431\n67         X2  3  4.881041 0.5207221\n68         X2  4  4.932151 0.5883112\n69         X2  5  4.983261 0.6429278\n70         X2  6  5.034371 0.6876697\n71         X2  7  5.085482 0.7243690\n72         X2  8  5.136592 0.7542007\n73         X2  9  5.187702 0.7779552\n74         X2 10  5.238812 0.7961767\n75         X2 11  5.289922 0.8092390\n76         X2 12  5.341033 0.8173895\n77         X2 13  5.392143 0.8207746\n78         X2 14  5.443253 0.8194532\n79         X2 15  5.494363 0.8134025\n80         X2 16  5.545473 0.8025155\n81         X2 17  5.596584 0.7865914\n82         X2 18  5.647694 0.7653158\n83         X2 19  5.698804 0.7382262\n84         X2 20  5.749914 0.7046524\n85         X2 21  5.801024 0.6636110\n86         X2 22  5.852135 0.6136053\n87         X2 23  5.903245 0.5522053\n88         X2 24  5.954355 0.4750131\n89         X2 25  6.005465 0.3723326\n90         X2 26  6.056575 0.2095544\n91         X2 27  6.394413 0.1874200\n92         X2 28  6.513676 0.1852326\n93         X2 29  6.572805 0.1850284\n94         X2 30  6.512455 0.1850094\n95         X2 31  6.011024 0.1850076\n96         X2 32  5.693510 0.1850075\n97         X2 33  5.792239 0.1850075\n98         X2 34  6.122720 0.1850075\n99         X2 35  5.828509 0.1850075\n100        X2 36  5.488243 0.1850075\n101        X2 37  5.571224 0.1850075\n102        X2 38  5.484049 0.1850075\n103        X2 39  5.777213 0.1850075\n104        X2 40  5.885964 0.1850075\n105        X2 41  5.981148 0.1850075\n106        X2 42  6.327910 0.1850075\n107        X2 43  6.817186 0.1850075\n108        X2 44  7.068274 0.1850075\n109        X2 45  6.841617 0.1850075\n110        X2 46  6.889785 0.1850075\n111        X2 47  6.917703 0.1850075\n112        X2 48  6.628168 0.1850075\n113        X2 49  6.539539 0.1850075\n114        X2 50  6.936611 0.1850075\n115        X2 51  7.163445 0.1850075\n116        X2 52  7.484730 0.1850075\n117        X2 53  7.557295 0.1850077\n118        X2 54  7.524409 0.1850095\n119        X2 55  7.327414 0.1850300\n120        X2 56  7.244774 0.1852498\n121        X2 57  7.316352 0.1876029\n122        X2 58  7.268717 0.2113120\n123        X2 59  7.312541 0.3828910\n124        X2 60  7.356366 0.4985561\n125        X2 61  7.400190 0.5920396\n126        X2 62  7.444015 0.6726542\n127        X2 63  7.487839 0.7445914\n128        X2 64  7.531664 0.8101661\n\n\nLet’s look at the corrplot\n\n\nCode\nQ4.2 &lt;- coef(m4.2, type = \"matrix\")$Q\ncorrmat4.2 &lt;- diag(1/sqrt(diag(Q4.2))) %*% Q4.2 %*% diag(1/sqrt(diag(Q4.2)))\ncorrplot(corrmat4.2)\n\n\n\n\n\nCode\n#As expected for this Q call\n\n\nThis model, like the previous one, did not perform well with very large confidence intervals for X2 (Yakima), which is not surprising given that there wasn’t much informing X2. The Yakima group only has large balloon shaped confidence intervals on its fitted values while the other river systems have some structure to their confidence intervals in sections with missing data. Very similar ACF plots to the other Hypothesis Four models, showing structuring and multiple significant lags in approximately half of the plots. The variance was allowed to vary independently between the two underlying states but they were estimated to be very similar to one another\n\n\n\nHypothesis 4.3\nThe Q matrix is “equal variance and covariance”. This will result in both of the hidden, underlying states having the same variance and they will be correlated to one another. This model should perform better than the previous models.\n\n\nCode\nmod.list4.3 &lt;- list(\n  U = U_mat4,\n  R = \"diagonal and equal\",\n  Q = \"equalvarcov\",\n  Z = Z_mat4\n)\nm4.3 &lt;- MARSS(dat, model = mod.list4.3)\n\n\nSuccess! abstol and log-log tests passed at 464 iterations.\nAlert: conv.test.slope.tol is 0.5.\nTest with smaller values (&lt;0.1) to ensure convergence.\n\nMARSS fit is\nEstimation method: kem \nConvergence test: conv.test.slope.tol = 0.5, abstol = 0.001\nEstimation converged in 464 iterations. \nLog-likelihood: -522.7461 \nAIC: 1085.492   AICc: 1086.869   \n \n                                                                                           Estimate\nA.Steelhead (Middle Columbia River DPS) Deschutes River Westside - summer                   -0.9112\nA.Steelhead (Middle Columbia River DPS) Fifteenmile Creek - winter                          -1.1767\nA.Steelhead (Middle Columbia River DPS) John Day River Lower Mainstem Tributaries - summer   0.2939\nA.Steelhead (Middle Columbia River DPS) John Day River Upper Mainstem - summer              -0.4838\nA.Steelhead (Middle Columbia River DPS) Middle Fork John Day River - summer                 -0.0477\nA.Steelhead (Middle Columbia River DPS) North Fork John Day River - summer                   0.1856\nA.Steelhead (Middle Columbia River DPS) South Fork John Day River - summer                  -0.8850\nA.Steelhead (Middle Columbia River DPS) Touchet River - summer                              -1.2192\nA.Steelhead (Middle Columbia River DPS) Umatilla River - summer                              0.3440\nA.Steelhead (Middle Columbia River DPS) Walla Walla River - summer                          -0.5291\nA.Steelhead (Middle Columbia River DPS) Satus Creek - summer                                -0.0136\nA.Steelhead (Middle Columbia River DPS) Toppenish Creek - summer                            -0.8330\nA.Steelhead (Middle Columbia River DPS) Yakima River Upper Mainstem - summer                -1.6343\nR.diag                                                                                       0.2571\nU.South_group                                                                               -0.0167\nU.Yakima                                                                                     0.0334\nQ.diag                                                                                       0.1176\nQ.offdiag                                                                                    0.1175\nx0.X1                                                                                        7.7516\nx0.X2                                                                                        4.8589\nInitial states (x0) defined at t=0\n\nStandard errors have not been calculated. \nUse MARSSparamCIs to compute CIs and bias estimates.\n\n\nThis model did in fact perform better based on AICc! Let’s look at our plots:\n\n\nCode\nautoplot(m4.3)\n\n\nMARSSresiduals.tt1 reported warnings. See msg element of returned residuals object.\nMARSSresiduals.tT reported warnings. See msg element or attribute of returned residuals object.\n\n\n\n\n\nplot.type = xtT \n\n\n\n\n\nHit &lt;Return&gt; to see next plot (q to exit): \n\n\n\n\n\nplot.type = fitted.ytT \n\n\n\n\n\nHit &lt;Return&gt; to see next plot (q to exit): \n\n\n\n\n\nplot.type = model.resids.ytt1 \n\n\n\n\n\nHit &lt;Return&gt; to see next plot (q to exit): \n\n\n\n\n\nplot.type = std.model.resids.ytT \n\n\n\n\n\nHit &lt;Return&gt; to see next plot (q to exit): \n\n\n\n\n\nplot.type = std.state.resids.xtT \n\n\n\n\n\nHit &lt;Return&gt; to see next plot (q to exit): \n\n\n\n\n\nplot.type = qqplot.std.model.resids.ytt1 \n\n\n\n\n\nHit &lt;Return&gt; to see next plot (q to exit): \n\n\n\n\n\nplot.type = qqplot.std.state.resids.xtT \n\n\n\n\n\nFinished plots.\n\n\n\n\n\nplot.type = acf.std.model.resids.ytt1 \n\n\n\n\n\nHit &lt;Return&gt; to see next plot (q to exit): \n\n\nThis model looks much better, with tighter confidence levels that are being informed with the correlated process errors. However, there is a clear residual pattern in X2 (Yakima) which also has a wiggly QQ plot. Meanwhile X1 has a fat left tail.\nLet’s look at the estimates:\n\n\nCode\nprint(fit4.3_smooth&lt;-tsSmooth(m4.3))\n\n\n    .rownames  t .estimate       .se\n1          X1  1  7.734863 0.2156542\n2          X1  2  7.621694 0.2289443\n3          X1  3  7.695833 0.2104342\n4          X1  4  7.771997 0.2081805\n5          X1  5  7.654469 0.2064783\n6          X1  6  7.895860 0.1922594\n7          X1  7  8.110207 0.2034529\n8          X1  8  8.401457 0.1772674\n9          X1  9  7.972633 0.1659261\n10         X1 10  7.314966 0.1653559\n11         X1 11  7.599785 0.1654158\n12         X1 12  7.773530 0.1672038\n13         X1 13  7.704131 0.2003253\n14         X1 14  7.529461 0.1672294\n15         X1 15  7.296955 0.1659247\n16         X1 16  7.376017 0.1754538\n17         X1 17  7.626808 0.1754738\n18         X1 18  7.593020 0.1662909\n19         X1 19  7.561213 0.1744284\n20         X1 20  7.337474 0.1572410\n21         X1 21  6.568709 0.1565145\n22         X1 22  7.100114 0.1564853\n23         X1 23  7.171366 0.1564828\n24         X1 24  7.182443 0.1564491\n25         X1 25  7.126649 0.1556058\n26         X1 26  7.325691 0.1327852\n27         X1 27  7.854397 0.1280392\n28         X1 28  8.050286 0.1278854\n29         X1 29  8.119447 0.1240084\n30         X1 30  7.934258 0.1239458\n31         X1 31  7.167471 0.1238918\n32         X1 32  6.945001 0.1204123\n33         X1 33  6.871715 0.1238425\n34         X1 34  7.365617 0.1203173\n35         X1 35  6.869345 0.1170224\n36         X1 36  6.728017 0.1169813\n37         X1 37  6.596640 0.1169863\n38         X1 38  6.627159 0.1169923\n39         X1 39  6.764356 0.1169985\n40         X1 40  6.804720 0.1170047\n41         X1 41  6.936846 0.1170111\n42         X1 42  7.322716 0.1170176\n43         X1 43  7.671446 0.1170242\n44         X1 44  8.028496 0.1170309\n45         X1 45  7.600749 0.1170378\n46         X1 46  7.289629 0.1170449\n47         X1 47  7.128139 0.1170521\n48         X1 48  6.864724 0.1170595\n49         X1 49  7.060122 0.1170671\n50         X1 50  7.194498 0.1170750\n51         X1 51  7.511118 0.1170830\n52         X1 52  7.688430 0.1170912\n53         X1 53  7.768679 0.1170997\n54         X1 54  7.744574 0.1171085\n55         X1 55  7.489668 0.1171174\n56         X1 56  7.462192 0.1171258\n57         X1 57  7.473148 0.1171297\n58         X1 58  7.075461 0.1172746\n59         X1 59  6.517079 0.1318246\n60         X1 60  6.622739 0.1341650\n61         X1 61  6.593270 0.2095121\n62         X1 62  6.664116 0.2786770\n63         X1 63  6.673330 0.3250464\n64         X1 64  6.682543 0.2614355\n65         X2  1  4.892252 0.2157009\n66         X2  2  4.829193 0.2290564\n67         X2  3  4.953415 0.2106386\n68         X2  4  5.079662 0.2084640\n69         X2  5  5.012245 0.2068399\n70         X2  6  5.303695 0.1927314\n71         X2  7  5.568105 0.2039695\n72         X2  8  5.909408 0.1779508\n73         X2  9  5.530739 0.1667459\n74         X2 10  4.923260 0.1662638\n75         X2 11  5.258133 0.1664065\n76         X2 12  5.481947 0.1682641\n77         X2 13  5.462651 0.2012684\n78         X2 14  5.338100 0.1684454\n79         X2 15  5.155721 0.1672264\n80         X2 16  5.284866 0.1767528\n81         X2 17  5.585715 0.1768411\n82         X2 18  5.602025 0.1678061\n83         X2 19  5.620317 0.1759367\n84         X2 20  5.446704 0.1589883\n85         X2 21  4.728143 0.1583388\n86         X2 22  5.309566 0.1583757\n87         X2 23  5.430902 0.1584308\n88         X2 24  5.492071 0.1584206\n89         X2 25  5.486378 0.1574377\n90         X2 26  5.735486 0.1337102\n91         X2 27  6.314140 0.1289557\n92         X2 28  6.559913 0.1288329\n93         X2 29  6.678984 0.1251261\n94         X2 30  6.543762 0.1251085\n95         X2 31  5.826899 0.1250979\n96         X2 32  5.654243 0.1217841\n97         X2 33  5.630870 0.1251254\n98         X2 34  6.174598 0.1217852\n99         X2 35  5.728119 0.1186873\n100        X2 36  5.636469 0.1186984\n101        X2 37  5.554989 0.1187435\n102        X2 38  5.635322 0.1187888\n103        X2 39  5.822526 0.1188346\n104        X2 40  5.912876 0.1188812\n105        X2 41  6.094990 0.1189285\n106        X2 42  6.530957 0.1189768\n107        X2 43  6.929947 0.1190259\n108        X2 44  7.337240 0.1190761\n109        X2 45  6.959835 0.1191274\n110        X2 46  6.699198 0.1191798\n111        X2 47  6.588064 0.1192335\n112        X2 48  6.374747 0.1192886\n113        X2 49  6.620113 0.1193450\n114        X2 50  6.804672 0.1194030\n115        X2 51  7.171327 0.1194625\n116        X2 52  7.398733 0.1195237\n117        X2 53  7.528966 0.1195867\n118        X2 54  7.554813 0.1196516\n119        X2 55  7.349859 0.1197187\n120        X2 56  7.372354 0.1197901\n121        X2 57  7.433397 0.1198866\n122        X2 58  7.085883 0.1203695\n123        X2 59  6.577633 0.1368446\n124        X2 60  6.733331 0.1395225\n125        X2 61  6.753918 0.2130669\n126        X2 62  6.874807 0.2814064\n127        X2 63  6.934071 0.3274303\n128        X2 64  6.993336 0.2644798\n\n\nLet’s look at the corrplots\n\n\nCode\nQ4.3 &lt;- coef(m4.3, type = \"matrix\")$Q\ncorrmat4.3 &lt;- diag(1/sqrt(diag(Q4.3))) %*% Q4.3 %*% diag(1/sqrt(diag(Q4.3)))\ncorrplot(corrmat4.3)\n\n\n\n\n\nThe confidence intervals for the underlying states and the fitted values now fit the estimated abundance in each river well rather than being oval shaped over any missing values. There were very similar ACF plots to the other models in this model with about half of them showing sine wave patterns. The variance-covariance matrix was forced to be equal.\n\n\n\nHypothesis 4.4\nThe Q matrix is “unconstrained”. Meaning the two hidden, underlying states will be allowed to vary independently of one another and correlation is allowed to vary between the two states.\n\n\nCode\nmod.list4.4 &lt;- list(\n  U = U_mat4,\n  R = \"diagonal and equal\",\n  Q = \"unconstrained\",\n  Z = Z_mat4\n)\nm4.4 &lt;- MARSS(dat, model = mod.list4.4)\n\n\nSuccess! abstol and log-log tests passed at 468 iterations.\nAlert: conv.test.slope.tol is 0.5.\nTest with smaller values (&lt;0.1) to ensure convergence.\n\nMARSS fit is\nEstimation method: kem \nConvergence test: conv.test.slope.tol = 0.5, abstol = 0.001\nEstimation converged in 468 iterations. \nLog-likelihood: -522.7025 \nAIC: 1087.405   AICc: 1088.922   \n \n                                                                                           Estimate\nA.Steelhead (Middle Columbia River DPS) Deschutes River Westside - summer                   -0.9118\nA.Steelhead (Middle Columbia River DPS) Fifteenmile Creek - winter                          -1.1772\nA.Steelhead (Middle Columbia River DPS) John Day River Lower Mainstem Tributaries - summer   0.2933\nA.Steelhead (Middle Columbia River DPS) John Day River Upper Mainstem - summer              -0.4844\nA.Steelhead (Middle Columbia River DPS) Middle Fork John Day River - summer                 -0.0482\nA.Steelhead (Middle Columbia River DPS) North Fork John Day River - summer                   0.1850\nA.Steelhead (Middle Columbia River DPS) South Fork John Day River - summer                  -0.8856\nA.Steelhead (Middle Columbia River DPS) Touchet River - summer                              -1.2198\nA.Steelhead (Middle Columbia River DPS) Umatilla River - summer                              0.3434\nA.Steelhead (Middle Columbia River DPS) Walla Walla River - summer                          -0.5298\nA.Steelhead (Middle Columbia River DPS) Satus Creek - summer                                -0.0130\nA.Steelhead (Middle Columbia River DPS) Toppenish Creek - summer                            -0.8324\nA.Steelhead (Middle Columbia River DPS) Yakima River Upper Mainstem - summer                -1.6338\nR.diag                                                                                       0.2571\nU.South_group                                                                               -0.0167\nU.Yakima                                                                                     0.0332\nQ.(1,1)                                                                                      0.1169\nQ.(2,1)                                                                                      0.1187\nQ.(2,2)                                                                                      0.1206\nx0.X1                                                                                        7.7520\nx0.X2                                                                                        4.8616\nInitial states (x0) defined at t=0\n\nStandard errors have not been calculated. \nUse MARSSparamCIs to compute CIs and bias estimates.\n\n\nThis model did just a little worse than the model with a U matrix that had equal variance and covariance. Let’s look at plots:\n\n\nCode\nautoplot(m4.4)\n\n\nMARSSresiduals.tt1 reported warnings. See msg element of returned residuals object.\nMARSSresiduals.tT reported warnings. See msg element or attribute of returned residuals object.\n\n\n\n\n\nplot.type = xtT \n\n\n\n\n\nHit &lt;Return&gt; to see next plot (q to exit): \n\n\n\n\n\nplot.type = fitted.ytT \n\n\n\n\n\nHit &lt;Return&gt; to see next plot (q to exit): \n\n\n\n\n\nplot.type = model.resids.ytt1 \n\n\n\n\n\nHit &lt;Return&gt; to see next plot (q to exit): \n\n\n\n\n\nplot.type = std.model.resids.ytT \n\n\n\n\n\nHit &lt;Return&gt; to see next plot (q to exit): \n\n\n\n\n\nplot.type = std.state.resids.xtT \n\n\n\n\n\nHit &lt;Return&gt; to see next plot (q to exit): \n\n\n\n\n\nplot.type = qqplot.std.model.resids.ytt1 \n\n\n\n\n\nHit &lt;Return&gt; to see next plot (q to exit): \n\n\n\n\n\nplot.type = qqplot.std.state.resids.xtT \n\n\n\n\n\nFinished plots.\n\n\n\n\n\nplot.type = acf.std.model.resids.ytt1 \n\n\n\n\n\nHit &lt;Return&gt; to see next plot (q to exit): \n\n\nWhile this model does ok in some streams, it’s missing data in places, X2 (Yakima) has a clear residual structure and the QQ plot is very wiggly. X1 (the rest) does ok, but there are some outliers and the QQ plot continues to have a fat left tail.\nLet’s look at estimates:\n\n\nCode\nprint(fit4.4_smooth&lt;-tsSmooth(m4.4))\n\n\n    .rownames  t .estimate       .se\n1          X1  1  7.735328 0.2152863\n2          X1  2  7.622619 0.2286223\n3          X1  3  7.696466 0.2102034\n4          X1  4  7.772426 0.2079469\n5          X1  5  7.655625 0.2062396\n6          X1  6  7.896490 0.1920702\n7          X1  7  8.110598 0.2032034\n8          X1  8  8.400935 0.1771009\n9          X1  9  7.972909 0.1657799\n10         X1 10  7.316607 0.1652066\n11         X1 11  7.600355 0.1652671\n12         X1 12  7.773726 0.1670614\n13         X1 13  7.704384 0.2000638\n14         X1 14  7.529966 0.1670873\n15         X1 15  7.297925 0.1657785\n16         X1 16  7.376812 0.1752802\n17         X1 17  7.626995 0.1753003\n18         X1 18  7.593410 0.1661455\n19         X1 19  7.561365 0.1742502\n20         X1 20  7.337596 0.1571115\n21         X1 21  6.570566 0.1563816\n22         X1 22  7.100384 0.1563520\n23         X1 23  7.171796 0.1563494\n24         X1 24  7.182990 0.1563145\n25         X1 25  7.127678 0.1554471\n26         X1 26  7.327259 0.1321084\n27         X1 27  7.853412 0.1274180\n28         X1 28  8.047414 0.1272675\n29         X1 29  8.116314 0.1234446\n30         X1 30  7.932935 0.1233835\n31         X1 31  7.169347 0.1233307\n32         X1 32  6.946792 0.1198966\n33         X1 33  6.874801 0.1232828\n34         X1 34  7.367199 0.1198036\n35         X1 35  6.872387 0.1165497\n36         X1 36  6.729889 0.1165094\n37         X1 37  6.600488 0.1165146\n38         X1 38  6.629466 0.1165207\n39         X1 39  6.767352 0.1165269\n40         X1 40  6.807312 0.1165332\n41         X1 41  6.938011 0.1165397\n42         X1 42  7.322114 0.1165463\n43         X1 43  7.670394 0.1165530\n44         X1 44  8.025781 0.1165598\n45         X1 45  7.599116 0.1165668\n46         X1 46  7.290979 0.1165739\n47         X1 47  7.131233 0.1165812\n48         X1 48  6.867630 0.1165887\n49         X1 49  7.060457 0.1165964\n50         X1 50  7.196049 0.1166043\n51         X1 51  7.510535 0.1166124\n52         X1 52  7.687958 0.1166208\n53         X1 53  7.767433 0.1166293\n54         X1 54  7.743210 0.1166381\n55         X1 55  7.488829 0.1166471\n56         X1 56  7.460986 0.1166556\n57         X1 57  7.472388 0.1166595\n58         X1 58  7.076754 0.1168084\n59         X1 59  6.518256 0.1317245\n60         X1 60  6.623272 0.1340868\n61         X1 61  6.593993 0.2092689\n62         X1 62  6.664570 0.2782300\n63         X1 63  6.673772 0.3244088\n64         X1 64  6.682974 0.2612937\n65         X2  1  4.894785 0.2187770\n66         X2  2  4.830469 0.2323901\n67         X2  3  4.955669 0.2137661\n68         X2  4  5.083015 0.2115504\n69         X2  5  5.014542 0.2098920\n70         X2  6  5.309409 0.1956031\n71         X2  7  5.577095 0.2069581\n72         X2  8  5.922218 0.1806002\n73         X2  9  5.537583 0.1692309\n74         X2 10  4.921052 0.1687343\n75         X2 11  5.259482 0.1688766\n76         X2 12  5.485784 0.1707675\n77         X2 13  5.465523 0.2041844\n78         X2 14  5.338519 0.1709458\n79         X2 15  5.152979 0.1696998\n80         X2 16  5.283298 0.1793513\n81         X2 17  5.587631 0.1794385\n82         X2 18  5.603695 0.1702816\n83         X2 19  5.621322 0.1785097\n84         X2 20  5.444185 0.1613299\n85         X2 21  4.715168 0.1606638\n86         X2 22  5.303572 0.1606986\n87         X2 23  5.426298 0.1607523\n88         X2 24  5.487850 0.1607390\n89         X2 25  5.481842 0.1597170\n90         X2 26  5.734770 0.1350962\n91         X2 27  6.319381 0.1303184\n92         X2 28  6.566465 0.1301950\n93         X2 29  6.686474 0.1264769\n94         X2 30  6.550227 0.1264583\n95         X2 31  5.824445 0.1264465\n96         X2 32  5.648245 0.1231190\n97         X2 33  5.625114 0.1264716\n98         X2 34  6.175318 0.1231175\n99         X2 35  5.722479 0.1200041\n100        X2 36  5.627476 0.1200138\n101        X2 37  5.545992 0.1200575\n102        X2 38  5.625334 0.1201014\n103        X2 39  5.815514 0.1201458\n104        X2 40  5.906177 0.1201909\n105        X2 41  6.089028 0.1202367\n106        X2 42  6.529446 0.1202834\n107        X2 43  6.933626 0.1203309\n108        X2 44  7.345012 0.1203795\n109        X2 45  6.961933 0.1204290\n110        X2 46  6.699418 0.1204797\n111        X2 47  6.587544 0.1205315\n112        X2 48  6.369896 0.1205846\n113        X2 49  6.615853 0.1206391\n114        X2 50  6.803870 0.1206949\n115        X2 51  7.173498 0.1207523\n116        X2 52  7.403928 0.1208113\n117        X2 53  7.534736 0.1208719\n118        X2 54  7.560159 0.1209343\n119        X2 55  7.351743 0.1209988\n120        X2 56  7.373511 0.1210676\n121        X2 57  7.435267 0.1211612\n122        X2 58  7.083558 0.1216480\n123        X2 59  6.566338 0.1387321\n124        X2 60  6.723157 0.1414692\n125        X2 61  6.743552 0.2160934\n126        X2 62  6.865386 0.2853517\n127        X2 63  6.924871 0.3319324\n128        X2 64  6.984357 0.2684488\n\n\nFinally we’ll look at corrplots. As hinted at by the model output there is very high correlation even though this was an unconstrained model.\n\n\nCode\nQ4.4 &lt;- coef(m4.4, type = \"matrix\")$Q\ncorrmat4.4 &lt;- diag(1/sqrt(diag(Q4.4))) %*% Q4.4 %*% diag(1/sqrt(diag(Q4.4)))\ncorrplot(corrmat4.4)\n\n\n\n\n\nThe confidence intervals on the underlying state and the fitted values fit the estimated abundances well in areas with missing data. QQplots for X1 (all but Yakima) had a fat left tail and X2 (Yakima) had a lot of structure in the residuals and wiggly QQ plots. The AFC plots show many of the streams have autocorrelated residuals. Even though this hypothesis allowed the Q matrix to be unconstrained, it still estimated variances and covariances that were essentially equal to the “equal variance and covariance” hypothesis."
  },
  {
    "objectID": "Lab-2/Final_Write_ups/Lab-2-team-4_final.html#aicc-results-and-selected-model",
    "href": "Lab-2/Final_Write_ups/Lab-2-team-4_final.html#aicc-results-and-selected-model",
    "title": "11  Team 4 - Lab 2",
    "section": "AICc Results and Selected Model",
    "text": "AICc Results and Selected Model\n\n\nCode\nmods &lt;- c(\"1\",\"2.1\",\"2.2\",\"2.3\",\"2.4\",\"3.1\",\"3.2\", \"3.3\", \"3.4\",\"4.1\",\"4.2\",\"4.3\",\"4.4\")\naic &lt;- c(m1$AICc, m2.1$AICc, m2.2$AICc, m2.3$AICc, m2.4$AICc,m3.1$AICc, m3.2$AICc, m3.3$AICc, m3.4$AICc, m4.1$AICc, m4.2$AICc, m4.3$AICc, m4.4$AICc)\ndaic &lt;- aic-min(aic)\ntab &lt;- cbind.data.frame(mods, aic, daic)\nkable(tab, col.names = c(\"Hypothesis\", \"AICc\", \"delta AICc\"))\n\n\n\n\n\nHypothesis\nAICc\ndelta AICc\n\n\n\n\n1\n1274.985\n265.95836\n\n\n2.1\n1072.048\n63.02114\n\n\n2.2\n1058.819\n49.79222\n\n\n2.3\n1032.863\n23.83661\n\n\n2.4\n1009.027\n0.00000\n\n\n3.1\n1127.770\n118.74285\n\n\n3.2\n1127.268\n118.24138\n\n\n3.3\n1112.854\n103.82729\n\n\n3.4\n1107.787\n98.76043\n\n\n4.1\n1118.832\n109.80504\n\n\n4.2\n1120.851\n111.82460\n\n\n4.3\n1086.869\n77.84256\n\n\n4.4\n1088.922\n79.89551\n\n\n\n\n\nThe best model is Hypothesis 2.4 where it is assumed that the four main population groups form separate sub-populations. In this hypothesis we are utilizing 4 separate underlying states to model the observations from each of the main population groups. The Q matrix for the variance of process errors is “unconstrained”. Meaning that each hidden state is allowed to vary separately as is the correlation between the underlying states."
  },
  {
    "objectID": "Lab-2/Final_Write_ups/Lab-2-team-4_final.html#cycling-considerations-for-best-model",
    "href": "Lab-2/Final_Write_ups/Lab-2-team-4_final.html#cycling-considerations-for-best-model",
    "title": "11  Team 4 - Lab 2",
    "section": "Cycling considerations for best model",
    "text": "Cycling considerations for best model\n\nSimple Cycling\nFirst we try a simple approach as outlined in example code and assume a periodicity of about four years, as seen in some of the ACF plots.\n\n\nCode\nTT &lt;- years\np &lt;- 4 #try a period of 4\n\nZ &lt;- array(1, dim = c(15, 3, TT))\nZ[1, 2, ] &lt;- sin(2 * pi * (1:TT)/p)\nZ[1, 3, ] &lt;- cos(2 * pi * (1:TT)/p)\n\nmod.list_test &lt;- list(U = \"zero\", \n                      Q = \"diagonal and unequal\", \n                      Z = Z, \n                      A = \"zero\")\n\nm &lt;- dim(Z)[2]\nm_test &lt;- MARSS(dat, model = mod.list_test, inits = list(x0 = matrix(0,m, 1)))\n\n\nWarning! Abstol convergence only. Maxit (=500) reached before log-log convergence.\n\nMARSS fit is\nEstimation method: kem \nConvergence test: conv.test.slope.tol = 0.5, abstol = 0.001\nWARNING: Abstol convergence only no log-log convergence.\n maxit (=500) reached before log-log convergence.\n The likelihood and params might not be at the ML values.\n Try setting control$maxit higher.\nLog-likelihood: -850.9578 \nAIC: 1715.916   AICc: 1716.095   \n \n           Estimate\nR.diag     0.790060\nQ.(X1,X1)  0.051311\nQ.(X2,X2)  0.017798\nQ.(X3,X3)  0.000461\nx0.X1      7.855865\nx0.X2     -0.044586\nx0.X3     -0.289316\nInitial states (x0) defined at t=0\n\nStandard errors have not been calculated. \nUse MARSSparamCIs to compute CIs and bias estimates.\n\nConvergence warnings\n Warning: the  Q.(X3,X3)  parameter value has not converged.\n Warning: the  x0.X2  parameter value has not converged.\n Type MARSSinfo(\"convergence\") for more info on this warning.\n\n\nThis model struggled to converge and did pretty poorly in terms of AICc.\nLet’s look at some plots:\n\n\nCode\nplot_test&lt;-autoplot(m_test)\n\n\nMARSSresiduals.tt1 reported warnings. See msg element of returned residuals object.\nMARSSresiduals.tT reported warnings. See msg element or attribute of returned residuals object.\n\n\n\n\n\nplot.type = xtT \n\n\n\n\n\nHit &lt;Return&gt; to see next plot (q to exit): \n\n\n\n\n\nplot.type = fitted.ytT \n\n\n\n\n\nHit &lt;Return&gt; to see next plot (q to exit): \n\n\n\n\n\nplot.type = model.resids.ytt1 \n\n\n\n\n\nHit &lt;Return&gt; to see next plot (q to exit): \n\n\n\n\n\nplot.type = std.model.resids.ytT \n\n\n\n\n\nHit &lt;Return&gt; to see next plot (q to exit): \n\n\n\n\n\nplot.type = std.state.resids.xtT \n\n\n\n\n\nHit &lt;Return&gt; to see next plot (q to exit): \n\n\n\n\n\nplot.type = qqplot.std.model.resids.ytt1 \n\n\n\n\n\nHit &lt;Return&gt; to see next plot (q to exit): \n\n\n\n\n\nplot.type = qqplot.std.state.resids.xtT \n\n\n\n\n\nFinished plots.\n\n\n\n\n\nplot.type = acf.std.model.resids.ytt1 \n\n\n\n\n\nHit &lt;Return&gt; to see next plot (q to exit): \n\n\nTo be honest, with the U matrix equal to 0, I’m unsure what states we’re looking at. But they get worse as we go from X1, to X2, to X3 in terms of CI, residual patterns and QQ plots. Additionally, some of the models are completly missing data.\nCorrplot is as expectd with the Q matrix set to diagonal and unequal.\n\n\nCode\nQtest &lt;- coef(m_test, type = \"matrix\")$Q\ncorrmat_test &lt;- diag(1/sqrt(diag(Qtest))) %*% Qtest %*% diag(1/sqrt(diag(Qtest)))\ncorrplot(corrmat_test)\n\n\n\n\n\nThis model isn’t it. Let’s move onto a model based on our best performer with cycling considerations.\n\n\nHypthothesis 2.4 with Cycling\nFor this section, we’re going to explore 2 cycling options, 4 years and 9 years, as these are period where salmon are generally known to cycle (I think….need a source).\n\nFour Years\nWe’ll use the U and Z matrices from Hypothesis 2:\n\n\nCode\nU_cyl &lt;- matrix(c(\"Cascades\",\"JohnDay\",\"Walla\",\"Yakima\"),4,1)\n\nZ_cyl &lt;- matrix(c(rep(c(1,0,0,0),3),\n                  rep(c(0,1,0,0),5),\n                  rep(c(0,0,1,0),3),\n                  rep(c(0,0,0,1),4)),15,4, byrow=TRUE)\n\n\nAnd we’ll set up a co-variate matrix to allow for some cycling and set up our model list with Q unconstrained, and D unconstrained.\n\n\nCode\nd_cyl &lt;- matrix(0,2,TT)\n\nd_cyl[1,] &lt;- sin(2 * pi * (1:TT)/p)\nd_cyl[2,] &lt;- cos(2 * pi * (1:TT)/p)\n\n\n \nmod.list &lt;- list(U = U_cyl, \n                 Q = \"unconstrained\",\n                 Z = Z_cyl, \n                 A = \"zero\",\n                 D=\"unconstrained\",\n                 d = d_cyl) \n\nm &lt;- dim(Z_cyl)[2]\nm_cyl_4 &lt;- MARSS(dat, model = mod.list, inits = list(x0 = matrix(0, m, 1)))\n\n\nSuccess! abstol and log-log tests passed at 456 iterations.\nAlert: conv.test.slope.tol is 0.5.\nTest with smaller values (&lt;0.1) to ensure convergence.\n\nMARSS fit is\nEstimation method: kem \nConvergence test: conv.test.slope.tol = 0.5, abstol = 0.001\nEstimation converged in 456 iterations. \nLog-likelihood: -744.479 \nAIC: 1586.958   AICc: 1595.392   \n \n                                                                                               Estimate\nR.diag                                                                                          0.53728\nU.Cascades                                                                                     -0.02389\nU.JohnDay                                                                                      -0.01849\nU.Walla                                                                                        -0.02611\nU.Yakima                                                                                        0.02795\nQ.(1,1)                                                                                         0.06525\nQ.(2,1)                                                                                         0.07433\nQ.(3,1)                                                                                         0.04350\nQ.(4,1)                                                                                         0.06408\nQ.(2,2)                                                                                         0.13865\nQ.(3,2)                                                                                         0.07049\nQ.(4,2)                                                                                         0.10751\nQ.(3,3)                                                                                         0.03716\nQ.(4,3)                                                                                         0.05612\nQ.(4,4)                                                                                         0.08504\nx0.X1                                                                                           6.91912\nx0.X2                                                                                           7.57238\nx0.X3                                                                                           7.77344\nx0.X4                                                                                           4.38479\nD.(Steelhead (Middle Columbia River DPS) Deschutes River Eastside - summer,1)                   0.16957\nD.(Steelhead (Middle Columbia River DPS) Deschutes River Westside - summer,1)                   0.08829\nD.(Steelhead (Middle Columbia River DPS) Fifteenmile Creek - winter,1)                          0.17364\nD.(Steelhead (Middle Columbia River DPS) John Day River Lower Mainstem Tributaries - summer,1)  0.02798\nD.(Steelhead (Middle Columbia River DPS) John Day River Upper Mainstem - summer,1)              0.04088\nD.(Steelhead (Middle Columbia River DPS) Middle Fork John Day River - summer,1)                 0.00434\nD.(Steelhead (Middle Columbia River DPS) North Fork John Day River - summer,1)                 -0.06285\nD.(Steelhead (Middle Columbia River DPS) South Fork John Day River - summer,1)                 -0.03264\nD.(Steelhead (Middle Columbia River DPS) Touchet River - summer,1)                              0.03742\nD.(Steelhead (Middle Columbia River DPS) Umatilla River - summer,1)                            -0.00726\nD.(Steelhead (Middle Columbia River DPS) Walla Walla River - summer,1)                         -0.05636\nD.(Steelhead (Middle Columbia River DPS) Naches River - summer,1)                              -0.10493\nD.(Steelhead (Middle Columbia River DPS) Satus Creek - summer,1)                               -0.05741\nD.(Steelhead (Middle Columbia River DPS) Toppenish Creek - summer,1)                           -0.18220\nD.(Steelhead (Middle Columbia River DPS) Yakima River Upper Mainstem - summer,1)               -0.07321\nD.(Steelhead (Middle Columbia River DPS) Deschutes River Eastside - summer,2)                   0.11903\nD.(Steelhead (Middle Columbia River DPS) Deschutes River Westside - summer,2)                   0.05723\nD.(Steelhead (Middle Columbia River DPS) Fifteenmile Creek - winter,2)                          0.14154\nD.(Steelhead (Middle Columbia River DPS) John Day River Lower Mainstem Tributaries - summer,2)  0.00397\nD.(Steelhead (Middle Columbia River DPS) John Day River Upper Mainstem - summer,2)              0.01291\nD.(Steelhead (Middle Columbia River DPS) Middle Fork John Day River - summer,2)                 0.10192\nD.(Steelhead (Middle Columbia River DPS) North Fork John Day River - summer,2)                 -0.03743\nD.(Steelhead (Middle Columbia River DPS) South Fork John Day River - summer,2)                  0.09649\nD.(Steelhead (Middle Columbia River DPS) Touchet River - summer,2)                              0.05861\nD.(Steelhead (Middle Columbia River DPS) Umatilla River - summer,2)                            -0.04049\nD.(Steelhead (Middle Columbia River DPS) Walla Walla River - summer,2)                          0.06629\nD.(Steelhead (Middle Columbia River DPS) Naches River - summer,2)                              -0.04680\nD.(Steelhead (Middle Columbia River DPS) Satus Creek - summer,2)                               -0.04567\nD.(Steelhead (Middle Columbia River DPS) Toppenish Creek - summer,2)                           -0.11343\nD.(Steelhead (Middle Columbia River DPS) Yakima River Upper Mainstem - summer,2)               -0.02867\nInitial states (x0) defined at t=0\n\nStandard errors have not been calculated. \nUse MARSSparamCIs to compute CIs and bias estimates.\n\n\nWow, this model AICc is BAD.\n\n\nCode\nautoplot(m_cyl_4)\n\n\nMARSSresiduals.tt1 reported warnings. See msg element of returned residuals object.\nMARSSresiduals.tT reported warnings. See msg element or attribute of returned residuals object.\n\n\n\n\n\nplot.type = xtT \n\n\n\n\n\nHit &lt;Return&gt; to see next plot (q to exit): \n\n\n\n\n\nplot.type = fitted.ytT \n\n\n\n\n\nHit &lt;Return&gt; to see next plot (q to exit): \n\n\n\n\n\nplot.type = model.resids.ytt1 \n\n\n\n\n\nHit &lt;Return&gt; to see next plot (q to exit): \n\n\n\n\n\nplot.type = std.model.resids.ytT \n\n\n\n\n\nHit &lt;Return&gt; to see next plot (q to exit): \n\n\n\n\n\nplot.type = std.state.resids.xtT \n\n\n\n\n\nHit &lt;Return&gt; to see next plot (q to exit): \n\n\n\n\n\nplot.type = qqplot.std.model.resids.ytt1 \n\n\n\n\n\nHit &lt;Return&gt; to see next plot (q to exit): \n\n\n\n\n\nplot.type = qqplot.std.state.resids.xtT \n\n\n\n\n\nFinished plots.\n\n\n\n\n\nplot.type = acf.std.model.resids.ytt1 \n\n\n\n\n\nHit &lt;Return&gt; to see next plot (q to exit): \n\n\nWell, this model does very poorly. The model is missing data, there are residual patterns in all four states, the QQ plots aren’t all terrible but not totally normal and there is some temporal correlation in the ACFs.\nLet’s look at the corrplot:\n\n\nCode\nQ_4 &lt;- coef(m_cyl_4, type = \"matrix\")$Q\ncorrmat_4 &lt;- diag(1/sqrt(diag(Q_4))) %*% Q_4 %*% diag(1/sqrt(diag(Q_4)))\ncorrplot(corrmat_4)\n\n\n\n\n\nThe unconstrained Q matrix shows that there is a fair amount of correlation between states. This model overall is MUCH WORSE than no cycling.\nWill different cycling assumptions perform any better?\n\n\nNine Years\nAnd we’ll set up a co-variate matrix and change the p to 9.\n\n\nCode\nd_cyl &lt;- matrix(0,2,TT)\n\np&lt;-9\n\nd_cyl[1,] &lt;- sin(2 * pi * (1:TT)/p)\nd_cyl[2,] &lt;- cos(2 * pi * (1:TT)/p)\n\n\n \nmod.list &lt;- list(U = U_cyl, \n                 Q = \"unconstrained\",\n                 Z = Z_cyl, \n                 A = \"zero\",\n                 D=\"unconstrained\",\n                 d = d_cyl) \n\nm &lt;- dim(Z_cyl)[2]\nm_cyl_9 &lt;- MARSS(dat, model = mod.list, inits = list(x0 = matrix(0, m, 1)))\n\n\nSuccess! abstol and log-log tests passed at 456 iterations.\nAlert: conv.test.slope.tol is 0.5.\nTest with smaller values (&lt;0.1) to ensure convergence.\n\nMARSS fit is\nEstimation method: kem \nConvergence test: conv.test.slope.tol = 0.5, abstol = 0.001\nEstimation converged in 456 iterations. \nLog-likelihood: -740.5612 \nAIC: 1579.122   AICc: 1587.556   \n \n                                                                                                Estimate\nR.diag                                                                                          0.537851\nU.Cascades                                                                                     -0.024773\nU.JohnDay                                                                                      -0.019922\nU.Walla                                                                                        -0.027059\nU.Yakima                                                                                        0.027994\nQ.(1,1)                                                                                         0.057938\nQ.(2,1)                                                                                         0.057843\nQ.(3,1)                                                                                         0.035569\nQ.(4,1)                                                                                         0.051534\nQ.(2,2)                                                                                         0.105069\nQ.(3,2)                                                                                         0.054112\nQ.(4,2)                                                                                         0.082292\nQ.(3,3)                                                                                         0.029194\nQ.(4,3)                                                                                         0.043774\nQ.(4,4)                                                                                         0.065984\nx0.X1                                                                                           6.923487\nx0.X2                                                                                           7.606757\nx0.X3                                                                                           7.795524\nx0.X4                                                                                           4.362978\nD.(Steelhead (Middle Columbia River DPS) Deschutes River Eastside - summer,1)                  -0.009839\nD.(Steelhead (Middle Columbia River DPS) Deschutes River Westside - summer,1)                   0.000495\nD.(Steelhead (Middle Columbia River DPS) Fifteenmile Creek - winter,1)                         -0.099255\nD.(Steelhead (Middle Columbia River DPS) John Day River Lower Mainstem Tributaries - summer,1) -0.115589\nD.(Steelhead (Middle Columbia River DPS) John Day River Upper Mainstem - summer,1)             -0.077972\nD.(Steelhead (Middle Columbia River DPS) Middle Fork John Day River - summer,1)                -0.114415\nD.(Steelhead (Middle Columbia River DPS) North Fork John Day River - summer,1)                  0.013860\nD.(Steelhead (Middle Columbia River DPS) South Fork John Day River - summer,1)                 -0.175876\nD.(Steelhead (Middle Columbia River DPS) Touchet River - summer,1)                              0.122691\nD.(Steelhead (Middle Columbia River DPS) Umatilla River - summer,1)                             0.067741\nD.(Steelhead (Middle Columbia River DPS) Walla Walla River - summer,1)                         -0.147210\nD.(Steelhead (Middle Columbia River DPS) Naches River - summer,1)                               0.055801\nD.(Steelhead (Middle Columbia River DPS) Satus Creek - summer,1)                               -0.040935\nD.(Steelhead (Middle Columbia River DPS) Toppenish Creek - summer,1)                           -0.193744\nD.(Steelhead (Middle Columbia River DPS) Yakima River Upper Mainstem - summer,1)               -0.030299\nD.(Steelhead (Middle Columbia River DPS) Deschutes River Eastside - summer,2)                   0.005567\nD.(Steelhead (Middle Columbia River DPS) Deschutes River Westside - summer,2)                   0.050042\nD.(Steelhead (Middle Columbia River DPS) Fifteenmile Creek - winter,2)                          0.324118\nD.(Steelhead (Middle Columbia River DPS) John Day River Lower Mainstem Tributaries - summer,2)  0.227233\nD.(Steelhead (Middle Columbia River DPS) John Day River Upper Mainstem - summer,2)              0.255739\nD.(Steelhead (Middle Columbia River DPS) Middle Fork John Day River - summer,2)                 0.257472\nD.(Steelhead (Middle Columbia River DPS) North Fork John Day River - summer,2)                  0.297389\nD.(Steelhead (Middle Columbia River DPS) South Fork John Day River - summer,2)                  0.296448\nD.(Steelhead (Middle Columbia River DPS) Touchet River - summer,2)                              0.260476\nD.(Steelhead (Middle Columbia River DPS) Umatilla River - summer,2)                            -0.033824\nD.(Steelhead (Middle Columbia River DPS) Walla Walla River - summer,2)                          0.247593\nD.(Steelhead (Middle Columbia River DPS) Naches River - summer,2)                               0.252340\nD.(Steelhead (Middle Columbia River DPS) Satus Creek - summer,2)                                0.237560\nD.(Steelhead (Middle Columbia River DPS) Toppenish Creek - summer,2)                            0.238715\nD.(Steelhead (Middle Columbia River DPS) Yakima River Upper Mainstem - summer,2)                0.140014\nInitial states (x0) defined at t=0\n\nStandard errors have not been calculated. \nUse MARSSparamCIs to compute CIs and bias estimates.\n\n\nThis model converged, but still has a bad AIC. this model AICc is BAD.\n\n\nCode\nautoplot(m_cyl_9)\n\n\nMARSSresiduals.tt1 reported warnings. See msg element of returned residuals object.\nMARSSresiduals.tT reported warnings. See msg element or attribute of returned residuals object.\n\n\n\n\n\nplot.type = xtT \n\n\n\n\n\nHit &lt;Return&gt; to see next plot (q to exit): \n\n\n\n\n\nplot.type = fitted.ytT \n\n\n\n\n\nHit &lt;Return&gt; to see next plot (q to exit): \n\n\n\n\n\nplot.type = model.resids.ytt1 \n\n\n\n\n\nHit &lt;Return&gt; to see next plot (q to exit): \n\n\n\n\n\nplot.type = std.model.resids.ytT \n\n\n\n\n\nHit &lt;Return&gt; to see next plot (q to exit): \n\n\n\n\n\nplot.type = std.state.resids.xtT \n\n\n\n\n\nHit &lt;Return&gt; to see next plot (q to exit): \n\n\n\n\n\nplot.type = qqplot.std.model.resids.ytt1 \n\n\n\n\n\nHit &lt;Return&gt; to see next plot (q to exit): \n\n\n\n\n\nplot.type = qqplot.std.state.resids.xtT \n\n\n\n\n\nFinished plots.\n\n\n\n\n\nplot.type = acf.std.model.resids.ytt1 \n\n\n\n\n\nHit &lt;Return&gt; to see next plot (q to exit): \n\n\nThis model performs similarly to the last model. Cycling my 9 years doesn’t seem to have improved anything.\nLet’s look at the corrplot: They are pretty similar to the last model.\n\n\nCode\nQ_9 &lt;- coef(m_cyl_9, type = \"matrix\")$Q\ncorrmat_9 &lt;- diag(1/sqrt(diag(Q_9))) %*% Q_9 %*% diag(1/sqrt(diag(Q_9)))\ncorrplot(corrmat_9)\n\n\n\n\n\n\n\n\nAICc Results for Cycling\n\n\nCode\nmods_cyl &lt;- c(\"2.4\",\"m_test\",\"m_cyl_4\", \"m_cyl_9\")\naic_cyl &lt;- c(m2.4$AICc, m_test$AICc, m_cyl_4$AICc, m_cyl_9$AICc)\ndaic_cyl &lt;- aic_cyl-min(aic_cyl)\ntab2 &lt;- cbind.data.frame(mods_cyl, aic_cyl, daic_cyl)\nkable(tab2, col.names = c(\"Hypothesis\", \"AICc\", \"delta AICc\"))\n\n\n\n\n\nHypothesis\nAICc\ndelta AICc\n\n\n\n\n2.4\n1009.027\n0.0000\n\n\nm_test\n1716.095\n707.0687\n\n\nm_cyl_4\n1595.392\n586.3650\n\n\nm_cyl_9\n1587.556\n578.5295\n\n\n\n\n\nThe cycling assumptions tested in this excersize clearly worsened model fits."
  },
  {
    "objectID": "Lab-3/Lab-3-DFA.html#background",
    "href": "Lab-3/Lab-3-DFA.html#background",
    "title": "12  Lab Intro",
    "section": "Background",
    "text": "Background\nFor this lab you will use dynamic factor analysis (DFA) to examine common temporal patterns in multivariate plankton data from Lake Washington. These data are a bit noisy and gappy, so you will need to make some choices about which species and time period(s) to examine."
  },
  {
    "objectID": "Lab-3/Lab-3-DFA.html#teams",
    "href": "Lab-3/Lab-3-DFA.html#teams",
    "title": "12  Lab Intro",
    "section": "Teams",
    "text": "Teams\n\nLiz Elmstrom (SAFS), Dylan Hubl (SEFS)\nMaria Kuruvilla (QERM), Eric French (CEE), Madison Shipley (SAFS)\nNick Chambers (SAFS), Terrance Wang (SAFS), Zoe Rand (QERM)\nEmma Timmins-Schiffman (Genome Sci), Karl Veggerby (SAFS), Miranda Mudge (Molecular & Cellular)"
  },
  {
    "objectID": "Lab-3/Lab-3-DFA.html#lake-washington-data",
    "href": "Lab-3/Lab-3-DFA.html#lake-washington-data",
    "title": "12  Lab Intro",
    "section": "Lake Washington data",
    "text": "Lake Washington data\nFor reference, here are the columns in the Lake Washington data set:\n\nIndices\n\nYear: year\n\nMonth: month as an integer\n\n\n\nEnvironmental data\n\nTemp: water temperature in degrees C\n\nTP: total phosphorous concentration in mg m-3\n\npH: pH.\n\n\n\nPhytoplankton\n\nCryptomonas: small brown or green algae (edible)\n\nDiatoms: small algae rich in silica (edible)\n\nGreens: general class of algae (edible)\n\nBluegreens: cyanobacteria that can fix nitrogen (inedible)\n\nUnicells: very small algae (edible)\n\nOther.algae: generic catch-all for atypical species (edible)\n\n\n\nZooplankton\n\nConochilus: colonial form of rotifer (grazer)\n\nCyclops: cyclopoid copepod (grazer)\n\nDaphnia: cladoceran (grazer)\n\nDiaptomus: calanoid copepod (grazer)\n\nEpischura: very large calanoid copepod (predator)\n\nLeptodora: very large cladoceran (predator)\n\nNeomysis: opossum shrimp (predator)\n\nNon.daphnid.cladocerans: catch-all for other cladocerans (grazers)\nNon.colonial.rotifers: free-floating rotifers (grazers)"
  },
  {
    "objectID": "Lab-3/Lab-3-DFA.html#resources",
    "href": "Lab-3/Lab-3-DFA.html#resources",
    "title": "12  Lab Intro",
    "section": "Resources",
    "text": "Resources\nLab materials from April 20 [online here]\nChapter 10 Dynamic Factor Analysis. ATSA Lab Book. [online here]"
  },
  {
    "objectID": "Lab-4/Lab-4-HMM.html",
    "href": "Lab-4/Lab-4-HMM.html",
    "title": "13  Lab Intro",
    "section": "",
    "text": "Part 1. Hidden Markov Models\nIdentifying regimes using Hidden Markov Models (HMMs)\nFor the first part of the homework, we’ll use data from the Pacific Decadal Oscillation (PDO) to ask questions about identifying regimes. This dataset can be accessed via the rsoi package. First, let’s grab the data. Run the install.packages() code if you need the rsoi package.\n\n\nCode\nlibrary(dplyr)\n#install.packages(\"rsoi\")\npdo &lt;- rsoi::download_pdo()\n\n\nWe will look at the winter PDO only. We need to shift the year for Oct-Dec by 1 since Oct-Feb spans 2 calendar years.\n\n\nCode\npdo$Year[which(pdo$Month%in%c(\"Oct\",\"Nov\",\"Dec\"))] &lt;- pdo$Year[which(pdo$Month%in%c(\"Oct\",\"Nov\",\"Dec\"))] + 1\npdo &lt;- dplyr::group_by(pdo, Year) %&gt;%\n  dplyr::summarize(winter_pdo = mean(PDO[which(Month %in% c(\"Oct\",\"Nov\",\"Dec\",\"Jan\",\"Feb\"))])) %&gt;% \n  dplyr::select(winter_pdo, Year)\n# The first year will be missing Oct-Dec\npdo &lt;- pdo[-1,]\n\n\nUse pdo for your analyses. You will be modeling winter_pdo. Use the hmmTMB or depmixS4 packages discussed in the HMM lecture.\n\nFit a 2-state HMM to the annual indices of winter PDO. Assume Gaussian errors (default). See the lecture on HMMs and/or section 3 in the depmixS4 vignette.\nTry fitting the model 10-20 times. Does the likelihood seem reasonably stable? (Note logLik() in depmixS4 gets you the log-likelihood from model fits in R).\nWhat is the transition matrix for the best model? What are the persistence probabilities (e.g. probabilities of staying in the same state from step \\(t\\) to \\(t+1\\))?\nPlot the predicted values versus year. See slide 50 of the HMM lecture for an example.\nPlot the posterior probability of being in the various states from your best model (e.g. probability of being in state 1 over time)\nWhat is the long-run probability that the PDO is in state 1 versus state 2? You can calculate this from the transition matrix. There is an analytical solution for this (a bit of googling will find it). Or you can run a for loop to find it. Let \\(p_1\\) be the probability that PDO is in state 1 and \\(p_2\\) be the probability that PDO is in state 2. Note \\(p_1 + p_2 = 1\\). If \\(P\\) is the transition matrix (in Q3),\n\n\\[\\begin{bmatrix}p_1&p_2\\end{bmatrix}_n = \\begin{bmatrix}p_1&p_2\\end{bmatrix}_{n-1} P\\] Note this is a 1x2 matrix times a 2x2 matrix on the right. Start with \\(p_1=1\\) and \\(p_2=0\\), say. Run a for loop until\n\\[\\begin{bmatrix}p_1&p_2\\end{bmatrix}_n \\approx \\begin{bmatrix}p_1&p_2\\end{bmatrix}_{n-1}\\] That \\(\\begin{bmatrix}p_1&p_2\\end{bmatrix}_n\\) is the long-run probability in each state.\nSome ideas for optional extra analyses\n\nUsing slide 15 of the HMM lecture as a template and the matrix in Q3, write out your fitted HMM model as equations\nChange the model to a 3-state model. Using AIC as a model selection metric, does the 3-state model perform better (lower AIC) compared to the 2-state model? What about a 1-state model?\nIf you include time varying parameters (e.g. year) in the means of each state, or state transition probabilities, does the model do any better?\nRun diagnostics on the best model. Any problems?\nCompare the transition matrices for fits with different random starting conditions. Are the transition matrices stable?\n\n\n\nPart 2. Fitting Multivariate HMMs\nAs part of the California Current Integrated Ecosystem Report, NOAA scientists do annual updates of stoplight charts for ecosystem indicators.\nWe have included the stoplight.csv dataset for this week. One of the columns divides indicators into groups (e.g. Local Physical, Local Biological, etc). Please pick a type of indicators, and develop a 2- or 3-state multivariate HMM. A few tips:\n\nAssume all responses are Gaussian.\nYou’re welcome to include covariates (year? Climate variables?) – but fitting a simple model without covariates is also totally fine\n\nSummarize the model you’ve created. Specifically,\n\nDoes it converge?\nHow many states seem to be most supported?\nWhat are the transition probabilities?\nAnything else interesting that you’ve discovered?"
  }
]